"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4";
exports.ids = ["vendor-chunks/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4"];
exports.modules = {

/***/ "../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/utils/flush-chunks.js":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/utils/flush-chunks.js ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* eslint-disable no-undef */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.flushChunks = exports.getAllKnownRemotes = exports.usedChunks = void 0;\n// @ts-ignore\nif (!globalThis.usedChunks) {\n    // @ts-ignore\n    globalThis.usedChunks = new Set();\n}\n/**\n * Initialize usedChunks and share it globally.\n * @type {Set}\n */\n// @ts-ignore\nexports.usedChunks = globalThis.usedChunks;\n/**\n * Load hostStats from the JSON file.\n * @returns {object} hostStats - An object containing host stats data.\n */\nconst loadHostStats = () => {\n    try {\n        //@ts-ignore\n        return require('../federated-stats.json');\n    }\n    catch (e) {\n        return {};\n    }\n};\nconst getAllKnownRemotes = function () {\n    // Attempt to access the global federation controller safely\n    const federationController = new Function('return globalThis')()\n        .__FEDERATION__;\n    if (!federationController || !federationController.__INSTANCES__) {\n        // If the federation controller or instances are not defined, return an empty object\n        return {};\n    }\n    var collected = {};\n    // Use a for...of loop to iterate over all federation instances\n    for (const instance of federationController.__INSTANCES__) {\n        // Use another for...of loop to iterate over the module cache Map entries\n        for (const [key, cacheModule] of instance.moduleCache) {\n            // Check if the cacheModule has remoteInfo and use it to collect remote names\n            if (cacheModule.remoteInfo) {\n                //@ts-ignore\n                collected[cacheModule.remoteInfo.name] = cacheModule.remoteInfo;\n            }\n        }\n    }\n    return collected;\n};\nexports.getAllKnownRemotes = getAllKnownRemotes;\n/**\n * Create a shareMap based on the loaded modules.\n * @returns {object} shareMap - An object containing the shareMap data.\n */\nconst createShareMap = () => {\n    // Check if __webpack_share_scopes__ is defined and has a default property\n    // @ts-ignore\n    if (__webpack_require__.S?.default) {\n        // Reduce the keys of the default property to create the share map\n        // @ts-ignore\n        return Object.keys(__webpack_require__.S.default).reduce((acc, key) => {\n            // @ts-ignore\n            const shareMap = __webpack_require__.S.default[key];\n            // shareScope may equal undefined or null if it has unexpected value\n            if (!shareMap || typeof shareMap !== 'object') {\n                return acc;\n            }\n            // Get the loaded modules for the current key\n            const loadedModules = Object.values(shareMap)\n                // Filter out the modules that are not loaded\n                // @ts-ignore\n                .filter((sharedModule) => sharedModule.loaded)\n                // Map the filtered modules to their 'from' properties\n                // @ts-ignore\n                .map((sharedModule) => sharedModule.from);\n            // If there are any loaded modules, add them to the accumulator object\n            if (loadedModules.length > 0) {\n                // @ts-ignore\n                acc[key] = loadedModules;\n            }\n            // Return the accumulator object for the next iteration\n            return acc;\n        }, {});\n    }\n    // If __webpack_share_scopes__ is not defined or doesn't have a default property, return an empty object\n    return {};\n};\n/**\n * Process a single chunk and return an array of updated chunks.\n * @param {string} chunk - A chunk string containing remote and request data.\n * @param {object} shareMap - An object containing the shareMap data.\n * @param {object} hostStats - An object containing host stats data.\n * @returns {Promise<Array>} A promise that resolves to an array of updated chunks.\n */\n// @ts-ignore\nconst processChunk = async (chunk, shareMap, hostStats) => {\n    const chunks = new Set();\n    const [remote, req] = chunk.split('/');\n    const request = './' + req;\n    const knownRemotes = (0, exports.getAllKnownRemotes)();\n    //@ts-ignore\n    if (!knownRemotes[remote]) {\n        console.error(`flush chunks: Remote ${remote} is not defined in the global config`);\n        return;\n    }\n    try {\n        //@ts-ignore\n        const remoteName = new URL(knownRemotes[remote].entry).pathname\n            .split('/')\n            .pop();\n        //@ts-ignore\n        const statsFile = knownRemotes[remote].entry\n            .replace(remoteName, 'federated-stats.json')\n            .replace('ssr', 'chunks');\n        let stats = {};\n        try {\n            stats = await fetch(statsFile).then((res) => res.json());\n        }\n        catch (e) {\n            console.error('flush error', e);\n        }\n        //@ts-ignore\n        const [prefix] = knownRemotes[remote].entry.split('static/');\n        //@ts-ignore\n        if (stats.federatedModules) {\n            //@ts-ignore\n            stats.federatedModules.forEach((modules) => {\n                if (modules.exposes?.[request]) {\n                    //@ts-ignore\n                    modules.exposes[request].forEach((chunk) => {\n                        chunks.add([prefix, chunk].join(''));\n                        Object.values(chunk).forEach((chunk) => {\n                            //@ts-ignore\n                            if (chunk.files) {\n                                //@ts-ignore\n                                chunk.files.forEach((file) => {\n                                    chunks.add(prefix + file);\n                                });\n                            }\n                            //@ts-ignore\n                            if (chunk.requiredModules) {\n                                //@ts-ignore\n                                chunk.requiredModules.forEach((module) => {\n                                    if (shareMap[module]) {\n                                        // If the module is from the host, log the host stats\n                                    }\n                                });\n                            }\n                        });\n                    });\n                }\n            });\n        }\n        return Array.from(chunks);\n    }\n    catch (e) {\n        console.error('flush error:', e);\n    }\n};\n/**\n * Flush the chunks and return a deduplicated array of chunks.\n * @returns {Promise<Array>} A promise that resolves to an array of deduplicated chunks.\n */\nconst flushChunks = async () => {\n    const hostStats = loadHostStats();\n    const shareMap = createShareMap();\n    const allFlushed = await Promise.all(Array.from(exports.usedChunks).map(async (chunk) => processChunk(chunk, shareMap, hostStats)));\n    // Deduplicate the chunks array\n    const dedupe = Array.from(new Set([...allFlushed.flat()]));\n    // Clear usedChunks\n    exports.usedChunks.clear();\n    // Filter out any undefined or null values\n    return dedupe.filter(Boolean);\n};\nexports.flushChunks = flushChunks;\n//# sourceMappingURL=flush-chunks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/utils/flush-chunks.js\n");

/***/ }),

/***/ "../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/utils/hot-reload.js":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/utils/hot-reload.js ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.revalidate = exports.fetchRemote = exports.createFetcher = exports.checkFakeRemote = exports.checkMedusaConfigChange = exports.checkUnreachableRemote = exports.performReload = void 0;\nexports.getFetchModule = getFetchModule;\nconst flush_chunks_1 = __webpack_require__(/*! ./flush-chunks */ \"../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/utils/flush-chunks.js\");\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nconst helpers_1 = __importDefault(__webpack_require__(/*! @module-federation/runtime/helpers */ \"../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/helpers.cjs.js\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst getRequire = () => {\n    //@ts-ignore\n    return typeof require !== 'undefined'\n        ? require\n        : __webpack_require__(\"../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/utils sync recursive\");\n};\nfunction callsites() {\n    const _prepareStackTrace = Error.prepareStackTrace;\n    try {\n        let result = [];\n        Error.prepareStackTrace = (_, callSites) => {\n            const callSitesWithoutCurrent = callSites.slice(1);\n            result = callSitesWithoutCurrent;\n            return callSitesWithoutCurrent;\n        };\n        new Error().stack;\n        return result;\n    }\n    finally {\n        Error.prepareStackTrace = _prepareStackTrace;\n    }\n}\nconst find = function (moduleName) {\n    if (moduleName[0] === '.') {\n        // Use custom callsites function\n        const stack = callsites();\n        for (const frame of stack) {\n            const filename = frame.getFileName();\n            if (filename && filename !== module.filename) {\n                moduleName = path_1.default.resolve(path_1.default.dirname(filename), moduleName);\n                break;\n            }\n        }\n    }\n    try {\n        return getRequire().resolve(moduleName);\n    }\n    catch (e) {\n        return;\n    }\n};\n/**\n * Removes a module from the cache. We need this to re-load our http_request !\n * see: https://stackoverflow.com/a/14801711/1148249\n */\nconst decache = async function (moduleName) {\n    //@ts-ignore\n    moduleName = find(moduleName);\n    if (!moduleName) {\n        return;\n    }\n    const currentChunk = getRequire().cache[__filename];\n    // Run over the cache looking for the files\n    // loaded by the specified module name\n    searchCache(moduleName, function (mod) {\n        delete getRequire().cache[mod.id];\n    });\n    try {\n        // Remove cached paths to the module.\n        // Thanks to @bentael for pointing this out.\n        //@ts-ignore\n        Object.keys(currentChunk.constructor._pathCache).forEach(function (cacheKey) {\n            if (cacheKey.indexOf(moduleName) > -1) {\n                //@ts-ignore\n                delete currentChunk.constructor._pathCache[cacheKey];\n            }\n        });\n    }\n    catch (error) {\n        //null\n    }\n};\n/**\n * Runs over the cache to search for all the cached\n * files\n */\nconst searchCache = function (moduleName, callback) {\n    // Resolve the module identified by the specified name\n    let mod = getRequire().resolve(moduleName);\n    const visited = {};\n    // Check if the module has been resolved and found within\n    // the cache no else so #ignore else https://git.io/vtgMI\n    /* istanbul ignore else */\n    //@ts-ignore\n    if (mod && (mod = getRequire().cache[mod]) !== undefined) {\n        // Recursively go over the results\n        (function run(current) {\n            visited[current.id] = true;\n            // Go over each of the module's children and\n            // run over it\n            current.children.forEach(function (child) {\n                // ignore .node files, decaching native modules throws a\n                // \"module did not self-register\" error on second require\n                if (path_1.default.extname(child.filename) !== '.node' && !visited[child.id]) {\n                    run(child);\n                }\n            });\n            // Call the specified callback providing the\n            // found module\n            callback(current);\n            //@ts-ignore\n        })(mod);\n    }\n};\nconst hashmap = globalThis.mfHashMap || {};\nglobalThis.moduleGraphDirty = false;\nconst requireCacheRegex = /(remote|server|hot-reload|react-loadable-manifest|runtime|styled-jsx)/;\nconst performReload = async (shouldReload) => {\n    if (!shouldReload) {\n        return false;\n    }\n    const req = getRequire();\n    const gs = new Function('return globalThis')();\n    const entries = gs.entryChunkCache || [];\n    if (!gs.entryChunkCache) {\n        Object.keys(req.cache).forEach((key) => {\n            if (requireCacheRegex.test(key)) {\n                decache(key); // Use decache here\n            }\n        });\n    }\n    else {\n        gs.entryChunkCache.clear();\n    }\n    //@ts-ignore\n    gs.__FEDERATION__.__INSTANCES__.map((i) => {\n        //@ts-ignore\n        i.moduleCache.forEach((mc) => {\n            if (mc.remoteInfo && mc.remoteInfo.entryGlobalName) {\n                delete gs[mc.remoteInfo.entryGlobalName];\n            }\n        });\n        i.moduleCache.clear();\n        if (gs[i.name]) {\n            delete gs[i.name];\n        }\n    });\n    //@ts-ignore\n    __webpack_require__?.federation?.instance?.moduleCache?.clear();\n    helpers_1.default.global.resetFederationGlobalInfo();\n    globalThis.moduleGraphDirty = false;\n    globalThis.mfHashMap = {};\n    for (const entry of entries) {\n        decache(entry);\n    }\n    //reload entries again\n    for (const entry of entries) {\n        await getRequire()(entry);\n    }\n    return true;\n};\nexports.performReload = performReload;\nconst checkUnreachableRemote = (remoteScope) => {\n    for (const property in remoteScope.remotes) {\n        if (!remoteScope[property]) {\n            console.error('unreachable remote found', property, 'hot reloading to refetch');\n            return true;\n        }\n    }\n    return false;\n};\nexports.checkUnreachableRemote = checkUnreachableRemote;\nconst checkMedusaConfigChange = (remoteScope, fetchModule) => {\n    //@ts-ignore\n    if (remoteScope._medusa) {\n        //@ts-ignore\n        for (const property in remoteScope._medusa) {\n            fetchModule(property)\n                .then((res) => res.json())\n                .then((medusaResponse) => {\n                if (medusaResponse.version !==\n                    //@ts-ignore\n                    remoteScope?._medusa[property].version) {\n                    console.log('medusa config changed', property, 'hot reloading to refetch');\n                    (0, exports.performReload)(true);\n                    return true;\n                }\n            });\n        }\n    }\n    return false;\n};\nexports.checkMedusaConfigChange = checkMedusaConfigChange;\nconst checkFakeRemote = (remoteScope) => {\n    for (const property in remoteScope._config) {\n        let remote = remoteScope._config[property];\n        const resolveRemote = async () => {\n            remote = await remote();\n        };\n        if (typeof remote === 'function') {\n            resolveRemote();\n        }\n        if (remote.fake) {\n            console.log('fake remote found', property, 'hot reloading to refetch');\n            return true;\n        }\n    }\n    return false;\n};\nexports.checkFakeRemote = checkFakeRemote;\nconst createFetcher = (url, fetchModule, name, cb) => {\n    return fetchModule(url)\n        .then((re) => {\n        if (!re.ok) {\n            throw new Error(`Error loading remote: status: ${re.status}, content-type: ${re.headers.get('content-type')}`);\n        }\n        return re.text();\n    })\n        .then((contents) => {\n        const hash = crypto_1.default.createHash('md5').update(contents).digest('hex');\n        cb(hash);\n    })\n        .catch((e) => {\n        console.error('Remote', name, url, 'Failed to load or is not online', e);\n    });\n};\nexports.createFetcher = createFetcher;\nconst fetchRemote = (remoteScope, fetchModule) => {\n    const fetches = [];\n    let needReload = false;\n    for (const property in remoteScope) {\n        const name = property;\n        const container = remoteScope[property];\n        const url = container.entry;\n        const fetcher = (0, exports.createFetcher)(url, fetchModule, name, (hash) => {\n            if (hashmap[name]) {\n                if (hashmap[name] !== hash) {\n                    hashmap[name] = hash;\n                    needReload = true;\n                    console.log(name, 'hash is different - must hot reload server');\n                }\n            }\n            else {\n                hashmap[name] = hash;\n            }\n        });\n        fetches.push(fetcher);\n    }\n    return Promise.all(fetches).then(() => {\n        return needReload;\n    });\n};\nexports.fetchRemote = fetchRemote;\n//@ts-ignore\nconst revalidate = async (fetchModule = getFetchModule() || (() => { }), force = false) => {\n    if (globalThis.moduleGraphDirty) {\n        force = true;\n    }\n    const remotesFromAPI = (0, flush_chunks_1.getAllKnownRemotes)();\n    //@ts-ignore\n    return new Promise((res) => {\n        if (force) {\n            if (Object.keys(hashmap).length !== 0) {\n                res(true);\n                return;\n            }\n        }\n        if ((0, exports.checkMedusaConfigChange)(remotesFromAPI, fetchModule)) {\n            res(true);\n        }\n        if ((0, exports.checkFakeRemote)(remotesFromAPI)) {\n            res(true);\n        }\n        (0, exports.fetchRemote)(remotesFromAPI, fetchModule).then((val) => {\n            res(val);\n        });\n    }).then((shouldReload) => {\n        return (0, exports.performReload)(shouldReload);\n    });\n};\nexports.revalidate = revalidate;\nfunction getFetchModule() {\n    //@ts-ignore\n    const loadedModule = \n    //@ts-ignore\n    globalThis.webpackChunkLoad || global.webpackChunkLoad || global.fetch;\n    if (loadedModule) {\n        return loadedModule;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const nodeFetch = __webpack_require__(/*! node-fetch */ \"../node_modules/.pnpm/node-fetch@2.7.0_encoding@0.1.13/node_modules/node-fetch/lib/index.js\");\n    return nodeFetch.default || nodeFetch;\n}\n//# sourceMappingURL=hot-reload.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/utils/hot-reload.js\n");

/***/ }),

/***/ "../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/utils/index.js":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/utils/index.js ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./hot-reload */ \"../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/utils/hot-reload.js\"), exports);\n__exportStar(__webpack_require__(/*! ./flush-chunks */ \"../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/utils/flush-chunks.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Btb2R1bGUtZmVkZXJhdGlvbitub2RlQDIuNi44X25leHRAMTQuMS40X3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wX19yZWFjdEAxOC4yLjBfX3JlYWN0LV93NHhtZjdhdmp3b3F4MnZudHNiam80cWxvNC9ub2RlX21vZHVsZXMvQG1vZHVsZS1mZWRlcmF0aW9uL25vZGUvZGlzdC9zcmMvdXRpbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHNPQUFjO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQywwT0FBZ0I7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG1vZHVsZS1mZWRlcmF0aW9uK25vZGVAMi42LjhfbmV4dEAxNC4xLjRfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjBfX3JlYWN0QDE4LjIuMF9fcmVhY3QtX3c0eG1mN2F2andvcXgydm50c2JqbzRxbG80L25vZGVfbW9kdWxlcy9AbW9kdWxlLWZlZGVyYXRpb24vbm9kZS9kaXN0L3NyYy91dGlscy9pbmRleC5qcz8yYmQ3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaG90LXJlbG9hZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZmx1c2gtY2h1bmtzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/utils/index.js\n");

/***/ })

};
;