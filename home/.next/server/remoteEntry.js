/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/.federation/entry.f9043f7020a16d33f7d0806c46b3d935.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.federation/entry.f9043f7020a16d33f7d0806c46b3d935.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Users_jorgeperes_Desktop_teste_module_federation_poc_nextjs_ssr_poc_node_modules_pnpm_module_federation_webpack_bundler_runtime_0_7_3_node_modules_module_federation_webpack_bundler_runtime_dist_index_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/.pnpm/@module-federation+webpack-bundler-runtime@0.7.3/node_modules/@module-federation/webpack-bundler-runtime/dist/index.esm.mjs */ \"../node_modules/.pnpm/@module-federation+webpack-bundler-runtime@0.7.3/node_modules/@module-federation/webpack-bundler-runtime/dist/index.esm.mjs\");\n/* harmony import */ var _Users_jorgeperes_Desktop_teste_module_federation_poc_nextjs_ssr_poc_node_modules_pnpm_module_federation_node_2_6_8_next_14_1_4_react_dom_18_2_0_react_18_2_0_react_18_2_0_react_w4xmf7avjwoqx2vntsbjo4qlo4_node_modules_module_federation_node_dist_src_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/runtimePlugin.js?runtimePlugin */ \"../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/runtimePlugin.js?runtimePlugin\");\n/* harmony import */ var _Users_jorgeperes_Desktop_teste_module_federation_poc_nextjs_ssr_poc_node_modules_pnpm_module_federation_nextjs_mf_8_7_8_next_14_1_4_react_dom_18_2_0_react_18_2_0_react_18_2_0_r_pcycuvtzz5zlkowjzy2vwyrhb4_node_modules_module_federation_nextjs_mf_dist_src_plugins_container_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/.pnpm/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4/node_modules/@module-federation/nextjs-mf/dist/src/plugins/container/runtimePlugin.js?runtimePlugin */ \"../node_modules/.pnpm/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4/node_modules/@module-federation/nextjs-mf/dist/src/plugins/container/runtimePlugin.js?runtimePlugin\");\n\n\n\n\nif(!__webpack_require__.federation.runtime){\n\tvar prevFederation = __webpack_require__.federation;\n\t__webpack_require__.federation = {}\n\tfor(var key in _Users_jorgeperes_Desktop_teste_module_federation_poc_nextjs_ssr_poc_node_modules_pnpm_module_federation_webpack_bundler_runtime_0_7_3_node_modules_module_federation_webpack_bundler_runtime_dist_index_esm_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"]){\n\t\t__webpack_require__.federation[key] = _Users_jorgeperes_Desktop_teste_module_federation_poc_nextjs_ssr_poc_node_modules_pnpm_module_federation_webpack_bundler_runtime_0_7_3_node_modules_module_federation_webpack_bundler_runtime_dist_index_esm_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"][key];\n\t}\n\tfor(var key in prevFederation){\n\t\t__webpack_require__.federation[key] = prevFederation[key];\n\t}\n}\nif(!__webpack_require__.federation.instance){\n\tvar pluginsToAdd = [\n\t\t_Users_jorgeperes_Desktop_teste_module_federation_poc_nextjs_ssr_poc_node_modules_pnpm_module_federation_node_2_6_8_next_14_1_4_react_dom_18_2_0_react_18_2_0_react_18_2_0_react_w4xmf7avjwoqx2vntsbjo4qlo4_node_modules_module_federation_node_dist_src_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_1__[\"default\"] ? (_Users_jorgeperes_Desktop_teste_module_federation_poc_nextjs_ssr_poc_node_modules_pnpm_module_federation_node_2_6_8_next_14_1_4_react_dom_18_2_0_react_18_2_0_react_18_2_0_react_w4xmf7avjwoqx2vntsbjo4qlo4_node_modules_module_federation_node_dist_src_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_1__[\"default\"][\"default\"] || _Users_jorgeperes_Desktop_teste_module_federation_poc_nextjs_ssr_poc_node_modules_pnpm_module_federation_node_2_6_8_next_14_1_4_react_dom_18_2_0_react_18_2_0_react_18_2_0_react_w4xmf7avjwoqx2vntsbjo4qlo4_node_modules_module_federation_node_dist_src_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_1__[\"default\"])() : false,\n\t\t_Users_jorgeperes_Desktop_teste_module_federation_poc_nextjs_ssr_poc_node_modules_pnpm_module_federation_nextjs_mf_8_7_8_next_14_1_4_react_dom_18_2_0_react_18_2_0_react_18_2_0_r_pcycuvtzz5zlkowjzy2vwyrhb4_node_modules_module_federation_nextjs_mf_dist_src_plugins_container_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_2__[\"default\"] ? (_Users_jorgeperes_Desktop_teste_module_federation_poc_nextjs_ssr_poc_node_modules_pnpm_module_federation_nextjs_mf_8_7_8_next_14_1_4_react_dom_18_2_0_react_18_2_0_react_18_2_0_r_pcycuvtzz5zlkowjzy2vwyrhb4_node_modules_module_federation_nextjs_mf_dist_src_plugins_container_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"default\"] || _Users_jorgeperes_Desktop_teste_module_federation_poc_nextjs_ssr_poc_node_modules_pnpm_module_federation_nextjs_mf_8_7_8_next_14_1_4_react_dom_18_2_0_react_18_2_0_react_18_2_0_r_pcycuvtzz5zlkowjzy2vwyrhb4_node_modules_module_federation_nextjs_mf_dist_src_plugins_container_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_2__[\"default\"])() : false,\n\t].filter(Boolean);\n\t__webpack_require__.federation.initOptions.plugins = __webpack_require__.federation.initOptions.plugins ? \n\t__webpack_require__.federation.initOptions.plugins.concat(pluginsToAdd) : pluginsToAdd;\n\t__webpack_require__.federation.instance = __webpack_require__.federation.runtime.init(__webpack_require__.federation.initOptions);\n\tif(__webpack_require__.federation.attachShareScopeMap){\n\t\t__webpack_require__.federation.attachShareScopeMap(__webpack_require__)\n\t}\n\tif(__webpack_require__.federation.installInitialConsumes){\n\t\t__webpack_require__.federation.installInitialConsumes()\n\t}\n\n\tif(!__webpack_require__.federation.isMFRemote && __webpack_require__.federation.prefetch){\n\t__webpack_require__.federation.prefetch()\n\t}\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvLmZlZGVyYXRpb24vZW50cnkuZjkwNDNmNzAyMGExNmQzM2Y3ZDA4MDZjNDZiM2Q5MzUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUE2TztBQUN3RTtBQUN1Qjs7QUFFNVUsSUFBSSxtQkFBbUI7QUFDdkIsc0JBQXNCLG1CQUFtQjtBQUN6QyxDQUFDLG1CQUFtQjtBQUNwQixnQkFBZ0Isd1BBQVU7QUFDMUIsRUFBRSxtQkFBbUIsbUJBQW1CLHdQQUFVO0FBQ2xEO0FBQ0E7QUFDQSxFQUFFLG1CQUFtQjtBQUNyQjtBQUNBO0FBQ0EsSUFBSSxtQkFBbUI7QUFDdkI7QUFDQSxFQUFFLCtUQUFRLElBQUksMFVBQWdCLElBQUksK1RBQVE7QUFDMUMsRUFBRSx1VkFBUSxJQUFJLGtXQUFnQixJQUFJLHVWQUFRO0FBQzFDO0FBQ0EsQ0FBQyxtQkFBbUIsa0NBQWtDLG1CQUFtQjtBQUN6RSxDQUFDLG1CQUFtQjtBQUNwQixDQUFDLG1CQUFtQix1QkFBdUIsbUJBQW1CLHlCQUF5QixtQkFBbUI7QUFDMUcsSUFBSSxtQkFBbUI7QUFDdkIsRUFBRSxtQkFBbUIsZ0NBQWdDLG1CQUFtQjtBQUN4RTtBQUNBLElBQUksbUJBQW1CO0FBQ3ZCLEVBQUUsbUJBQW1CO0FBQ3JCOztBQUVBLEtBQUssbUJBQW1CLDBCQUEwQixtQkFBbUI7QUFDckUsQ0FBQyxtQkFBbUI7QUFDcEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUvLi9ub2RlX21vZHVsZXMvLmZlZGVyYXRpb24vZW50cnkuZjkwNDNmNzAyMGExNmQzM2Y3ZDA4MDZjNDZiM2Q5MzUuanM/YjdlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZmVkZXJhdGlvbiBmcm9tICcvVXNlcnMvam9yZ2VwZXJlcy9EZXNrdG9wL3Rlc3RlL21vZHVsZS1mZWRlcmF0aW9uLXBvYy9uZXh0anMtc3NyLXBvYy9ub2RlX21vZHVsZXMvLnBucG0vQG1vZHVsZS1mZWRlcmF0aW9uK3dlYnBhY2stYnVuZGxlci1ydW50aW1lQDAuNy4zL25vZGVfbW9kdWxlcy9AbW9kdWxlLWZlZGVyYXRpb24vd2VicGFjay1idW5kbGVyLXJ1bnRpbWUvZGlzdC9pbmRleC5lc20ubWpzJztcbmltcG9ydCBwbHVnaW5fMCBmcm9tICcvVXNlcnMvam9yZ2VwZXJlcy9EZXNrdG9wL3Rlc3RlL21vZHVsZS1mZWRlcmF0aW9uLXBvYy9uZXh0anMtc3NyLXBvYy9ub2RlX21vZHVsZXMvLnBucG0vQG1vZHVsZS1mZWRlcmF0aW9uK25vZGVAMi42LjhfbmV4dEAxNC4xLjRfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjBfX3JlYWN0QDE4LjIuMF9fcmVhY3QtX3c0eG1mN2F2andvcXgydm50c2JqbzRxbG80L25vZGVfbW9kdWxlcy9AbW9kdWxlLWZlZGVyYXRpb24vbm9kZS9kaXN0L3NyYy9ydW50aW1lUGx1Z2luLmpzP3J1bnRpbWVQbHVnaW4nO1xuaW1wb3J0IHBsdWdpbl8xIGZyb20gJy9Vc2Vycy9qb3JnZXBlcmVzL0Rlc2t0b3AvdGVzdGUvbW9kdWxlLWZlZGVyYXRpb24tcG9jL25leHRqcy1zc3ItcG9jL25vZGVfbW9kdWxlcy8ucG5wbS9AbW9kdWxlLWZlZGVyYXRpb24rbmV4dGpzLW1mQDguNy44X25leHRAMTQuMS40X3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wX19yZWFjdEAxOC4yLjBfX3JfcGN5Y3V2dHp6NXpsa293anp5MnZ3eXJoYjQvbm9kZV9tb2R1bGVzL0Btb2R1bGUtZmVkZXJhdGlvbi9uZXh0anMtbWYvZGlzdC9zcmMvcGx1Z2lucy9jb250YWluZXIvcnVudGltZVBsdWdpbi5qcz9ydW50aW1lUGx1Z2luJztcblxuaWYoIV9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5ydW50aW1lKXtcblx0dmFyIHByZXZGZWRlcmF0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24gPSB7fVxuXHRmb3IodmFyIGtleSBpbiBmZWRlcmF0aW9uKXtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb25ba2V5XSA9IGZlZGVyYXRpb25ba2V5XTtcblx0fVxuXHRmb3IodmFyIGtleSBpbiBwcmV2RmVkZXJhdGlvbil7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uW2tleV0gPSBwcmV2RmVkZXJhdGlvbltrZXldO1xuXHR9XG59XG5pZighX193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uLmluc3RhbmNlKXtcblx0dmFyIHBsdWdpbnNUb0FkZCA9IFtcblx0XHRwbHVnaW5fMCA/IChwbHVnaW5fMC5kZWZhdWx0IHx8IHBsdWdpbl8wKSgpIDogZmFsc2UsXG5cdFx0cGx1Z2luXzEgPyAocGx1Z2luXzEuZGVmYXVsdCB8fCBwbHVnaW5fMSkoKSA6IGZhbHNlLFxuXHRdLmZpbHRlcihCb29sZWFuKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uLmluaXRPcHRpb25zLnBsdWdpbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24uaW5pdE9wdGlvbnMucGx1Z2lucyA/IFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24uaW5pdE9wdGlvbnMucGx1Z2lucy5jb25jYXQocGx1Z2luc1RvQWRkKSA6IHBsdWdpbnNUb0FkZDtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uLmluc3RhbmNlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uLnJ1bnRpbWUuaW5pdChfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24uaW5pdE9wdGlvbnMpO1xuXHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24uYXR0YWNoU2hhcmVTY29wZU1hcCl7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uLmF0dGFjaFNoYXJlU2NvcGVNYXAoX193ZWJwYWNrX3JlcXVpcmVfXylcblx0fVxuXHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24uaW5zdGFsbEluaXRpYWxDb25zdW1lcyl7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uLmluc3RhbGxJbml0aWFsQ29uc3VtZXMoKVxuXHR9XG5cblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5pc01GUmVtb3RlICYmIF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5wcmVmZXRjaCl7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5wcmVmZXRjaCgpXG5cdH1cbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/.federation/entry.f9043f7020a16d33f7d0806c46b3d935.js\n");

/***/ }),

/***/ "webpack/container/entry/home":
/*!***********************!*\
  !*** container entry ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var moduleMap = {
	"./nav": () => {
		return __webpack_require__.e(/*! __federation_expose_nav */ "__federation_expose_nav").then(() => (() => ((__webpack_require__(/*! ./components/nav.js */ "./components/nav.js")))));
	},
	"./home": () => {
		return __webpack_require__.e(/*! __federation_expose_home */ "__federation_expose_home").then(() => (() => ((__webpack_require__(/*! ./pages/index.js */ "./pages/index.js")))));
	},
	"./pages-map": () => {
		return __webpack_require__.e(/*! __federation_expose_pages_map */ "vendor-chunks/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4").then(() => (() => ((__webpack_require__(/*! ../node_modules/.pnpm/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4/node_modules/@module-federation/nextjs-mf/dist/src/loaders/nextPageMapLoader.js!../node_modules/.pnpm/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4/node_modules/@module-federation/nextjs-mf/dist/src/loaders/nextPageMapLoader.js */ "../node_modules/.pnpm/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4/node_modules/@module-federation/nextjs-mf/dist/src/loaders/nextPageMapLoader.js!../node_modules/.pnpm/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4/node_modules/@module-federation/nextjs-mf/dist/src/loaders/nextPageMapLoader.js")))));
	},
	"./pages-map-v2": () => {
		return __webpack_require__.e(/*! __federation_expose_pages_map_v2 */ "vendor-chunks/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4").then(() => (() => ((__webpack_require__(/*! ../node_modules/.pnpm/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4/node_modules/@module-federation/nextjs-mf/dist/src/loaders/nextPageMapLoader.js?v2!../node_modules/.pnpm/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4/node_modules/@module-federation/nextjs-mf/dist/src/loaders/nextPageMapLoader.js */ "../node_modules/.pnpm/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4/node_modules/@module-federation/nextjs-mf/dist/src/loaders/nextPageMapLoader.js?v2!../node_modules/.pnpm/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4/node_modules/@module-federation/nextjs-mf/dist/src/loaders/nextPageMapLoader.js")))));
	},
	"./pages/checkout": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__checkout */ "__federation_expose_pages__checkout").then(() => (() => ((__webpack_require__(/*! ./pages/checkout.js */ "./pages/checkout.js")))));
	},
	"./pages/index": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__index */ "__federation_expose_home").then(() => (() => ((__webpack_require__(/*! ./pages/index.js */ "./pages/index.js")))));
	},
	"./pages/shop": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__shop */ "__federation_expose_pages__shop").then(() => (() => ((__webpack_require__(/*! ./pages/shop.js */ "./pages/shop.js")))));
	},
	"./pages/p/[...slug]": () => {
		return __webpack_require__.e(/*! __federation_expose_pages__p__[...slug] */ "__federation_expose_pages__p__[...slug]").then(() => (() => ((__webpack_require__(/*! ./pages/p/[...slug].js */ "./pages/p/[...slug].js")))));
	}
};
var get = (module, getScope) => {
	__webpack_require__.R = getScope;
	getScope = (
		__webpack_require__.o(moduleMap, module)
			? moduleMap[module]()
			: Promise.resolve().then(() => {
				throw new Error('Module "' + module + '" does not exist in container.');
			})
	);
	__webpack_require__.R = undefined;
	return getScope;
};
var init = (shareScope, initScope, remoteEntryInitOptions) => {
	return __webpack_require__.federation.bundlerRuntime.initContainerEntry({	webpackRequire: __webpack_require__,
		shareScope: shareScope,
		initScope: initScope,
		remoteEntryInitOptions: remoteEntryInitOptions,
		shareScopeKey: "default"
	})
};



// This exports getters to disallow modifications
__webpack_require__.d(exports, {
	get: () => (get),
	init: () => (init)
});

/***/ }),

/***/ "next/dist/compiled/next-server/pages.runtime.dev.js":
/*!**********************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages.runtime.dev.js" ***!
  \**********************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages.runtime.dev.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

module.exports = require("react");

/***/ }),

/***/ "react-dom":
/*!****************************!*\
  !*** external "react-dom" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("react-dom");

/***/ }),

/***/ "styled-jsx/style":
/*!***********************************!*\
  !*** external "styled-jsx/style" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("styled-jsx/style");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("process");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "webpack/container/reference/checkout":
/*!*********************************************************************************!*\
  !*** external "checkout@http://localhost:3000/_next/static/ssr/remoteEntry.js" ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var __webpack_error__ = new Error();
module.exports = new Promise((resolve, reject) => {
	if(typeof checkout !== "undefined") return resolve();
	__webpack_require__.l("http://localhost:3000/_next/static/ssr/remoteEntry.js", (event) => {
		if(typeof checkout !== "undefined") return resolve();
		var errorType = event && (event.type === 'load' ? 'missing' : event.type);
		var realSrc = event && event.target && event.target.src;
		__webpack_error__.message = 'Loading script failed.\n(' + errorType + ': ' + realSrc + ')';
		__webpack_error__.name = 'ScriptExternalLoadError';
		__webpack_error__.type = errorType;
		__webpack_error__.request = realSrc;
		reject(__webpack_error__);
	}, "checkout");
}).then(() => (checkout));

/***/ }),

/***/ "webpack/container/reference/shop":
/*!*****************************************************************************!*\
  !*** external "shop@http://localhost:3002/_next/static/ssr/remoteEntry.js" ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var __webpack_error__ = new Error();
module.exports = new Promise((resolve, reject) => {
	if(typeof shop !== "undefined") return resolve();
	__webpack_require__.l("http://localhost:3002/_next/static/ssr/remoteEntry.js", (event) => {
		if(typeof shop !== "undefined") return resolve();
		var errorType = event && (event.type === 'load' ? 'missing' : event.type);
		var realSrc = event && event.target && event.target.src;
		__webpack_error__.message = 'Loading script failed.\n(' + errorType + ': ' + realSrc + ')';
		__webpack_error__.name = 'ScriptExternalLoadError';
		__webpack_error__.type = errorType;
		__webpack_error__.request = realSrc;
		reject(__webpack_error__);
	}, "shop");
}).then(() => (shop));

/***/ }),

/***/ "../node_modules/.pnpm/isomorphic-rslog@0.0.6/node_modules/isomorphic-rslog/dist/node/index.cjs":
/*!******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/isomorphic-rslog@0.0.6/node_modules/isomorphic-rslog/dist/node/index.cjs ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/node/index.ts\nvar node_exports = {};\n__export(node_exports, {\n  createLogger: () => createLogger2,\n  logger: () => logger\n});\nmodule.exports = __toCommonJS(node_exports);\n\n// src/constants.ts\nvar LOG_LEVEL = {\n  error: 0,\n  warn: 1,\n  info: 2,\n  log: 3,\n  verbose: 4\n};\n\n// src/utils.ts\nvar errorStackRegExp = /at\\s.*:\\d+:\\d+[\\s\\)]*$/;\nvar anonymousErrorStackRegExp = /at\\s.*\\(<anonymous>\\)$/;\nvar isErrorStackMessage = (message) => errorStackRegExp.test(message) || anonymousErrorStackRegExp.test(message);\n\n// src/createLogger.ts\nvar createLogger = (options = {}, { getLabel: getLabel2, handleError, finalLog: finalLog2, greet, LOG_TYPES: LOG_TYPES2 }) => {\n  let maxLevel = options.level || \"log\";\n  let customLabels = options.labels || {};\n  let log = (type, message, ...args) => {\n    if (LOG_LEVEL[LOG_TYPES2[type].level] > LOG_LEVEL[maxLevel]) {\n      return;\n    }\n    if (message === void 0 || message === null) {\n      return console.log();\n    }\n    let logType = LOG_TYPES2[type];\n    let text = \"\";\n    const label = getLabel2(type, logType, customLabels);\n    if (message instanceof Error) {\n      if (message.stack) {\n        let [name, ...rest] = message.stack.split(\"\\n\");\n        if (name.startsWith(\"Error: \")) {\n          name = name.slice(7);\n        }\n        text = `${name}\n${handleError(rest.join(\"\\n\"))}`;\n      } else {\n        text = message.message;\n      }\n    } else if (logType.level === \"error\" && typeof message === \"string\") {\n      let lines = message.split(\"\\n\");\n      text = lines.map((line) => isErrorStackMessage(line) ? handleError(line) : line).join(\"\\n\");\n    } else {\n      text = `${message}`;\n    }\n    finalLog2(label, text, args, message);\n  };\n  let logger2 = {\n    // greet\n    greet: (message) => log(\"log\", greet(message))\n  };\n  Object.keys(LOG_TYPES2).forEach((key) => {\n    logger2[key] = (...args) => log(key, ...args);\n  });\n  Object.defineProperty(logger2, \"level\", {\n    get: () => maxLevel,\n    set(val) {\n      maxLevel = val;\n    }\n  });\n  Object.defineProperty(logger2, \"labels\", {\n    get: () => customLabels,\n    set(val) {\n      customLabels = val;\n    }\n  });\n  logger2.override = (customLogger) => {\n    Object.assign(logger2, customLogger);\n  };\n  return logger2;\n};\n\n// node_modules/.pnpm/supports-color@9.4.0/node_modules/supports-color/index.js\nvar import_node_process = __toESM(__webpack_require__(/*! process */ \"process\"));\nvar import_node_os = __toESM(__webpack_require__(/*! os */ \"os\"));\nvar import_node_tty = __toESM(__webpack_require__(/*! tty */ \"tty\"));\nfunction hasFlag(flag, argv = globalThis.Deno ? globalThis.Deno.args : import_node_process.default.argv) {\n  const prefix = flag.startsWith(\"-\") ? \"\" : flag.length === 1 ? \"-\" : \"--\";\n  const position = argv.indexOf(prefix + flag);\n  const terminatorPosition = argv.indexOf(\"--\");\n  return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n}\nvar { env } = import_node_process.default;\nvar flagForceColor;\nif (hasFlag(\"no-color\") || hasFlag(\"no-colors\") || hasFlag(\"color=false\") || hasFlag(\"color=never\")) {\n  flagForceColor = 0;\n} else if (hasFlag(\"color\") || hasFlag(\"colors\") || hasFlag(\"color=true\") || hasFlag(\"color=always\")) {\n  flagForceColor = 1;\n}\nfunction envForceColor() {\n  if (\"FORCE_COLOR\" in env) {\n    if (env.FORCE_COLOR === \"true\") {\n      return 1;\n    }\n    if (env.FORCE_COLOR === \"false\") {\n      return 0;\n    }\n    return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);\n  }\n}\nfunction translateLevel(level) {\n  if (level === 0) {\n    return false;\n  }\n  return {\n    level,\n    hasBasic: true,\n    has256: level >= 2,\n    has16m: level >= 3\n  };\n}\nfunction _supportsColor(haveStream, { streamIsTTY, sniffFlags = true } = {}) {\n  const noFlagForceColor = envForceColor();\n  if (noFlagForceColor !== void 0) {\n    flagForceColor = noFlagForceColor;\n  }\n  const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;\n  if (forceColor === 0) {\n    return 0;\n  }\n  if (sniffFlags) {\n    if (hasFlag(\"color=16m\") || hasFlag(\"color=full\") || hasFlag(\"color=truecolor\")) {\n      return 3;\n    }\n    if (hasFlag(\"color=256\")) {\n      return 2;\n    }\n  }\n  if (\"TF_BUILD\" in env && \"AGENT_NAME\" in env) {\n    return 1;\n  }\n  if (haveStream && !streamIsTTY && forceColor === void 0) {\n    return 0;\n  }\n  const min = forceColor || 0;\n  if (env.TERM === \"dumb\") {\n    return min;\n  }\n  if (import_node_process.default.platform === \"win32\") {\n    const osRelease = import_node_os.default.release().split(\".\");\n    if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {\n      return Number(osRelease[2]) >= 14931 ? 3 : 2;\n    }\n    return 1;\n  }\n  if (\"CI\" in env) {\n    if (\"GITHUB_ACTIONS\" in env || \"GITEA_ACTIONS\" in env) {\n      return 3;\n    }\n    if ([\"TRAVIS\", \"CIRCLECI\", \"APPVEYOR\", \"GITLAB_CI\", \"BUILDKITE\", \"DRONE\"].some((sign) => sign in env) || env.CI_NAME === \"codeship\") {\n      return 1;\n    }\n    return min;\n  }\n  if (\"TEAMCITY_VERSION\" in env) {\n    return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n  }\n  if (env.COLORTERM === \"truecolor\") {\n    return 3;\n  }\n  if (env.TERM === \"xterm-kitty\") {\n    return 3;\n  }\n  if (\"TERM_PROGRAM\" in env) {\n    const version = Number.parseInt((env.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n    switch (env.TERM_PROGRAM) {\n      case \"iTerm.app\": {\n        return version >= 3 ? 3 : 2;\n      }\n      case \"Apple_Terminal\": {\n        return 2;\n      }\n    }\n  }\n  if (/-256(color)?$/i.test(env.TERM)) {\n    return 2;\n  }\n  if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n    return 1;\n  }\n  if (\"COLORTERM\" in env) {\n    return 1;\n  }\n  return min;\n}\nfunction createSupportsColor(stream, options = {}) {\n  const level = _supportsColor(stream, {\n    streamIsTTY: stream && stream.isTTY,\n    ...options\n  });\n  return translateLevel(level);\n}\nvar supportsColor = {\n  stdout: createSupportsColor({ isTTY: import_node_tty.default.isatty(1) }),\n  stderr: createSupportsColor({ isTTY: import_node_tty.default.isatty(2) })\n};\nvar supports_color_default = supportsColor;\n\n// src/node/utils.ts\nvar colorLevel = supports_color_default.stdout ? supports_color_default.stdout.level : 0;\nfunction getLabel(type, logType, labels) {\n  let label = \"\";\n  if (\"label\" in logType) {\n    label = (labels[type] || logType.label || \"\").padEnd(7);\n    label = bold(logType.color ? logType.color(label)[0] : label)[0];\n  }\n  return [label];\n}\nfunction finalLog(label, text, args, message) {\n  const labelStr = label[0];\n  if (text && Array.isArray(message) && !(message instanceof Error)) {\n    console.log(`${labelStr} ${message[0]}`);\n  } else {\n    console.log(labelStr.length ? `${labelStr} ${text}` : text, ...args);\n  }\n}\n\n// src/node/color.ts\nvar formatter = (open, close, replace = open) => colorLevel >= 2 ? (input) => {\n  let string = \"\" + input;\n  let index = string.indexOf(close, open.length);\n  return ~index ? [open + replaceClose(string, close, replace, index) + close] : [open + string + close];\n} : (input) => {\n  return [String(input)];\n};\nvar replaceClose = (string, close, replace, index) => {\n  let start = string.substring(0, index) + replace;\n  let end = string.substring(index + close.length);\n  let nextIndex = end.indexOf(close);\n  return ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end;\n};\nvar bold = formatter(\"\\x1B[1m\", \"\\x1B[22m\", \"\\x1B[22m\\x1B[1m\");\nvar red = formatter(\"\\x1B[31m\", \"\\x1B[39m\");\nvar green = formatter(\"\\x1B[32m\", \"\\x1B[39m\");\nvar yellow = formatter(\"\\x1B[33m\", \"\\x1B[39m\");\nvar magenta = formatter(\"\\x1B[35m\", \"\\x1B[39m\");\nvar cyan = formatter(\"\\x1B[36m\", \"\\x1B[39m\");\nvar gray = formatter(\"\\x1B[90m\", \"\\x1B[39m\");\n\n// src/node/gradient.ts\nvar startColor = [189, 255, 243];\nvar endColor = [74, 194, 154];\nvar isWord = (char) => !/[\\s\\n]/.test(char);\nvar gradient = (message) => {\n  if (colorLevel < 3) {\n    return colorLevel === 2 ? bold(cyan(message)[0]) : [message];\n  }\n  let chars = [...message];\n  let steps = chars.filter(isWord).length;\n  let r = startColor[0];\n  let g = startColor[1];\n  let b = startColor[2];\n  let rStep = (endColor[0] - r) / steps;\n  let gStep = (endColor[1] - g) / steps;\n  let bStep = (endColor[2] - b) / steps;\n  let output = \"\";\n  for (let char of chars) {\n    if (isWord(char)) {\n      r += rStep;\n      g += gStep;\n      b += bStep;\n    }\n    output += `\\x1B[38;2;${Math.round(r)};${Math.round(g)};${Math.round(\n      b\n    )}m${char}\\x1B[39m`;\n  }\n  return bold(output);\n};\n\n// src/node/constants.ts\nvar LOG_TYPES = {\n  // Level error\n  error: {\n    label: \"error\",\n    level: \"error\",\n    color: red\n  },\n  // Level warn\n  warn: {\n    label: \"warn\",\n    level: \"warn\",\n    color: yellow\n  },\n  // Level info\n  info: {\n    label: \"info\",\n    level: \"info\",\n    color: cyan\n  },\n  start: {\n    label: \"start\",\n    level: \"info\",\n    color: cyan\n  },\n  ready: {\n    label: \"ready\",\n    level: \"info\",\n    color: green\n  },\n  success: {\n    label: \"success\",\n    level: \"info\",\n    color: green\n  },\n  // Level log\n  log: {\n    level: \"log\"\n  },\n  // Level debug\n  debug: {\n    label: \"debug\",\n    level: \"verbose\",\n    color: magenta\n  }\n};\n\n// src/node/createLogger.ts\nfunction createLogger2(options = {}) {\n  return createLogger(options, {\n    handleError: (msg) => {\n      const res = gray(msg);\n      return Array.isArray(res) ? `${res[0]}` : `${res}`;\n    },\n    getLabel,\n    gradient,\n    finalLog,\n    LOG_TYPES,\n    greet: (msg) => {\n      return gradient(msg)[0];\n    }\n  });\n}\n\n// src/node/index.ts\nvar logger = createLogger2();\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/isomorphic-rslog@0.0.6/node_modules/isomorphic-rslog/dist/node/index.cjs\n");

/***/ }),

/***/ "../node_modules/.pnpm/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4/node_modules/@module-federation/nextjs-mf/dist/src/plugins/container/runtimePlugin.js?runtimePlugin":
/*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4/node_modules/@module-federation/nextjs-mf/dist/src/plugins/container/runtimePlugin.js?runtimePlugin ***!
  \**********************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = default_1;\nfunction default_1() {\n    return {\n        name: 'next-internal-plugin',\n        createScript: function (args) {\n            const url = args.url;\n            const attrs = args.attrs;\n            if (typeof window !== 'undefined') {\n                const script = document.createElement('script');\n                script.src = url;\n                script.async = true;\n                delete attrs?.['crossorigin'];\n                return { script: script, timeout: 8000 };\n            }\n            return undefined;\n        },\n        errorLoadRemote: function (args) {\n            const id = args.id;\n            const error = args.error;\n            const from = args.from;\n            //@ts-ignore\n            globalThis.moduleGraphDirty = true;\n            console.error(id, 'offline');\n            const pg = function () {\n                console.error(id, 'offline', error);\n                return null;\n            };\n            pg.getInitialProps = function (ctx) {\n                return {};\n            };\n            let mod;\n            if (from === 'build') {\n                mod = function () {\n                    return {\n                        __esModule: true,\n                        default: pg,\n                        getServerSideProps: function () {\n                            return { props: {} };\n                        },\n                    };\n                };\n            }\n            else {\n                mod = {\n                    default: pg,\n                    getServerSideProps: function () {\n                        return { props: {} };\n                    },\n                };\n            }\n            return mod;\n        },\n        beforeInit: function (args) {\n            if (!globalThis.usedChunks)\n                globalThis.usedChunks = new Set();\n            if (typeof __webpack_require__.j === 'string' &&\n                !__webpack_require__.j.startsWith('webpack')) {\n                return args;\n            }\n            const moduleCache = args.origin.moduleCache;\n            const name = args.origin.name;\n            let gs;\n            try {\n                gs = new Function('return globalThis')();\n            }\n            catch (e) {\n                gs = globalThis; // fallback for browsers without 'unsafe-eval' CSP policy enabled\n            }\n            //@ts-ignore\n            const attachedRemote = gs[name];\n            if (attachedRemote) {\n                moduleCache.set(name, attachedRemote);\n            }\n            return args;\n        },\n        init: function (args) {\n            return args;\n        },\n        beforeRequest: function (args) {\n            const options = args.options;\n            const id = args.id;\n            const remoteName = id.split('/').shift();\n            const remote = options.remotes.find(function (remote) {\n                return remote.name === remoteName;\n            });\n            if (!remote)\n                return args;\n            if (remote && remote.entry && remote.entry.includes('?t=')) {\n                return args;\n            }\n            remote.entry = remote.entry + '?t=' + Date.now();\n            return args;\n        },\n        afterResolve: function (args) {\n            return args;\n        },\n        onLoad: function (args) {\n            const exposeModuleFactory = args.exposeModuleFactory;\n            const exposeModule = args.exposeModule;\n            const id = args.id;\n            const moduleOrFactory = exposeModuleFactory || exposeModule;\n            if (!moduleOrFactory)\n                return args;\n            if (typeof window === 'undefined') {\n                let exposedModuleExports;\n                try {\n                    exposedModuleExports = moduleOrFactory();\n                }\n                catch (e) {\n                    exposedModuleExports = moduleOrFactory;\n                }\n                const handler = {\n                    get: function (target, prop, receiver) {\n                        if (target === exposedModuleExports &&\n                            typeof exposedModuleExports[prop] === 'function') {\n                            return function () {\n                                globalThis.usedChunks.add(id);\n                                //eslint-disable-next-line\n                                return exposedModuleExports[prop].apply(this, arguments);\n                            };\n                        }\n                        const originalMethod = target[prop];\n                        if (typeof originalMethod === 'function') {\n                            const proxiedFunction = function () {\n                                globalThis.usedChunks.add(id);\n                                //eslint-disable-next-line\n                                return originalMethod.apply(this, arguments);\n                            };\n                            Object.keys(originalMethod).forEach(function (prop) {\n                                Object.defineProperty(proxiedFunction, prop, {\n                                    value: originalMethod[prop],\n                                    writable: true,\n                                    enumerable: true,\n                                    configurable: true,\n                                });\n                            });\n                            return proxiedFunction;\n                        }\n                        return Reflect.get(target, prop, receiver);\n                    },\n                };\n                if (typeof exposedModuleExports === 'function') {\n                    exposedModuleExports = new Proxy(exposedModuleExports, handler);\n                    const staticProps = Object.getOwnPropertyNames(exposedModuleExports);\n                    staticProps.forEach(function (prop) {\n                        if (typeof exposedModuleExports[prop] === 'function') {\n                            exposedModuleExports[prop] = new Proxy(exposedModuleExports[prop], handler);\n                        }\n                    });\n                    return function () {\n                        return exposedModuleExports;\n                    };\n                }\n                else {\n                    exposedModuleExports = new Proxy(exposedModuleExports, handler);\n                }\n                return exposedModuleExports;\n            }\n            return args;\n        },\n        resolveShare: function (args) {\n            if (args.pkgName !== 'react' &&\n                args.pkgName !== 'react-dom' &&\n                !args.pkgName.startsWith('next/')) {\n                return args;\n            }\n            const shareScopeMap = args.shareScopeMap;\n            const scope = args.scope;\n            const pkgName = args.pkgName;\n            const version = args.version;\n            const GlobalFederation = args.GlobalFederation;\n            const host = GlobalFederation['__INSTANCES__'][0];\n            if (!host) {\n                return args;\n            }\n            if (!host.options.shared[pkgName]) {\n                return args;\n            }\n            args.resolver = function () {\n                shareScopeMap[scope][pkgName][version] =\n                    host.options.shared[pkgName][0];\n                return shareScopeMap[scope][pkgName][version];\n            };\n            return args;\n        },\n        beforeLoadShare: async function (args) {\n            return args;\n        },\n    };\n}\n//# sourceMappingURL=runtimePlugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4/node_modules/@module-federation/nextjs-mf/dist/src/plugins/container/runtimePlugin.js?runtimePlugin\n");

/***/ }),

/***/ "../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/runtimePlugin.js?runtimePlugin":
/*!***********************************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/runtimePlugin.js?runtimePlugin ***!
  \***********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = default_1;\nfunction importNodeModule(name) {\n    if (!name) {\n        throw new Error('import specifier is required');\n    }\n    const importModule = new Function('name', `return import(name)`);\n    return importModule(name)\n        .then((res) => res.default)\n        .catch((error) => {\n        console.error(`Error importing module ${name}:`, error);\n        throw error;\n    });\n}\nfunction default_1() {\n    return {\n        name: 'node-federation-plugin',\n        beforeInit(args) {\n            // Patch webpack chunk loading handlers\n            (() => {\n                const resolveFile = (rootOutputDir, chunkId) => {\n                    const path = require('path');\n                    return path.join(__dirname, rootOutputDir + __webpack_require__.u(chunkId));\n                };\n                const resolveUrl = (remoteName, chunkName) => {\n                    try {\n                        return new URL(chunkName, __webpack_require__.p);\n                    }\n                    catch {\n                        const entryUrl = returnFromCache(remoteName) ||\n                            returnFromGlobalInstances(remoteName);\n                        if (!entryUrl)\n                            return null;\n                        const url = new URL(entryUrl);\n                        const path = require('path');\n                        url.pathname = url.pathname.replace(path.basename(url.pathname), chunkName);\n                        return url;\n                    }\n                };\n                const returnFromCache = (remoteName) => {\n                    const globalThisVal = new Function('return globalThis')();\n                    const federationInstances = globalThisVal['__FEDERATION__']['__INSTANCES__'];\n                    for (const instance of federationInstances) {\n                        const moduleContainer = instance.moduleCache.get(remoteName);\n                        if (moduleContainer?.remoteInfo)\n                            return moduleContainer.remoteInfo.entry;\n                    }\n                    return null;\n                };\n                const returnFromGlobalInstances = (remoteName) => {\n                    const globalThisVal = new Function('return globalThis')();\n                    const federationInstances = globalThisVal['__FEDERATION__']['__INSTANCES__'];\n                    for (const instance of federationInstances) {\n                        for (const remote of instance.options.remotes) {\n                            if (remote.name === remoteName || remote.alias === remoteName) {\n                                console.log('Backup remote entry found:', remote.entry);\n                                return remote.entry;\n                            }\n                        }\n                    }\n                    return null;\n                };\n                const loadFromFs = (filename, callback) => {\n                    const fs = require('fs');\n                    const path = require('path');\n                    const vm = require('vm');\n                    if (fs.existsSync(filename)) {\n                        fs.readFile(filename, 'utf-8', (err, content) => {\n                            if (err)\n                                return callback(err, null);\n                            const chunk = {};\n                            try {\n                                const script = new vm.Script(`(function(exports, require, __dirname, __filename) {${content}\\n})`, {\n                                    filename,\n                                    importModuleDynamically: \n                                    //@ts-ignore\n                                    vm.constants?.USE_MAIN_CONTEXT_DEFAULT_LOADER ??\n                                        importNodeModule,\n                                });\n                                script.runInThisContext()(chunk, require, path.dirname(filename), filename);\n                                callback(null, chunk);\n                            }\n                            catch (e) {\n                                console.log(\"'runInThisContext threw'\", e);\n                                callback(e, null);\n                            }\n                        });\n                    }\n                    else {\n                        callback(new Error(`File ${filename} does not exist`), null);\n                    }\n                };\n                const fetchAndRun = (url, chunkName, callback) => {\n                    (typeof fetch === 'undefined'\n                        ? importNodeModule('node-fetch').then((mod) => mod.default)\n                        : Promise.resolve(fetch))\n                        .then((fetchFunction) => {\n                        return args.origin.loaderHook.lifecycle.fetch\n                            .emit(url.href, {})\n                            .then((res) => {\n                            if (!res || !(res instanceof Response)) {\n                                return fetchFunction(url.href).then((response) => response.text());\n                            }\n                            return res.text();\n                        });\n                    })\n                        .then((data) => {\n                        const chunk = {};\n                        try {\n                            eval(`(function(exports, require, __dirname, __filename) {${data}\\n})`)(chunk, require, url.pathname.split('/').slice(0, -1).join('/'), chunkName);\n                            callback(null, chunk);\n                        }\n                        catch (e) {\n                            callback(e, null);\n                        }\n                    })\n                        .catch((err) => callback(err, null));\n                };\n                const loadChunk = (strategy, chunkId, rootOutputDir, callback) => {\n                    if (strategy === 'filesystem') {\n                        return loadFromFs(resolveFile(rootOutputDir, chunkId), callback);\n                    }\n                    const url = resolveUrl(rootOutputDir, chunkId);\n                    if (!url)\n                        return callback(null, { modules: {}, ids: [], runtime: null });\n                    fetchAndRun(url, chunkId, callback);\n                };\n                const installedChunks = {};\n                const installChunk = (chunk) => {\n                    for (const moduleId in chunk.modules) {\n                        __webpack_require__.m[moduleId] = chunk.modules[moduleId];\n                    }\n                    if (chunk.runtime)\n                        chunk.runtime(__webpack_require__);\n                    for (const chunkId of chunk.ids) {\n                        if (installedChunks[chunkId])\n                            installedChunks[chunkId][0]();\n                        installedChunks[chunkId] = 0;\n                    }\n                };\n                __webpack_require__.l = (url, done, key, chunkId) => {\n                    if (!key || chunkId)\n                        throw new Error(`__webpack_require__.l name is required for ${url}`);\n                    __webpack_require__.federation.runtime\n                        .loadScriptNode(url, { attrs: { globalName: key } })\n                        .then((res) => {\n                        const enhancedRemote = __webpack_require__.federation.instance.initRawContainer(key, url, res);\n                        new Function('return globalThis')()[key] = enhancedRemote;\n                        done(enhancedRemote);\n                    })\n                        .catch(done);\n                };\n                if (__webpack_require__.f) {\n                    const handle = (chunkId, promises) => {\n                        let installedChunkData = installedChunks[chunkId];\n                        if (installedChunkData !== 0) {\n                            if (installedChunkData) {\n                                promises.push(installedChunkData[2]);\n                            }\n                            else {\n                                const matcher = __webpack_require__.federation.chunkMatcher\n                                    ? __webpack_require__.federation.chunkMatcher(chunkId)\n                                    : true;\n                                if (matcher) {\n                                    const promise = new Promise((resolve, reject) => {\n                                        installedChunkData = installedChunks[chunkId] = [\n                                            resolve,\n                                            reject,\n                                        ];\n                                        const fs = typeof process !== 'undefined'\n                                            ? require('fs')\n                                            : false;\n                                        const filename = typeof process !== 'undefined'\n                                            ? resolveFile(__webpack_require__.federation.rootOutputDir || '', chunkId)\n                                            : false;\n                                        if (fs && fs.existsSync(filename)) {\n                                            loadChunk('filesystem', chunkId, __webpack_require__.federation.rootOutputDir || '', (err, chunk) => {\n                                                if (err)\n                                                    return reject(err);\n                                                if (chunk)\n                                                    installChunk(chunk);\n                                                resolve(chunk);\n                                            });\n                                        }\n                                        else {\n                                            const chunkName = __webpack_require__.u(chunkId);\n                                            const loadingStrategy = typeof process === 'undefined'\n                                                ? 'http-eval'\n                                                : 'http-vm';\n                                            loadChunk(loadingStrategy, chunkName, __webpack_require__.federation.initOptions.name, (err, chunk) => {\n                                                if (err)\n                                                    return reject(err);\n                                                if (chunk)\n                                                    installChunk(chunk);\n                                                resolve(chunk);\n                                            });\n                                        }\n                                    });\n                                    promises.push((installedChunkData[2] = promise));\n                                }\n                                else {\n                                    installedChunks[chunkId] = 0;\n                                }\n                            }\n                        }\n                    };\n                    if (__webpack_require__.f.require) {\n                        console.warn('\\x1b[33m%s\\x1b[0m', 'CAUTION: build target is not set to \"async-node\", attempting to patch additional chunk handlers. This may not work');\n                        __webpack_require__.f.require = handle;\n                    }\n                    if (__webpack_require__.f.readFileVm) {\n                        __webpack_require__.f.readFileVm = handle;\n                    }\n                }\n            })();\n            return args;\n        },\n    };\n}\n//# sourceMappingURL=runtimePlugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+node@2.6.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__react-_w4xmf7avjwoqx2vntsbjo4qlo4/node_modules/@module-federation/node/dist/src/runtimePlugin.js?runtimePlugin\n");

/***/ }),

/***/ "../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/index.esm.mjs":
/*!*************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/index.esm.mjs ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FederationHost: () => (/* binding */ FederationHost),\n/* harmony export */   Module: () => (/* binding */ Module),\n/* harmony export */   getInstance: () => (/* binding */ getInstance),\n/* harmony export */   getRemoteEntry: () => (/* binding */ getRemoteEntry),\n/* harmony export */   getRemoteInfo: () => (/* binding */ getRemoteInfo),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   loadRemote: () => (/* binding */ loadRemote),\n/* harmony export */   loadScript: () => (/* reexport safe */ _module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.loadScript),\n/* harmony export */   loadScriptNode: () => (/* reexport safe */ _module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.loadScriptNode),\n/* harmony export */   loadShare: () => (/* binding */ loadShare),\n/* harmony export */   loadShareSync: () => (/* binding */ loadShareSync),\n/* harmony export */   preloadRemote: () => (/* binding */ preloadRemote),\n/* harmony export */   registerGlobalPlugins: () => (/* reexport safe */ _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.m),\n/* harmony export */   registerPlugins: () => (/* binding */ registerPlugins),\n/* harmony export */   registerRemotes: () => (/* binding */ registerRemotes)\n/* harmony export */ });\n/* harmony import */ var _polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfills.esm.mjs */ \"../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/polyfills.esm.mjs\");\n/* harmony import */ var _module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @module-federation/sdk */ \"../node_modules/.pnpm/@module-federation+sdk@0.7.3/node_modules/@module-federation/sdk/dist/index.esm.mjs\");\n/* harmony import */ var _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./share.esm.mjs */ \"../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/share.esm.mjs\");\n/* harmony import */ var _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @module-federation/error-codes */ \"../node_modules/.pnpm/@module-federation+error-codes@0.7.3/node_modules/@module-federation/error-codes/dist/index.esm.mjs\");\n\n\n\n\n\n\n\n// Function to match a remote with its name and expose\n// id: pkgName(@federation/app1) + expose(button) = @federation/app1/button\n// id: alias(app1) + expose(button) = app1/button\n// id: alias(app1/utils) + expose(loadash/sort) = app1/utils/loadash/sort\nfunction matchRemoteWithNameAndExpose(remotes, id) {\n    for (const remote of remotes){\n        // match pkgName\n        const isNameMatched = id.startsWith(remote.name);\n        let expose = id.replace(remote.name, '');\n        if (isNameMatched) {\n            if (expose.startsWith('/')) {\n                const pkgNameOrAlias = remote.name;\n                expose = `.${expose}`;\n                return {\n                    pkgNameOrAlias,\n                    expose,\n                    remote\n                };\n            } else if (expose === '') {\n                return {\n                    pkgNameOrAlias: remote.name,\n                    expose: '.',\n                    remote\n                };\n            }\n        }\n        // match alias\n        const isAliasMatched = remote.alias && id.startsWith(remote.alias);\n        let exposeWithAlias = remote.alias && id.replace(remote.alias, '');\n        if (remote.alias && isAliasMatched) {\n            if (exposeWithAlias && exposeWithAlias.startsWith('/')) {\n                const pkgNameOrAlias = remote.alias;\n                exposeWithAlias = `.${exposeWithAlias}`;\n                return {\n                    pkgNameOrAlias,\n                    expose: exposeWithAlias,\n                    remote\n                };\n            } else if (exposeWithAlias === '') {\n                return {\n                    pkgNameOrAlias: remote.alias,\n                    expose: '.',\n                    remote\n                };\n            }\n        }\n    }\n    return;\n}\n// Function to match a remote with its name or alias\nfunction matchRemote(remotes, nameOrAlias) {\n    for (const remote of remotes){\n        const isNameMatched = nameOrAlias === remote.name;\n        if (isNameMatched) {\n            return remote;\n        }\n        const isAliasMatched = remote.alias && nameOrAlias === remote.alias;\n        if (isAliasMatched) {\n            return remote;\n        }\n    }\n    return;\n}\n\nfunction registerPlugins$1(plugins, hookInstances) {\n    const globalPlugins = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.o)();\n    // Incorporate global plugins\n    if (globalPlugins.length > 0) {\n        globalPlugins.forEach((plugin)=>{\n            if (plugins == null ? void 0 : plugins.find((item)=>item.name !== plugin.name)) {\n                plugins.push(plugin);\n            }\n        });\n    }\n    if (plugins && plugins.length > 0) {\n        plugins.forEach((plugin)=>{\n            hookInstances.forEach((hookInstance)=>{\n                hookInstance.applyPlugin(plugin);\n            });\n        });\n    }\n    return plugins;\n}\n\nasync function loadEsmEntry({ entry, remoteEntryExports }) {\n    return new Promise((resolve, reject)=>{\n        try {\n            if (!remoteEntryExports) {\n                import(/* webpackIgnore: true */ entry).then(resolve).catch(reject);\n            } else {\n                resolve(remoteEntryExports);\n            }\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\nasync function loadSystemJsEntry({ entry, remoteEntryExports }) {\n    return new Promise((resolve, reject)=>{\n        try {\n            if (!remoteEntryExports) {\n                //@ts-ignore\n                if (false) {} else {\n                    new Function('callbacks', `System.import(\"${entry}\").then(callbacks[0]).catch(callbacks[1])`)([\n                        resolve,\n                        reject\n                    ]);\n                }\n            } else {\n                resolve(remoteEntryExports);\n            }\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\nasync function loadEntryScript({ name, globalName, entry, loaderHook }) {\n    const { entryExports: remoteEntryExports } = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.l)(name, globalName);\n    if (remoteEntryExports) {\n        return remoteEntryExports;\n    }\n    return (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.loadScript)(entry, {\n        attrs: {},\n        createScriptHook: (url, attrs)=>{\n            const res = loaderHook.lifecycle.createScript.emit({\n                url,\n                attrs\n            });\n            if (!res) return;\n            if (res instanceof HTMLScriptElement) {\n                return res;\n            }\n            if ('script' in res || 'timeout' in res) {\n                return res;\n            }\n            return;\n        }\n    }).then(()=>{\n        const { remoteEntryKey, entryExports } = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.l)(name, globalName);\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(entryExports, (0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.RUNTIME_001, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.runtimeDescMap, {\n            remoteName: name,\n            remoteEntryUrl: entry,\n            remoteEntryKey\n        }));\n        return entryExports;\n    }).catch((e)=>{\n        throw e;\n    });\n}\nasync function loadEntryDom({ remoteInfo, remoteEntryExports, loaderHook }) {\n    const { entry, entryGlobalName: globalName, name, type } = remoteInfo;\n    switch(type){\n        case 'esm':\n        case 'module':\n            return loadEsmEntry({\n                entry,\n                remoteEntryExports\n            });\n        case 'system':\n            return loadSystemJsEntry({\n                entry,\n                remoteEntryExports\n            });\n        default:\n            return loadEntryScript({\n                entry,\n                globalName,\n                name,\n                loaderHook\n            });\n    }\n}\nasync function loadEntryNode({ remoteInfo, loaderHook }) {\n    const { entry, entryGlobalName: globalName, name, type } = remoteInfo;\n    const { entryExports: remoteEntryExports } = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.l)(name, globalName);\n    if (remoteEntryExports) {\n        return remoteEntryExports;\n    }\n    return (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.loadScriptNode)(entry, {\n        attrs: {\n            name,\n            globalName,\n            type\n        },\n        loaderHook: {\n            createScriptHook: (url, attrs = {})=>{\n                const res = loaderHook.lifecycle.createScript.emit({\n                    url,\n                    attrs\n                });\n                if (!res) return;\n                if ('url' in res) {\n                    return res;\n                }\n                return;\n            }\n        }\n    }).then(()=>{\n        const { remoteEntryKey, entryExports } = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.l)(name, globalName);\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(entryExports, (0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.RUNTIME_001, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.runtimeDescMap, {\n            remoteName: name,\n            remoteEntryUrl: entry,\n            remoteEntryKey\n        }));\n        return entryExports;\n    }).catch((e)=>{\n        throw e;\n    });\n}\nfunction getRemoteEntryUniqueKey(remoteInfo) {\n    const { entry, name } = remoteInfo;\n    return (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.composeKeyWithSeparator)(name, entry);\n}\nasync function getRemoteEntry({ origin, remoteEntryExports, remoteInfo }) {\n    const uniqueKey = getRemoteEntryUniqueKey(remoteInfo);\n    if (remoteEntryExports) {\n        return remoteEntryExports;\n    }\n    if (!_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.t[uniqueKey]) {\n        const loadEntryHook = origin.remoteHandler.hooks.lifecycle.loadEntry;\n        origin.loaderHook.lifecycle.createScript;\n        const loaderHook = origin.loaderHook;\n        _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.t[uniqueKey] = loadEntryHook.emit({\n            loaderHook,\n            remoteInfo,\n            remoteEntryExports\n        }).then((res)=>{\n            if (res) {\n                return res;\n            }\n            return (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)() ? loadEntryDom({\n                remoteInfo,\n                remoteEntryExports,\n                loaderHook\n            }) : loadEntryNode({\n                remoteInfo,\n                loaderHook\n            });\n        });\n    }\n    return _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.t[uniqueKey];\n}\nfunction getRemoteInfo(remote) {\n    return (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({}, remote, {\n        entry: 'entry' in remote ? remote.entry : '',\n        type: remote.type || _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.D,\n        entryGlobalName: remote.entryGlobalName || remote.name,\n        shareScope: remote.shareScope || _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.u\n    });\n}\n\nlet Module = class Module {\n    async getEntry() {\n        if (this.remoteEntryExports) {\n            return this.remoteEntryExports;\n        }\n        // Get remoteEntry.js\n        const remoteEntryExports = await getRemoteEntry({\n            origin: this.host,\n            remoteInfo: this.remoteInfo,\n            remoteEntryExports: this.remoteEntryExports\n        });\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(remoteEntryExports, `remoteEntryExports is undefined \\n ${(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.safeToString)(this.remoteInfo)}`);\n        this.remoteEntryExports = remoteEntryExports;\n        return this.remoteEntryExports;\n    }\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    async get(id, expose, options, remoteSnapshot) {\n        const { loadFactory = true } = options || {\n            loadFactory: true\n        };\n        // Get remoteEntry.js\n        const remoteEntryExports = await this.getEntry();\n        if (!this.inited) {\n            const localShareScopeMap = this.host.shareScopeMap;\n            const remoteShareScope = this.remoteInfo.shareScope || 'default';\n            if (!localShareScopeMap[remoteShareScope]) {\n                localShareScopeMap[remoteShareScope] = {};\n            }\n            const shareScope = localShareScopeMap[remoteShareScope];\n            const initScope = [];\n            const remoteEntryInitOptions = {\n                version: this.remoteInfo.version || ''\n            };\n            // Help to find host instance\n            Object.defineProperty(remoteEntryInitOptions, 'shareScopeMap', {\n                value: localShareScopeMap,\n                // remoteEntryInitOptions will be traversed and assigned during container init, ,so this attribute is not allowed to be traversed\n                enumerable: false\n            });\n            const initContainerOptions = await this.host.hooks.lifecycle.beforeInitContainer.emit({\n                shareScope,\n                // @ts-ignore shareScopeMap will be set by Object.defineProperty\n                remoteEntryInitOptions,\n                initScope,\n                remoteInfo: this.remoteInfo,\n                origin: this.host\n            });\n            if (typeof (remoteEntryExports == null ? void 0 : remoteEntryExports.init) === 'undefined') {\n                (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.w)((0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.RUNTIME_002, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.runtimeDescMap, {\n                    remoteName: name,\n                    remoteEntryUrl: this.remoteInfo.entry,\n                    remoteEntryKey: this.remoteInfo.entryGlobalName\n                }));\n            }\n            await remoteEntryExports.init(initContainerOptions.shareScope, initContainerOptions.initScope, initContainerOptions.remoteEntryInitOptions);\n            await this.host.hooks.lifecycle.initContainer.emit((0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({}, initContainerOptions, {\n                id,\n                remoteSnapshot,\n                remoteEntryExports\n            }));\n        }\n        this.lib = remoteEntryExports;\n        this.inited = true;\n        let moduleFactory;\n        moduleFactory = await this.host.loaderHook.lifecycle.getModuleFactory.emit({\n            remoteEntryExports,\n            expose,\n            moduleInfo: this.remoteInfo\n        });\n        // get exposeGetter\n        if (!moduleFactory) {\n            moduleFactory = await remoteEntryExports.get(expose);\n        }\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(moduleFactory, `${(0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.x)(this.remoteInfo)} remote don't export ${expose}.`);\n        const wrapModuleFactory = this.wraperFactory(moduleFactory, id);\n        if (!loadFactory) {\n            return wrapModuleFactory;\n        }\n        const exposeContent = await wrapModuleFactory();\n        return exposeContent;\n    }\n    wraperFactory(moduleFactory, id) {\n        function defineModuleId(res, id) {\n            if (res && typeof res === 'object' && Object.isExtensible(res) && !Object.getOwnPropertyDescriptor(res, Symbol.for('mf_module_id'))) {\n                Object.defineProperty(res, Symbol.for('mf_module_id'), {\n                    value: id,\n                    enumerable: false\n                });\n            }\n        }\n        if (moduleFactory instanceof Promise) {\n            return async ()=>{\n                const res = await moduleFactory();\n                // This parameter is used for bridge debugging\n                defineModuleId(res, id);\n                return res;\n            };\n        } else {\n            return ()=>{\n                const res = moduleFactory();\n                // This parameter is used for bridge debugging\n                defineModuleId(res, id);\n                return res;\n            };\n        }\n    }\n    constructor({ remoteInfo, host }){\n        this.inited = false;\n        this.lib = undefined;\n        this.remoteInfo = remoteInfo;\n        this.host = host;\n    }\n};\n\nclass SyncHook {\n    on(fn) {\n        if (typeof fn === 'function') {\n            this.listeners.add(fn);\n        }\n    }\n    once(fn) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        this.on(function wrapper(...args) {\n            self.remove(wrapper);\n            // eslint-disable-next-line prefer-spread\n            return fn.apply(null, args);\n        });\n    }\n    emit(...data) {\n        let result;\n        if (this.listeners.size > 0) {\n            // eslint-disable-next-line prefer-spread\n            this.listeners.forEach((fn)=>{\n                result = fn(...data);\n            });\n        }\n        return result;\n    }\n    remove(fn) {\n        this.listeners.delete(fn);\n    }\n    removeAll() {\n        this.listeners.clear();\n    }\n    constructor(type){\n        this.type = '';\n        this.listeners = new Set();\n        if (type) {\n            this.type = type;\n        }\n    }\n}\n\nclass AsyncHook extends SyncHook {\n    emit(...data) {\n        let result;\n        const ls = Array.from(this.listeners);\n        if (ls.length > 0) {\n            let i = 0;\n            const call = (prev)=>{\n                if (prev === false) {\n                    return false; // Abort process\n                } else if (i < ls.length) {\n                    return Promise.resolve(ls[i++].apply(null, data)).then(call);\n                } else {\n                    return prev;\n                }\n            };\n            result = call();\n        }\n        return Promise.resolve(result);\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction checkReturnData(originalData, returnedData) {\n    if (!(0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.y)(returnedData)) {\n        return false;\n    }\n    if (originalData !== returnedData) {\n        // eslint-disable-next-line no-restricted-syntax\n        for(const key in originalData){\n            if (!(key in returnedData)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nclass SyncWaterfallHook extends SyncHook {\n    emit(data) {\n        if (!(0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.y)(data)) {\n            (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.w)(`The data for the \"${this.type}\" hook should be an object.`);\n        }\n        for (const fn of this.listeners){\n            try {\n                const tempData = fn(data);\n                if (checkReturnData(data, tempData)) {\n                    data = tempData;\n                } else {\n                    this.onerror(`A plugin returned an unacceptable value for the \"${this.type}\" type.`);\n                    break;\n                }\n            } catch (e) {\n                (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.z)(e);\n                this.onerror(e);\n            }\n        }\n        return data;\n    }\n    constructor(type){\n        super(), this.onerror = _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.w;\n        this.type = type;\n    }\n}\n\nclass AsyncWaterfallHook extends SyncHook {\n    emit(data) {\n        if (!(0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.y)(data)) {\n            (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.w)(`The response data for the \"${this.type}\" hook must be an object.`);\n        }\n        const ls = Array.from(this.listeners);\n        if (ls.length > 0) {\n            let i = 0;\n            const processError = (e)=>{\n                (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.z)(e);\n                this.onerror(e);\n                return data;\n            };\n            const call = (prevData)=>{\n                if (checkReturnData(data, prevData)) {\n                    data = prevData;\n                    if (i < ls.length) {\n                        try {\n                            return Promise.resolve(ls[i++](data)).then(call, processError);\n                        } catch (e) {\n                            return processError(e);\n                        }\n                    }\n                } else {\n                    this.onerror(`A plugin returned an incorrect value for the \"${this.type}\" type.`);\n                }\n                return data;\n            };\n            return Promise.resolve(call(data));\n        }\n        return Promise.resolve(data);\n    }\n    constructor(type){\n        super(), this.onerror = _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.w;\n        this.type = type;\n    }\n}\n\nclass PluginSystem {\n    applyPlugin(plugin) {\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)((0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.A)(plugin), 'Plugin configuration is invalid.');\n        // The plugin's name is mandatory and must be unique\n        const pluginName = plugin.name;\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(pluginName, 'A name must be provided by the plugin.');\n        if (!this.registerPlugins[pluginName]) {\n            this.registerPlugins[pluginName] = plugin;\n            Object.keys(this.lifecycle).forEach((key)=>{\n                const pluginLife = plugin[key];\n                if (pluginLife) {\n                    this.lifecycle[key].on(pluginLife);\n                }\n            });\n        }\n    }\n    removePlugin(pluginName) {\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(pluginName, 'A name is required.');\n        const plugin = this.registerPlugins[pluginName];\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(plugin, `The plugin \"${pluginName}\" is not registered.`);\n        Object.keys(plugin).forEach((key)=>{\n            if (key !== 'name') {\n                this.lifecycle[key].remove(plugin[key]);\n            }\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    inherit({ lifecycle, registerPlugins }) {\n        Object.keys(lifecycle).forEach((hookName)=>{\n            (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(!this.lifecycle[hookName], `The hook \"${hookName}\" has a conflict and cannot be inherited.`);\n            this.lifecycle[hookName] = lifecycle[hookName];\n        });\n        Object.keys(registerPlugins).forEach((pluginName)=>{\n            (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(!this.registerPlugins[pluginName], `The plugin \"${pluginName}\" has a conflict and cannot be inherited.`);\n            this.applyPlugin(registerPlugins[pluginName]);\n        });\n    }\n    constructor(lifecycle){\n        this.registerPlugins = {};\n        this.lifecycle = lifecycle;\n        this.lifecycleKeys = Object.keys(lifecycle);\n    }\n}\n\nfunction defaultPreloadArgs(preloadConfig) {\n    return (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({\n        resourceCategory: 'sync',\n        share: true,\n        depsRemote: true,\n        prefetchInterface: false\n    }, preloadConfig);\n}\nfunction formatPreloadArgs(remotes, preloadArgs) {\n    return preloadArgs.map((args)=>{\n        const remoteInfo = matchRemote(remotes, args.nameOrAlias);\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(remoteInfo, `Unable to preload ${args.nameOrAlias} as it is not included in ${!remoteInfo && (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.safeToString)({\n            remoteInfo,\n            remotes\n        })}`);\n        return {\n            remote: remoteInfo,\n            preloadConfig: defaultPreloadArgs(args)\n        };\n    });\n}\nfunction normalizePreloadExposes(exposes) {\n    if (!exposes) {\n        return [];\n    }\n    return exposes.map((expose)=>{\n        if (expose === '.') {\n            return expose;\n        }\n        if (expose.startsWith('./')) {\n            return expose.replace('./', '');\n        }\n        return expose;\n    });\n}\nfunction preloadAssets(remoteInfo, host, assets, // It is used to distinguish preload from load remote parallel loading\nuseLinkPreload = true) {\n    const { cssAssets, jsAssetsWithoutEntry, entryAssets } = assets;\n    if (host.options.inBrowser) {\n        entryAssets.forEach((asset)=>{\n            const { moduleInfo } = asset;\n            const module = host.moduleCache.get(remoteInfo.name);\n            if (module) {\n                getRemoteEntry({\n                    origin: host,\n                    remoteInfo: moduleInfo,\n                    remoteEntryExports: module.remoteEntryExports\n                });\n            } else {\n                getRemoteEntry({\n                    origin: host,\n                    remoteInfo: moduleInfo,\n                    remoteEntryExports: undefined\n                });\n            }\n        });\n        if (useLinkPreload) {\n            const defaultAttrs = {\n                rel: 'preload',\n                as: 'style'\n            };\n            cssAssets.forEach((cssUrl)=>{\n                const { link: cssEl, needAttach } = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createLink)({\n                    url: cssUrl,\n                    cb: ()=>{\n                    // noop\n                    },\n                    attrs: defaultAttrs,\n                    createLinkHook: (url, attrs)=>{\n                        const res = host.loaderHook.lifecycle.createLink.emit({\n                            url,\n                            attrs\n                        });\n                        if (res instanceof HTMLLinkElement) {\n                            return res;\n                        }\n                        return;\n                    }\n                });\n                needAttach && document.head.appendChild(cssEl);\n            });\n        } else {\n            const defaultAttrs = {\n                rel: 'stylesheet',\n                type: 'text/css'\n            };\n            cssAssets.forEach((cssUrl)=>{\n                const { link: cssEl, needAttach } = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createLink)({\n                    url: cssUrl,\n                    cb: ()=>{\n                    // noop\n                    },\n                    attrs: defaultAttrs,\n                    createLinkHook: (url, attrs)=>{\n                        const res = host.loaderHook.lifecycle.createLink.emit({\n                            url,\n                            attrs\n                        });\n                        if (res instanceof HTMLLinkElement) {\n                            return res;\n                        }\n                        return;\n                    },\n                    needDeleteLink: false\n                });\n                needAttach && document.head.appendChild(cssEl);\n            });\n        }\n        if (useLinkPreload) {\n            const defaultAttrs = {\n                rel: 'preload',\n                as: 'script'\n            };\n            jsAssetsWithoutEntry.forEach((jsUrl)=>{\n                const { link: linkEl, needAttach } = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createLink)({\n                    url: jsUrl,\n                    cb: ()=>{\n                    // noop\n                    },\n                    attrs: defaultAttrs,\n                    createLinkHook: (url, attrs)=>{\n                        const res = host.loaderHook.lifecycle.createLink.emit({\n                            url,\n                            attrs\n                        });\n                        if (res instanceof HTMLLinkElement) {\n                            return res;\n                        }\n                        return;\n                    }\n                });\n                needAttach && document.head.appendChild(linkEl);\n            });\n        } else {\n            const defaultAttrs = {\n                fetchpriority: 'high',\n                type: (remoteInfo == null ? void 0 : remoteInfo.type) === 'module' ? 'module' : 'text/javascript'\n            };\n            jsAssetsWithoutEntry.forEach((jsUrl)=>{\n                const { script: scriptEl, needAttach } = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createScript)({\n                    url: jsUrl,\n                    cb: ()=>{\n                    // noop\n                    },\n                    attrs: defaultAttrs,\n                    createScriptHook: (url, attrs)=>{\n                        const res = host.loaderHook.lifecycle.createScript.emit({\n                            url,\n                            attrs\n                        });\n                        if (res instanceof HTMLScriptElement) {\n                            return res;\n                        }\n                        return;\n                    },\n                    needDeleteScript: true\n                });\n                needAttach && document.head.appendChild(scriptEl);\n            });\n        }\n    }\n}\n\nfunction assignRemoteInfo(remoteInfo, remoteSnapshot) {\n    const remoteEntryInfo = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.E)(remoteSnapshot);\n    if (!remoteEntryInfo.url) {\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.w)(`The attribute remoteEntry of ${remoteInfo.name} must not be undefined.`);\n    }\n    let entryUrl = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.getResourceUrl)(remoteSnapshot, remoteEntryInfo.url);\n    if (!(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)() && !entryUrl.startsWith('http')) {\n        entryUrl = `https:${entryUrl}`;\n    }\n    remoteInfo.type = remoteEntryInfo.type;\n    remoteInfo.entryGlobalName = remoteEntryInfo.globalName;\n    remoteInfo.entry = entryUrl;\n    remoteInfo.version = remoteSnapshot.version;\n    remoteInfo.buildVersion = remoteSnapshot.buildVersion;\n}\nfunction snapshotPlugin() {\n    return {\n        name: 'snapshot-plugin',\n        async afterResolve (args) {\n            const { remote, pkgNameOrAlias, expose, origin, remoteInfo } = args;\n            if (!(0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.B)(remote) || !(0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.C)(remote)) {\n                const { remoteSnapshot, globalSnapshot } = await origin.snapshotHandler.loadRemoteSnapshotInfo(remote);\n                assignRemoteInfo(remoteInfo, remoteSnapshot);\n                // preloading assets\n                const preloadOptions = {\n                    remote,\n                    preloadConfig: {\n                        nameOrAlias: pkgNameOrAlias,\n                        exposes: [\n                            expose\n                        ],\n                        resourceCategory: 'sync',\n                        share: false,\n                        depsRemote: false\n                    }\n                };\n                const assets = await origin.remoteHandler.hooks.lifecycle.generatePreloadAssets.emit({\n                    origin,\n                    preloadOptions,\n                    remoteInfo,\n                    remote,\n                    remoteSnapshot,\n                    globalSnapshot\n                });\n                if (assets) {\n                    preloadAssets(remoteInfo, origin, assets, false);\n                }\n                return (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({}, args, {\n                    remoteSnapshot\n                });\n            }\n            return args;\n        }\n    };\n}\n\n// name\n// name:version\nfunction splitId(id) {\n    const splitInfo = id.split(':');\n    if (splitInfo.length === 1) {\n        return {\n            name: splitInfo[0],\n            version: undefined\n        };\n    } else if (splitInfo.length === 2) {\n        return {\n            name: splitInfo[0],\n            version: splitInfo[1]\n        };\n    } else {\n        return {\n            name: splitInfo[1],\n            version: splitInfo[2]\n        };\n    }\n}\n// Traverse all nodes in moduleInfo and traverse the entire snapshot\nfunction traverseModuleInfo(globalSnapshot, remoteInfo, traverse, isRoot, memo = {}, remoteSnapshot) {\n    const id = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.x)(remoteInfo);\n    const { value: snapshotValue } = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(globalSnapshot, id);\n    const effectiveRemoteSnapshot = remoteSnapshot || snapshotValue;\n    if (effectiveRemoteSnapshot && !(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isManifestProvider)(effectiveRemoteSnapshot)) {\n        traverse(effectiveRemoteSnapshot, remoteInfo, isRoot);\n        if (effectiveRemoteSnapshot.remotesInfo) {\n            const remoteKeys = Object.keys(effectiveRemoteSnapshot.remotesInfo);\n            for (const key of remoteKeys){\n                if (memo[key]) {\n                    continue;\n                }\n                memo[key] = true;\n                const subRemoteInfo = splitId(key);\n                const remoteValue = effectiveRemoteSnapshot.remotesInfo[key];\n                traverseModuleInfo(globalSnapshot, {\n                    name: subRemoteInfo.name,\n                    version: remoteValue.matchedVersion\n                }, traverse, false, memo, undefined);\n            }\n        }\n    }\n}\n// eslint-disable-next-line max-lines-per-function\nfunction generatePreloadAssets(origin, preloadOptions, remote, globalSnapshot, remoteSnapshot) {\n    const cssAssets = [];\n    const jsAssets = [];\n    const entryAssets = [];\n    const loadedSharedJsAssets = new Set();\n    const loadedSharedCssAssets = new Set();\n    const { options } = origin;\n    const { preloadConfig: rootPreloadConfig } = preloadOptions;\n    const { depsRemote } = rootPreloadConfig;\n    const memo = {};\n    traverseModuleInfo(globalSnapshot, remote, (moduleInfoSnapshot, remoteInfo, isRoot)=>{\n        let preloadConfig;\n        if (isRoot) {\n            preloadConfig = rootPreloadConfig;\n        } else {\n            if (Array.isArray(depsRemote)) {\n                // eslint-disable-next-line array-callback-return\n                const findPreloadConfig = depsRemote.find((remoteConfig)=>{\n                    if (remoteConfig.nameOrAlias === remoteInfo.name || remoteConfig.nameOrAlias === remoteInfo.alias) {\n                        return true;\n                    }\n                    return false;\n                });\n                if (!findPreloadConfig) {\n                    return;\n                }\n                preloadConfig = defaultPreloadArgs(findPreloadConfig);\n            } else if (depsRemote === true) {\n                preloadConfig = rootPreloadConfig;\n            } else {\n                return;\n            }\n        }\n        const remoteEntryUrl = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.getResourceUrl)(moduleInfoSnapshot, (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.E)(moduleInfoSnapshot).url);\n        if (remoteEntryUrl) {\n            entryAssets.push({\n                name: remoteInfo.name,\n                moduleInfo: {\n                    name: remoteInfo.name,\n                    entry: remoteEntryUrl,\n                    type: 'remoteEntryType' in moduleInfoSnapshot ? moduleInfoSnapshot.remoteEntryType : 'global',\n                    entryGlobalName: 'globalName' in moduleInfoSnapshot ? moduleInfoSnapshot.globalName : remoteInfo.name,\n                    shareScope: '',\n                    version: 'version' in moduleInfoSnapshot ? moduleInfoSnapshot.version : undefined\n                },\n                url: remoteEntryUrl\n            });\n        }\n        let moduleAssetsInfo = 'modules' in moduleInfoSnapshot ? moduleInfoSnapshot.modules : [];\n        const normalizedPreloadExposes = normalizePreloadExposes(preloadConfig.exposes);\n        if (normalizedPreloadExposes.length && 'modules' in moduleInfoSnapshot) {\n            var _moduleInfoSnapshot_modules;\n            moduleAssetsInfo = moduleInfoSnapshot == null ? void 0 : (_moduleInfoSnapshot_modules = moduleInfoSnapshot.modules) == null ? void 0 : _moduleInfoSnapshot_modules.reduce((assets, moduleAssetInfo)=>{\n                if ((normalizedPreloadExposes == null ? void 0 : normalizedPreloadExposes.indexOf(moduleAssetInfo.moduleName)) !== -1) {\n                    assets.push(moduleAssetInfo);\n                }\n                return assets;\n            }, []);\n        }\n        function handleAssets(assets) {\n            const assetsRes = assets.map((asset)=>(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.getResourceUrl)(moduleInfoSnapshot, asset));\n            if (preloadConfig.filter) {\n                return assetsRes.filter(preloadConfig.filter);\n            }\n            return assetsRes;\n        }\n        if (moduleAssetsInfo) {\n            const assetsLength = moduleAssetsInfo.length;\n            for(let index = 0; index < assetsLength; index++){\n                const assetsInfo = moduleAssetsInfo[index];\n                const exposeFullPath = `${remoteInfo.name}/${assetsInfo.moduleName}`;\n                origin.remoteHandler.hooks.lifecycle.handlePreloadModule.emit({\n                    id: assetsInfo.moduleName === '.' ? remoteInfo.name : exposeFullPath,\n                    name: remoteInfo.name,\n                    remoteSnapshot: moduleInfoSnapshot,\n                    preloadConfig,\n                    remote: remoteInfo,\n                    origin\n                });\n                const preloaded = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.p)(exposeFullPath);\n                if (preloaded) {\n                    continue;\n                }\n                if (preloadConfig.resourceCategory === 'all') {\n                    cssAssets.push(...handleAssets(assetsInfo.assets.css.async));\n                    cssAssets.push(...handleAssets(assetsInfo.assets.css.sync));\n                    jsAssets.push(...handleAssets(assetsInfo.assets.js.async));\n                    jsAssets.push(...handleAssets(assetsInfo.assets.js.sync));\n                // eslint-disable-next-line no-constant-condition\n                } else if (preloadConfig.resourceCategory = 'sync') {\n                    cssAssets.push(...handleAssets(assetsInfo.assets.css.sync));\n                    jsAssets.push(...handleAssets(assetsInfo.assets.js.sync));\n                }\n                (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.q)(exposeFullPath);\n            }\n        }\n    }, true, memo, remoteSnapshot);\n    if (remoteSnapshot.shared) {\n        const collectSharedAssets = (shareInfo, snapshotShared)=>{\n            const registeredShared = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(origin.shareScopeMap, snapshotShared.sharedName, shareInfo, origin.sharedHandler.hooks.lifecycle.resolveShare);\n            // If the global share does not exist, or the lib function does not exist, it means that the shared has not been loaded yet and can be preloaded.\n            if (registeredShared && typeof registeredShared.lib === 'function') {\n                snapshotShared.assets.js.sync.forEach((asset)=>{\n                    loadedSharedJsAssets.add(asset);\n                });\n                snapshotShared.assets.css.sync.forEach((asset)=>{\n                    loadedSharedCssAssets.add(asset);\n                });\n            }\n        };\n        remoteSnapshot.shared.forEach((shared)=>{\n            var _options_shared;\n            const shareInfos = (_options_shared = options.shared) == null ? void 0 : _options_shared[shared.sharedName];\n            if (!shareInfos) {\n                return;\n            }\n            // if no version, preload all shared\n            const sharedOptions = shared.version ? shareInfos.find((s)=>s.version === shared.version) : shareInfos;\n            if (!sharedOptions) {\n                return;\n            }\n            const arrayShareInfo = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.F)(sharedOptions);\n            arrayShareInfo.forEach((s)=>{\n                collectSharedAssets(s, shared);\n            });\n        });\n    }\n    const needPreloadJsAssets = jsAssets.filter((asset)=>!loadedSharedJsAssets.has(asset));\n    const needPreloadCssAssets = cssAssets.filter((asset)=>!loadedSharedCssAssets.has(asset));\n    return {\n        cssAssets: needPreloadCssAssets,\n        jsAssetsWithoutEntry: needPreloadJsAssets,\n        entryAssets\n    };\n}\nconst generatePreloadAssetsPlugin = function() {\n    return {\n        name: 'generate-preload-assets-plugin',\n        async generatePreloadAssets (args) {\n            const { origin, preloadOptions, remoteInfo, remote, globalSnapshot, remoteSnapshot } = args;\n            if ((0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.B)(remote) && (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.C)(remote)) {\n                return {\n                    cssAssets: [],\n                    jsAssetsWithoutEntry: [],\n                    entryAssets: [\n                        {\n                            name: remote.name,\n                            url: remote.entry,\n                            moduleInfo: {\n                                name: remoteInfo.name,\n                                entry: remote.entry,\n                                type: remoteInfo.type || 'global',\n                                entryGlobalName: '',\n                                shareScope: ''\n                            }\n                        }\n                    ]\n                };\n            }\n            assignRemoteInfo(remoteInfo, remoteSnapshot);\n            const assets = generatePreloadAssets(origin, preloadOptions, remoteInfo, globalSnapshot, remoteSnapshot);\n            return assets;\n        }\n    };\n};\n\nfunction getGlobalRemoteInfo(moduleInfo, origin) {\n    const hostGlobalSnapshot = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.i)({\n        name: origin.options.name,\n        version: origin.options.version\n    });\n    // get remote detail info from global\n    const globalRemoteInfo = hostGlobalSnapshot && 'remotesInfo' in hostGlobalSnapshot && hostGlobalSnapshot.remotesInfo && (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(hostGlobalSnapshot.remotesInfo, moduleInfo.name).value;\n    if (globalRemoteInfo && globalRemoteInfo.matchedVersion) {\n        return {\n            hostGlobalSnapshot,\n            globalSnapshot: (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(),\n            remoteSnapshot: (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.i)({\n                name: moduleInfo.name,\n                version: globalRemoteInfo.matchedVersion\n            })\n        };\n    }\n    return {\n        hostGlobalSnapshot: undefined,\n        globalSnapshot: (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(),\n        remoteSnapshot: (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.i)({\n            name: moduleInfo.name,\n            version: 'version' in moduleInfo ? moduleInfo.version : undefined\n        })\n    };\n}\nclass SnapshotHandler {\n    async loadSnapshot(moduleInfo) {\n        const { options } = this.HostInstance;\n        const { hostGlobalSnapshot, remoteSnapshot, globalSnapshot } = this.getGlobalRemoteInfo(moduleInfo);\n        const { remoteSnapshot: globalRemoteSnapshot, globalSnapshot: globalSnapshotRes } = await this.hooks.lifecycle.loadSnapshot.emit({\n            options,\n            moduleInfo,\n            hostGlobalSnapshot,\n            remoteSnapshot,\n            globalSnapshot\n        });\n        return {\n            remoteSnapshot: globalRemoteSnapshot,\n            globalSnapshot: globalSnapshotRes\n        };\n    }\n    // eslint-disable-next-line max-lines-per-function\n    async loadRemoteSnapshotInfo(moduleInfo) {\n        const { options } = this.HostInstance;\n        await this.hooks.lifecycle.beforeLoadRemoteSnapshot.emit({\n            options,\n            moduleInfo\n        });\n        let hostSnapshot = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.i)({\n            name: this.HostInstance.options.name,\n            version: this.HostInstance.options.version\n        });\n        if (!hostSnapshot) {\n            hostSnapshot = {\n                version: this.HostInstance.options.version || '',\n                remoteEntry: '',\n                remotesInfo: {}\n            };\n            (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.k)({\n                [this.HostInstance.options.name]: hostSnapshot\n            });\n        }\n        // In dynamic loadRemote scenarios, incomplete remotesInfo delivery may occur. In such cases, the remotesInfo in the host needs to be completed in the snapshot at runtime.\n        // This ensures the snapshot's integrity and helps the chrome plugin correctly identify all producer modules, ensuring that proxyable producer modules will not be missing.\n        if (hostSnapshot && 'remotesInfo' in hostSnapshot && !(0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(hostSnapshot.remotesInfo, moduleInfo.name).value) {\n            if ('version' in moduleInfo || 'entry' in moduleInfo) {\n                hostSnapshot.remotesInfo = (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({}, hostSnapshot == null ? void 0 : hostSnapshot.remotesInfo, {\n                    [moduleInfo.name]: {\n                        matchedVersion: 'version' in moduleInfo ? moduleInfo.version : moduleInfo.entry\n                    }\n                });\n            }\n        }\n        const { hostGlobalSnapshot, remoteSnapshot, globalSnapshot } = this.getGlobalRemoteInfo(moduleInfo);\n        const { remoteSnapshot: globalRemoteSnapshot, globalSnapshot: globalSnapshotRes } = await this.hooks.lifecycle.loadSnapshot.emit({\n            options,\n            moduleInfo,\n            hostGlobalSnapshot,\n            remoteSnapshot,\n            globalSnapshot\n        });\n        // global snapshot includes manifest or module info includes manifest\n        if (globalRemoteSnapshot) {\n            if ((0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isManifestProvider)(globalRemoteSnapshot)) {\n                const remoteEntry = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)() ? globalRemoteSnapshot.remoteEntry : globalRemoteSnapshot.ssrRemoteEntry || globalRemoteSnapshot.remoteEntry || '';\n                const moduleSnapshot = await this.getManifestJson(remoteEntry, moduleInfo, {});\n                // eslint-disable-next-line @typescript-eslint/no-shadow\n                const globalSnapshotRes = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.j)((0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({}, moduleInfo, {\n                    // The global remote may be overridden\n                    // Therefore, set the snapshot key to the global address of the actual request\n                    entry: remoteEntry\n                }), moduleSnapshot);\n                return {\n                    remoteSnapshot: moduleSnapshot,\n                    globalSnapshot: globalSnapshotRes\n                };\n            } else {\n                const { remoteSnapshot: remoteSnapshotRes } = await this.hooks.lifecycle.loadRemoteSnapshot.emit({\n                    options: this.HostInstance.options,\n                    moduleInfo,\n                    remoteSnapshot: globalRemoteSnapshot,\n                    from: 'global'\n                });\n                return {\n                    remoteSnapshot: remoteSnapshotRes,\n                    globalSnapshot: globalSnapshotRes\n                };\n            }\n        } else {\n            if ((0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.B)(moduleInfo)) {\n                // get from manifest.json and merge remote info from remote server\n                const moduleSnapshot = await this.getManifestJson(moduleInfo.entry, moduleInfo, {});\n                // eslint-disable-next-line @typescript-eslint/no-shadow\n                const globalSnapshotRes = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.j)(moduleInfo, moduleSnapshot);\n                const { remoteSnapshot: remoteSnapshotRes } = await this.hooks.lifecycle.loadRemoteSnapshot.emit({\n                    options: this.HostInstance.options,\n                    moduleInfo,\n                    remoteSnapshot: moduleSnapshot,\n                    from: 'global'\n                });\n                return {\n                    remoteSnapshot: remoteSnapshotRes,\n                    globalSnapshot: globalSnapshotRes\n                };\n            } else {\n                (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.w)((0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.RUNTIME_007, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.runtimeDescMap, {\n                    hostName: moduleInfo.name,\n                    hostVersion: moduleInfo.version,\n                    globalSnapshot: JSON.stringify(globalSnapshotRes)\n                }));\n            }\n        }\n    }\n    getGlobalRemoteInfo(moduleInfo) {\n        return getGlobalRemoteInfo(moduleInfo, this.HostInstance);\n    }\n    async getManifestJson(manifestUrl, moduleInfo, extraOptions) {\n        const getManifest = async ()=>{\n            let manifestJson = this.manifestCache.get(manifestUrl);\n            if (manifestJson) {\n                return manifestJson;\n            }\n            try {\n                let res = await this.loaderHook.lifecycle.fetch.emit(manifestUrl, {});\n                if (!res || !(res instanceof Response)) {\n                    res = await fetch(manifestUrl, {});\n                }\n                manifestJson = await res.json();\n                (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(manifestJson.metaData && manifestJson.exposes && manifestJson.shared, `${manifestUrl} is not a federation manifest`);\n                this.manifestCache.set(manifestUrl, manifestJson);\n                return manifestJson;\n            } catch (err) {\n                delete this.manifestLoading[manifestUrl];\n                (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.w)((0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.RUNTIME_003, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.runtimeDescMap, {\n                    manifestUrl,\n                    moduleName: moduleInfo.name\n                }, `${err}`));\n            }\n        };\n        const asyncLoadProcess = async ()=>{\n            const manifestJson = await getManifest();\n            const remoteSnapshot = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.generateSnapshotFromManifest)(manifestJson, {\n                version: manifestUrl\n            });\n            const { remoteSnapshot: remoteSnapshotRes } = await this.hooks.lifecycle.loadRemoteSnapshot.emit({\n                options: this.HostInstance.options,\n                moduleInfo,\n                manifestJson,\n                remoteSnapshot,\n                manifestUrl,\n                from: 'manifest'\n            });\n            return remoteSnapshotRes;\n        };\n        if (!this.manifestLoading[manifestUrl]) {\n            this.manifestLoading[manifestUrl] = asyncLoadProcess().then((res)=>res);\n        }\n        return this.manifestLoading[manifestUrl];\n    }\n    constructor(HostInstance){\n        this.loadingHostSnapshot = null;\n        this.manifestCache = new Map();\n        this.hooks = new PluginSystem({\n            beforeLoadRemoteSnapshot: new AsyncHook('beforeLoadRemoteSnapshot'),\n            loadSnapshot: new AsyncWaterfallHook('loadGlobalSnapshot'),\n            loadRemoteSnapshot: new AsyncWaterfallHook('loadRemoteSnapshot')\n        });\n        this.manifestLoading = _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.G.__FEDERATION__.__MANIFEST_LOADING__;\n        this.HostInstance = HostInstance;\n        this.loaderHook = HostInstance.loaderHook;\n    }\n}\n\nclass SharedHandler {\n    // register shared in shareScopeMap\n    registerShared(globalOptions, userOptions) {\n        const { shareInfos, shared } = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.H)(globalOptions, userOptions);\n        const sharedKeys = Object.keys(shareInfos);\n        sharedKeys.forEach((sharedKey)=>{\n            const sharedVals = shareInfos[sharedKey];\n            sharedVals.forEach((sharedVal)=>{\n                const registeredShared = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(this.shareScopeMap, sharedKey, sharedVal, this.hooks.lifecycle.resolveShare);\n                if (!registeredShared && sharedVal && sharedVal.lib) {\n                    this.setShared({\n                        pkgName: sharedKey,\n                        lib: sharedVal.lib,\n                        get: sharedVal.get,\n                        loaded: true,\n                        shared: sharedVal,\n                        from: userOptions.name\n                    });\n                }\n            });\n        });\n        return {\n            shareInfos,\n            shared\n        };\n    }\n    async loadShare(pkgName, extraOptions) {\n        const { host } = this;\n        // This function performs the following steps:\n        // 1. Checks if the currently loaded share already exists, if not, it throws an error\n        // 2. Searches globally for a matching share, if found, it uses it directly\n        // 3. If not found, it retrieves it from the current share and stores the obtained share globally.\n        const shareInfo = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.I)({\n            pkgName,\n            extraOptions,\n            shareInfos: host.options.shared\n        });\n        if (shareInfo == null ? void 0 : shareInfo.scope) {\n            await Promise.all(shareInfo.scope.map(async (shareScope)=>{\n                await Promise.all(this.initializeSharing(shareScope, {\n                    strategy: shareInfo.strategy\n                }));\n                return;\n            }));\n        }\n        const loadShareRes = await this.hooks.lifecycle.beforeLoadShare.emit({\n            pkgName,\n            shareInfo,\n            shared: host.options.shared,\n            origin: host\n        });\n        const { shareInfo: shareInfoRes } = loadShareRes;\n        // Assert that shareInfoRes exists, if not, throw an error\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(shareInfoRes, `Cannot find ${pkgName} Share in the ${host.options.name}. Please ensure that the ${pkgName} Share parameters have been injected`);\n        // Retrieve from cache\n        const registeredShared = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(this.shareScopeMap, pkgName, shareInfoRes, this.hooks.lifecycle.resolveShare);\n        const addUseIn = (shared)=>{\n            if (!shared.useIn) {\n                shared.useIn = [];\n            }\n            (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.J)(shared.useIn, host.options.name);\n        };\n        if (registeredShared && registeredShared.lib) {\n            addUseIn(registeredShared);\n            return registeredShared.lib;\n        } else if (registeredShared && registeredShared.loading && !registeredShared.loaded) {\n            const factory = await registeredShared.loading;\n            registeredShared.loaded = true;\n            if (!registeredShared.lib) {\n                registeredShared.lib = factory;\n            }\n            addUseIn(registeredShared);\n            return factory;\n        } else if (registeredShared) {\n            const asyncLoadProcess = async ()=>{\n                const factory = await registeredShared.get();\n                shareInfoRes.lib = factory;\n                shareInfoRes.loaded = true;\n                addUseIn(shareInfoRes);\n                const gShared = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(this.shareScopeMap, pkgName, shareInfoRes, this.hooks.lifecycle.resolveShare);\n                if (gShared) {\n                    gShared.lib = factory;\n                    gShared.loaded = true;\n                }\n                return factory;\n            };\n            const loading = asyncLoadProcess();\n            this.setShared({\n                pkgName,\n                loaded: false,\n                shared: registeredShared,\n                from: host.options.name,\n                lib: null,\n                loading\n            });\n            return loading;\n        } else {\n            if (extraOptions == null ? void 0 : extraOptions.customShareInfo) {\n                return false;\n            }\n            const asyncLoadProcess = async ()=>{\n                const factory = await shareInfoRes.get();\n                shareInfoRes.lib = factory;\n                shareInfoRes.loaded = true;\n                addUseIn(shareInfoRes);\n                const gShared = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(this.shareScopeMap, pkgName, shareInfoRes, this.hooks.lifecycle.resolveShare);\n                if (gShared) {\n                    gShared.lib = factory;\n                    gShared.loaded = true;\n                }\n                return factory;\n            };\n            const loading = asyncLoadProcess();\n            this.setShared({\n                pkgName,\n                loaded: false,\n                shared: shareInfoRes,\n                from: host.options.name,\n                lib: null,\n                loading\n            });\n            return loading;\n        }\n    }\n    /**\n   * This function initializes the sharing sequence (executed only once per share scope).\n   * It accepts one argument, the name of the share scope.\n   * If the share scope does not exist, it creates one.\n   */ // eslint-disable-next-line @typescript-eslint/member-ordering\n    initializeSharing(shareScopeName = _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.u, extraOptions) {\n        const { host } = this;\n        const from = extraOptions == null ? void 0 : extraOptions.from;\n        const strategy = extraOptions == null ? void 0 : extraOptions.strategy;\n        let initScope = extraOptions == null ? void 0 : extraOptions.initScope;\n        const promises = [];\n        if (from !== 'build') {\n            const { initTokens } = this;\n            if (!initScope) initScope = [];\n            let initToken = initTokens[shareScopeName];\n            if (!initToken) initToken = initTokens[shareScopeName] = {\n                from: this.host.name\n            };\n            if (initScope.indexOf(initToken) >= 0) return promises;\n            initScope.push(initToken);\n        }\n        const shareScope = this.shareScopeMap;\n        const hostName = host.options.name;\n        // Creates a new share scope if necessary\n        if (!shareScope[shareScopeName]) {\n            shareScope[shareScopeName] = {};\n        }\n        // Executes all initialization snippets from all accessible modules\n        const scope = shareScope[shareScopeName];\n        const register = (name, shared)=>{\n            var _activeVersion_shareConfig;\n            const { version, eager } = shared;\n            scope[name] = scope[name] || {};\n            const versions = scope[name];\n            const activeVersion = versions[version];\n            const activeVersionEager = Boolean(activeVersion && (activeVersion.eager || ((_activeVersion_shareConfig = activeVersion.shareConfig) == null ? void 0 : _activeVersion_shareConfig.eager)));\n            if (!activeVersion || activeVersion.strategy !== 'loaded-first' && !activeVersion.loaded && (Boolean(!eager) !== !activeVersionEager ? eager : hostName > activeVersion.from)) {\n                versions[version] = shared;\n            }\n        };\n        const initFn = (mod)=>mod && mod.init && mod.init(shareScope[shareScopeName], initScope);\n        const initRemoteModule = async (key)=>{\n            const { module } = await host.remoteHandler.getRemoteModuleAndOptions({\n                id: key\n            });\n            if (module.getEntry) {\n                let remoteEntryExports;\n                try {\n                    remoteEntryExports = await module.getEntry();\n                } catch (error) {\n                    remoteEntryExports = await host.remoteHandler.hooks.lifecycle.errorLoadRemote.emit({\n                        id: key,\n                        error,\n                        from: 'runtime',\n                        lifecycle: 'beforeLoadShare',\n                        origin: host\n                    });\n                }\n                if (!module.inited) {\n                    await initFn(remoteEntryExports);\n                    module.inited = true;\n                }\n            }\n        };\n        Object.keys(host.options.shared).forEach((shareName)=>{\n            const sharedArr = host.options.shared[shareName];\n            sharedArr.forEach((shared)=>{\n                if (shared.scope.includes(shareScopeName)) {\n                    register(shareName, shared);\n                }\n            });\n        });\n        // TODO: strategy==='version-first' need to be removed in the future\n        if (host.options.shareStrategy === 'version-first' || strategy === 'version-first') {\n            host.options.remotes.forEach((remote)=>{\n                if (remote.shareScope === shareScopeName) {\n                    promises.push(initRemoteModule(remote.name));\n                }\n            });\n        }\n        return promises;\n    }\n    // The lib function will only be available if the shared set by eager or runtime init is set or the shared is successfully loaded.\n    // 1. If the loaded shared already exists globally, then it will be reused\n    // 2. If lib exists in local shared, it will be used directly\n    // 3. If the local get returns something other than Promise, then it will be used directly\n    loadShareSync(pkgName, extraOptions) {\n        const { host } = this;\n        const shareInfo = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.I)({\n            pkgName,\n            extraOptions,\n            shareInfos: host.options.shared\n        });\n        if (shareInfo == null ? void 0 : shareInfo.scope) {\n            shareInfo.scope.forEach((shareScope)=>{\n                this.initializeSharing(shareScope, {\n                    strategy: shareInfo.strategy\n                });\n            });\n        }\n        const registeredShared = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(this.shareScopeMap, pkgName, shareInfo, this.hooks.lifecycle.resolveShare);\n        const addUseIn = (shared)=>{\n            if (!shared.useIn) {\n                shared.useIn = [];\n            }\n            (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.J)(shared.useIn, host.options.name);\n        };\n        if (registeredShared) {\n            if (typeof registeredShared.lib === 'function') {\n                addUseIn(registeredShared);\n                if (!registeredShared.loaded) {\n                    registeredShared.loaded = true;\n                    if (registeredShared.from === host.options.name) {\n                        shareInfo.loaded = true;\n                    }\n                }\n                return registeredShared.lib;\n            }\n            if (typeof registeredShared.get === 'function') {\n                const module = registeredShared.get();\n                if (!(module instanceof Promise)) {\n                    addUseIn(registeredShared);\n                    this.setShared({\n                        pkgName,\n                        loaded: true,\n                        from: host.options.name,\n                        lib: module,\n                        shared: registeredShared\n                    });\n                    return module;\n                }\n            }\n        }\n        if (shareInfo.lib) {\n            if (!shareInfo.loaded) {\n                shareInfo.loaded = true;\n            }\n            return shareInfo.lib;\n        }\n        if (shareInfo.get) {\n            const module = shareInfo.get();\n            if (module instanceof Promise) {\n                const errorCode = (extraOptions == null ? void 0 : extraOptions.from) === 'build' ? _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.RUNTIME_005 : _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.RUNTIME_006;\n                throw new Error((0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.getShortErrorMsg)(errorCode, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.runtimeDescMap, {\n                    hostName: host.options.name,\n                    sharedPkgName: pkgName\n                }));\n            }\n            shareInfo.lib = module;\n            this.setShared({\n                pkgName,\n                loaded: true,\n                from: host.options.name,\n                lib: shareInfo.lib,\n                shared: shareInfo\n            });\n            return shareInfo.lib;\n        }\n        throw new Error((0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.RUNTIME_006, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.runtimeDescMap, {\n            hostName: host.options.name,\n            sharedPkgName: pkgName\n        }));\n    }\n    initShareScopeMap(scopeName, shareScope, extraOptions = {}) {\n        const { host } = this;\n        this.shareScopeMap[scopeName] = shareScope;\n        this.hooks.lifecycle.initContainerShareScopeMap.emit({\n            shareScope,\n            options: host.options,\n            origin: host,\n            scopeName,\n            hostShareScopeMap: extraOptions.hostShareScopeMap\n        });\n    }\n    setShared({ pkgName, shared, from, lib, loading, loaded, get }) {\n        const { version, scope = 'default' } = shared, shareInfo = (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__._)(shared, [\n            \"version\",\n            \"scope\"\n        ]);\n        const scopes = Array.isArray(scope) ? scope : [\n            scope\n        ];\n        scopes.forEach((sc)=>{\n            if (!this.shareScopeMap[sc]) {\n                this.shareScopeMap[sc] = {};\n            }\n            if (!this.shareScopeMap[sc][pkgName]) {\n                this.shareScopeMap[sc][pkgName] = {};\n            }\n            if (!this.shareScopeMap[sc][pkgName][version]) {\n                this.shareScopeMap[sc][pkgName][version] = (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({\n                    version,\n                    scope: [\n                        'default'\n                    ]\n                }, shareInfo, {\n                    lib,\n                    loaded,\n                    loading\n                });\n                if (get) {\n                    this.shareScopeMap[sc][pkgName][version].get = get;\n                }\n                return;\n            }\n            const registeredShared = this.shareScopeMap[sc][pkgName][version];\n            if (loading && !registeredShared.loading) {\n                registeredShared.loading = loading;\n            }\n        });\n    }\n    _setGlobalShareScopeMap(hostOptions) {\n        const globalShareScopeMap = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.a)();\n        const identifier = hostOptions.id || hostOptions.name;\n        if (identifier && !globalShareScopeMap[identifier]) {\n            globalShareScopeMap[identifier] = this.shareScopeMap;\n        }\n    }\n    constructor(host){\n        this.hooks = new PluginSystem({\n            afterResolve: new AsyncWaterfallHook('afterResolve'),\n            beforeLoadShare: new AsyncWaterfallHook('beforeLoadShare'),\n            // not used yet\n            loadShare: new AsyncHook(),\n            resolveShare: new SyncWaterfallHook('resolveShare'),\n            // maybe will change, temporarily for internal use only\n            initContainerShareScopeMap: new SyncWaterfallHook('initContainerShareScopeMap')\n        });\n        this.host = host;\n        this.shareScopeMap = {};\n        this.initTokens = {};\n        this._setGlobalShareScopeMap(host.options);\n    }\n}\n\nclass RemoteHandler {\n    formatAndRegisterRemote(globalOptions, userOptions) {\n        const userRemotes = userOptions.remotes || [];\n        return userRemotes.reduce((res, remote)=>{\n            this.registerRemote(remote, res, {\n                force: false\n            });\n            return res;\n        }, globalOptions.remotes);\n    }\n    setIdToRemoteMap(id, remoteMatchInfo) {\n        const { remote, expose } = remoteMatchInfo;\n        const { name, alias } = remote;\n        this.idToRemoteMap[id] = {\n            name: remote.name,\n            expose\n        };\n        if (alias && id.startsWith(name)) {\n            const idWithAlias = id.replace(name, alias);\n            this.idToRemoteMap[idWithAlias] = {\n                name: remote.name,\n                expose\n            };\n            return;\n        }\n        if (alias && id.startsWith(alias)) {\n            const idWithName = id.replace(alias, name);\n            this.idToRemoteMap[idWithName] = {\n                name: remote.name,\n                expose\n            };\n        }\n    }\n    // eslint-disable-next-line max-lines-per-function\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    async loadRemote(id, options) {\n        const { host } = this;\n        try {\n            const { loadFactory = true } = options || {\n                loadFactory: true\n            };\n            // 1. Validate the parameters of the retrieved module. There are two module request methods: pkgName + expose and alias + expose.\n            // 2. Request the snapshot information of the current host and globally store the obtained snapshot information. The retrieved module information is partially offline and partially online. The online module information will retrieve the modules used online.\n            // 3. Retrieve the detailed information of the current module from global (remoteEntry address, expose resource address)\n            // 4. After retrieving remoteEntry, call the init of the module, and then retrieve the exported content of the module through get\n            // id: pkgName(@federation/app1) + expose(button) = @federation/app1/button\n            // id: alias(app1) + expose(button) = app1/button\n            // id: alias(app1/utils) + expose(loadash/sort) = app1/utils/loadash/sort\n            const { module, moduleOptions, remoteMatchInfo } = await this.getRemoteModuleAndOptions({\n                id\n            });\n            const { pkgNameOrAlias, remote, expose, id: idRes, remoteSnapshot } = remoteMatchInfo;\n            const moduleOrFactory = await module.get(idRes, expose, options, remoteSnapshot);\n            const moduleWrapper = await this.hooks.lifecycle.onLoad.emit({\n                id: idRes,\n                pkgNameOrAlias,\n                expose,\n                exposeModule: loadFactory ? moduleOrFactory : undefined,\n                exposeModuleFactory: loadFactory ? undefined : moduleOrFactory,\n                remote,\n                options: moduleOptions,\n                moduleInstance: module,\n                origin: host\n            });\n            this.setIdToRemoteMap(id, remoteMatchInfo);\n            if (typeof moduleWrapper === 'function') {\n                return moduleWrapper;\n            }\n            return moduleOrFactory;\n        } catch (error) {\n            const { from = 'runtime' } = options || {\n                from: 'runtime'\n            };\n            const failOver = await this.hooks.lifecycle.errorLoadRemote.emit({\n                id,\n                error,\n                from,\n                lifecycle: 'onLoad',\n                origin: host\n            });\n            if (!failOver) {\n                throw error;\n            }\n            return failOver;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    async preloadRemote(preloadOptions) {\n        const { host } = this;\n        await this.hooks.lifecycle.beforePreloadRemote.emit({\n            preloadOps: preloadOptions,\n            options: host.options,\n            origin: host\n        });\n        const preloadOps = formatPreloadArgs(host.options.remotes, preloadOptions);\n        await Promise.all(preloadOps.map(async (ops)=>{\n            const { remote } = ops;\n            const remoteInfo = getRemoteInfo(remote);\n            const { globalSnapshot, remoteSnapshot } = await host.snapshotHandler.loadRemoteSnapshotInfo(remote);\n            const assets = await this.hooks.lifecycle.generatePreloadAssets.emit({\n                origin: host,\n                preloadOptions: ops,\n                remote,\n                remoteInfo,\n                globalSnapshot,\n                remoteSnapshot\n            });\n            if (!assets) {\n                return;\n            }\n            preloadAssets(remoteInfo, host, assets);\n        }));\n    }\n    registerRemotes(remotes, options) {\n        const { host } = this;\n        remotes.forEach((remote)=>{\n            this.registerRemote(remote, host.options.remotes, {\n                force: options == null ? void 0 : options.force\n            });\n        });\n    }\n    async getRemoteModuleAndOptions(options) {\n        const { host } = this;\n        const { id } = options;\n        let loadRemoteArgs;\n        try {\n            loadRemoteArgs = await this.hooks.lifecycle.beforeRequest.emit({\n                id,\n                options: host.options,\n                origin: host\n            });\n        } catch (error) {\n            loadRemoteArgs = await this.hooks.lifecycle.errorLoadRemote.emit({\n                id,\n                options: host.options,\n                origin: host,\n                from: 'runtime',\n                error,\n                lifecycle: 'beforeRequest'\n            });\n            if (!loadRemoteArgs) {\n                throw error;\n            }\n        }\n        const { id: idRes } = loadRemoteArgs;\n        const remoteSplitInfo = matchRemoteWithNameAndExpose(host.options.remotes, idRes);\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(remoteSplitInfo, (0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.RUNTIME_004, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_3__.runtimeDescMap, {\n            hostName: host.options.name,\n            requestId: idRes\n        }));\n        const { remote: rawRemote } = remoteSplitInfo;\n        const remoteInfo = getRemoteInfo(rawRemote);\n        const matchInfo = await host.sharedHandler.hooks.lifecycle.afterResolve.emit((0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({\n            id: idRes\n        }, remoteSplitInfo, {\n            options: host.options,\n            origin: host,\n            remoteInfo\n        }));\n        const { remote, expose } = matchInfo;\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(remote && expose, `The 'beforeRequest' hook was executed, but it failed to return the correct 'remote' and 'expose' values while loading ${idRes}.`);\n        let module = host.moduleCache.get(remote.name);\n        const moduleOptions = {\n            host: host,\n            remoteInfo\n        };\n        if (!module) {\n            module = new Module(moduleOptions);\n            host.moduleCache.set(remote.name, module);\n        }\n        return {\n            module,\n            moduleOptions,\n            remoteMatchInfo: matchInfo\n        };\n    }\n    registerRemote(remote, targetRemotes, options) {\n        const { host } = this;\n        const normalizeRemote = ()=>{\n            if (remote.alias) {\n                // Validate if alias equals the prefix of remote.name and remote.alias, if so, throw an error\n                // As multi-level path references cannot guarantee unique names, alias being a prefix of remote.name is not supported\n                const findEqual = targetRemotes.find((item)=>{\n                    var _item_alias;\n                    return remote.alias && (item.name.startsWith(remote.alias) || ((_item_alias = item.alias) == null ? void 0 : _item_alias.startsWith(remote.alias)));\n                });\n                (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(!findEqual, `The alias ${remote.alias} of remote ${remote.name} is not allowed to be the prefix of ${findEqual && findEqual.name} name or alias`);\n            }\n            // Set the remote entry to a complete path\n            if ('entry' in remote) {\n                if ((0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)() && !remote.entry.startsWith('http')) {\n                    remote.entry = new URL(remote.entry, window.location.origin).href;\n                }\n            }\n            if (!remote.shareScope) {\n                remote.shareScope = _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.u;\n            }\n            if (!remote.type) {\n                remote.type = _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.D;\n            }\n        };\n        this.hooks.lifecycle.beforeRegisterRemote.emit({\n            remote,\n            origin: host\n        });\n        const registeredRemote = targetRemotes.find((item)=>item.name === remote.name);\n        if (!registeredRemote) {\n            normalizeRemote();\n            targetRemotes.push(remote);\n            this.hooks.lifecycle.registerRemote.emit({\n                remote,\n                origin: host\n            });\n        } else {\n            const messages = [\n                `The remote \"${remote.name}\" is already registered.`,\n                (options == null ? void 0 : options.force) ? 'Hope you have known that OVERRIDE it may have some unexpected errors' : 'If you want to merge the remote, you can set \"force: true\".'\n            ];\n            if (options == null ? void 0 : options.force) {\n                // remove registered remote\n                this.removeRemote(registeredRemote);\n                normalizeRemote();\n                targetRemotes.push(remote);\n                this.hooks.lifecycle.registerRemote.emit({\n                    remote,\n                    origin: host\n                });\n            }\n            (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.warn)(messages.join(' '));\n        }\n    }\n    removeRemote(remote) {\n        try {\n            const { host } = this;\n            const { name } = remote;\n            const remoteIndex = host.options.remotes.findIndex((item)=>item.name === name);\n            if (remoteIndex !== -1) {\n                host.options.remotes.splice(remoteIndex, 1);\n            }\n            const loadedModule = host.moduleCache.get(remote.name);\n            if (loadedModule) {\n                const remoteInfo = loadedModule.remoteInfo;\n                const key = remoteInfo.entryGlobalName;\n                if (_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.K[key]) {\n                    var _Object_getOwnPropertyDescriptor;\n                    if ((_Object_getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor(_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.K, key)) == null ? void 0 : _Object_getOwnPropertyDescriptor.configurable) {\n                        delete _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.K[key];\n                    } else {\n                        // @ts-ignore\n                        _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.K[key] = undefined;\n                    }\n                }\n                const remoteEntryUniqueKey = getRemoteEntryUniqueKey(loadedModule.remoteInfo);\n                if (_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.t[remoteEntryUniqueKey]) {\n                    delete _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.t[remoteEntryUniqueKey];\n                }\n                host.snapshotHandler.manifestCache.delete(remoteInfo.entry);\n                // delete unloaded shared and instance\n                let remoteInsId = remoteInfo.buildVersion ? (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.composeKeyWithSeparator)(remoteInfo.name, remoteInfo.buildVersion) : remoteInfo.name;\n                const remoteInsIndex = _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.K.__FEDERATION__.__INSTANCES__.findIndex((ins)=>{\n                    if (remoteInfo.buildVersion) {\n                        return ins.options.id === remoteInsId;\n                    } else {\n                        return ins.name === remoteInsId;\n                    }\n                });\n                if (remoteInsIndex !== -1) {\n                    const remoteIns = _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.K.__FEDERATION__.__INSTANCES__[remoteInsIndex];\n                    remoteInsId = remoteIns.options.id || remoteInsId;\n                    const globalShareScopeMap = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.a)();\n                    let isAllSharedNotUsed = true;\n                    const needDeleteKeys = [];\n                    Object.keys(globalShareScopeMap).forEach((instId)=>{\n                        const shareScopeMap = globalShareScopeMap[instId];\n                        shareScopeMap && Object.keys(shareScopeMap).forEach((shareScope)=>{\n                            const shareScopeVal = shareScopeMap[shareScope];\n                            shareScopeVal && Object.keys(shareScopeVal).forEach((shareName)=>{\n                                const sharedPkgs = shareScopeVal[shareName];\n                                sharedPkgs && Object.keys(sharedPkgs).forEach((shareVersion)=>{\n                                    const shared = sharedPkgs[shareVersion];\n                                    if (shared && typeof shared === 'object' && shared.from === remoteInfo.name) {\n                                        if (shared.loaded || shared.loading) {\n                                            shared.useIn = shared.useIn.filter((usedHostName)=>usedHostName !== remoteInfo.name);\n                                            if (shared.useIn.length) {\n                                                isAllSharedNotUsed = false;\n                                            } else {\n                                                needDeleteKeys.push([\n                                                    instId,\n                                                    shareScope,\n                                                    shareName,\n                                                    shareVersion\n                                                ]);\n                                            }\n                                        } else {\n                                            needDeleteKeys.push([\n                                                instId,\n                                                shareScope,\n                                                shareName,\n                                                shareVersion\n                                            ]);\n                                        }\n                                    }\n                                });\n                            });\n                        });\n                    });\n                    if (isAllSharedNotUsed) {\n                        remoteIns.shareScopeMap = {};\n                        delete globalShareScopeMap[remoteInsId];\n                    }\n                    needDeleteKeys.forEach(([insId, shareScope, shareName, shareVersion])=>{\n                        var _globalShareScopeMap_insId_shareScope_shareName, _globalShareScopeMap_insId_shareScope, _globalShareScopeMap_insId;\n                        (_globalShareScopeMap_insId = globalShareScopeMap[insId]) == null ? true : (_globalShareScopeMap_insId_shareScope = _globalShareScopeMap_insId[shareScope]) == null ? true : (_globalShareScopeMap_insId_shareScope_shareName = _globalShareScopeMap_insId_shareScope[shareName]) == null ? true : delete _globalShareScopeMap_insId_shareScope_shareName[shareVersion];\n                    });\n                    _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.K.__FEDERATION__.__INSTANCES__.splice(remoteInsIndex, 1);\n                }\n                const { hostGlobalSnapshot } = getGlobalRemoteInfo(remote, host);\n                if (hostGlobalSnapshot) {\n                    const remoteKey = hostGlobalSnapshot && 'remotesInfo' in hostGlobalSnapshot && hostGlobalSnapshot.remotesInfo && (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(hostGlobalSnapshot.remotesInfo, remote.name).key;\n                    if (remoteKey) {\n                        delete hostGlobalSnapshot.remotesInfo[remoteKey];\n                        if (//eslint-disable-next-line no-extra-boolean-cast\n                        Boolean(_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.G.__FEDERATION__.__MANIFEST_LOADING__[remoteKey])) {\n                            delete _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.G.__FEDERATION__.__MANIFEST_LOADING__[remoteKey];\n                        }\n                    }\n                }\n                host.moduleCache.delete(remote.name);\n            }\n        } catch (err) {\n            _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.L.log('removeRemote fail: ', err);\n        }\n    }\n    constructor(host){\n        this.hooks = new PluginSystem({\n            beforeRegisterRemote: new SyncWaterfallHook('beforeRegisterRemote'),\n            registerRemote: new SyncWaterfallHook('registerRemote'),\n            beforeRequest: new AsyncWaterfallHook('beforeRequest'),\n            onLoad: new AsyncHook('onLoad'),\n            handlePreloadModule: new SyncHook('handlePreloadModule'),\n            errorLoadRemote: new AsyncHook('errorLoadRemote'),\n            beforePreloadRemote: new AsyncHook('beforePreloadRemote'),\n            generatePreloadAssets: new AsyncHook('generatePreloadAssets'),\n            // not used yet\n            afterPreloadRemote: new AsyncHook(),\n            loadEntry: new AsyncHook()\n        });\n        this.host = host;\n        this.idToRemoteMap = {};\n    }\n}\n\nclass FederationHost {\n    initOptions(userOptions) {\n        this.registerPlugins(userOptions.plugins);\n        const options = this.formatOptions(this.options, userOptions);\n        this.options = options;\n        return options;\n    }\n    async loadShare(pkgName, extraOptions) {\n        return this.sharedHandler.loadShare(pkgName, extraOptions);\n    }\n    // The lib function will only be available if the shared set by eager or runtime init is set or the shared is successfully loaded.\n    // 1. If the loaded shared already exists globally, then it will be reused\n    // 2. If lib exists in local shared, it will be used directly\n    // 3. If the local get returns something other than Promise, then it will be used directly\n    loadShareSync(pkgName, extraOptions) {\n        return this.sharedHandler.loadShareSync(pkgName, extraOptions);\n    }\n    initializeSharing(shareScopeName = _share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.u, extraOptions) {\n        return this.sharedHandler.initializeSharing(shareScopeName, extraOptions);\n    }\n    initRawContainer(name, url, container) {\n        const remoteInfo = getRemoteInfo({\n            name,\n            entry: url\n        });\n        const module = new Module({\n            host: this,\n            remoteInfo\n        });\n        module.remoteEntryExports = container;\n        this.moduleCache.set(name, module);\n        return module;\n    }\n    // eslint-disable-next-line max-lines-per-function\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    async loadRemote(id, options) {\n        return this.remoteHandler.loadRemote(id, options);\n    }\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    async preloadRemote(preloadOptions) {\n        return this.remoteHandler.preloadRemote(preloadOptions);\n    }\n    initShareScopeMap(scopeName, shareScope, extraOptions = {}) {\n        this.sharedHandler.initShareScopeMap(scopeName, shareScope, extraOptions);\n    }\n    formatOptions(globalOptions, userOptions) {\n        const { shared } = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.H)(globalOptions, userOptions);\n        const { userOptions: userOptionsRes, options: globalOptionsRes } = this.hooks.lifecycle.beforeInit.emit({\n            origin: this,\n            userOptions,\n            options: globalOptions,\n            shareInfo: shared\n        });\n        const remotes = this.remoteHandler.formatAndRegisterRemote(globalOptionsRes, userOptionsRes);\n        const { shared: handledShared } = this.sharedHandler.registerShared(globalOptionsRes, userOptionsRes);\n        const plugins = [\n            ...globalOptionsRes.plugins\n        ];\n        if (userOptionsRes.plugins) {\n            userOptionsRes.plugins.forEach((plugin)=>{\n                if (!plugins.includes(plugin)) {\n                    plugins.push(plugin);\n                }\n            });\n        }\n        const optionsRes = (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({}, globalOptions, userOptions, {\n            plugins,\n            remotes,\n            shared: handledShared\n        });\n        this.hooks.lifecycle.init.emit({\n            origin: this,\n            options: optionsRes\n        });\n        return optionsRes;\n    }\n    registerPlugins(plugins) {\n        const pluginRes = registerPlugins$1(plugins, [\n            this.hooks,\n            this.remoteHandler.hooks,\n            this.sharedHandler.hooks,\n            this.snapshotHandler.hooks,\n            this.loaderHook\n        ]);\n        // Merge plugin\n        this.options.plugins = this.options.plugins.reduce((res, plugin)=>{\n            if (!plugin) return res;\n            if (res && !res.find((item)=>item.name === plugin.name)) {\n                res.push(plugin);\n            }\n            return res;\n        }, pluginRes || []);\n    }\n    registerRemotes(remotes, options) {\n        return this.remoteHandler.registerRemotes(remotes, options);\n    }\n    constructor(userOptions){\n        this.hooks = new PluginSystem({\n            beforeInit: new SyncWaterfallHook('beforeInit'),\n            init: new SyncHook(),\n            // maybe will change, temporarily for internal use only\n            beforeInitContainer: new AsyncWaterfallHook('beforeInitContainer'),\n            // maybe will change, temporarily for internal use only\n            initContainer: new AsyncWaterfallHook('initContainer')\n        });\n        this.version = \"0.7.3\";\n        this.moduleCache = new Map();\n        this.loaderHook = new PluginSystem({\n            // FIXME: may not be suitable , not open to the public yet\n            getModuleInfo: new SyncHook(),\n            createScript: new SyncHook(),\n            createLink: new SyncHook(),\n            // only work for manifest , so not open to the public yet\n            fetch: new AsyncHook(),\n            getModuleFactory: new AsyncHook()\n        });\n        // TODO: Validate the details of the options\n        // Initialize options with default values\n        const defaultOptions = {\n            id: (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.M)(),\n            name: userOptions.name,\n            plugins: [\n                snapshotPlugin(),\n                generatePreloadAssetsPlugin()\n            ],\n            remotes: [],\n            shared: {},\n            inBrowser: (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)()\n        };\n        this.name = userOptions.name;\n        this.options = defaultOptions;\n        this.snapshotHandler = new SnapshotHandler(this);\n        this.sharedHandler = new SharedHandler(this);\n        this.remoteHandler = new RemoteHandler(this);\n        this.shareScopeMap = this.sharedHandler.shareScopeMap;\n        this.registerPlugins([\n            ...defaultOptions.plugins,\n            ...userOptions.plugins || []\n        ]);\n        this.options = this.formatOptions(defaultOptions, userOptions);\n    }\n}\n\nlet FederationInstance = null;\nfunction init(options) {\n    // Retrieve the same instance with the same name\n    const instance = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.b)(options.name, options.version);\n    if (!instance) {\n        // Retrieve debug constructor\n        const FederationConstructor = (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.c)() || FederationHost;\n        FederationInstance = new FederationConstructor(options);\n        (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(FederationInstance);\n        return FederationInstance;\n    } else {\n        // Merge options\n        instance.initOptions(options);\n        if (!FederationInstance) {\n            FederationInstance = instance;\n        }\n        return instance;\n    }\n}\nfunction loadRemote(...args) {\n    (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(FederationInstance, 'Please call init first');\n    const loadRemote1 = FederationInstance.loadRemote;\n    // eslint-disable-next-line prefer-spread\n    return loadRemote1.apply(FederationInstance, args);\n}\nfunction loadShare(...args) {\n    (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(FederationInstance, 'Please call init first');\n    // eslint-disable-next-line prefer-spread\n    const loadShare1 = FederationInstance.loadShare;\n    return loadShare1.apply(FederationInstance, args);\n}\nfunction loadShareSync(...args) {\n    (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(FederationInstance, 'Please call init first');\n    const loadShareSync1 = FederationInstance.loadShareSync;\n    // eslint-disable-next-line prefer-spread\n    return loadShareSync1.apply(FederationInstance, args);\n}\nfunction preloadRemote(...args) {\n    (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(FederationInstance, 'Please call init first');\n    // eslint-disable-next-line prefer-spread\n    return FederationInstance.preloadRemote.apply(FederationInstance, args);\n}\nfunction registerRemotes(...args) {\n    (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(FederationInstance, 'Please call init first');\n    // eslint-disable-next-line prefer-spread\n    return FederationInstance.registerRemotes.apply(FederationInstance, args);\n}\nfunction registerPlugins(...args) {\n    (0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.v)(FederationInstance, 'Please call init first');\n    // eslint-disable-next-line prefer-spread\n    return FederationInstance.registerPlugins.apply(FederationInstance, args);\n}\nfunction getInstance() {\n    return FederationInstance;\n}\n// Inject for debug\n(0,_share_esm_mjs__WEBPACK_IMPORTED_MODULE_2__.d)(FederationHost);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Btb2R1bGUtZmVkZXJhdGlvbitydW50aW1lQDAuNy4zL25vZGVfbW9kdWxlcy9AbW9kdWxlLWZlZGVyYXRpb24vcnVudGltZS9kaXN0L2luZGV4LmVzbS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEyRjtBQUMwSTtBQUNqSztBQUNreUI7QUFDenlCO0FBQ2dIOztBQUU3SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsT0FBTztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGdCQUFnQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQixpREFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEIsMkJBQTJCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLG1DQUFtQywyQkFBMkI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsS0FBeUMsRUFBRSxFQUc5QyxDQUFDO0FBQ2xCLGdFQUFnRSxNQUFNO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FB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QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlEQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBOEI7O0FBRTZJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9tZS8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG1vZHVsZS1mZWRlcmF0aW9uK3J1bnRpbWVAMC43LjMvbm9kZV9tb2R1bGVzL0Btb2R1bGUtZmVkZXJhdGlvbi9ydW50aW1lL2Rpc3QvaW5kZXguZXNtLm1qcz84NjkxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGEgYXMgX2V4dGVuZHMsIF8gYXMgX29iamVjdF93aXRob3V0X3Byb3BlcnRpZXNfbG9vc2UgfSBmcm9tICcuL3BvbHlmaWxscy5lc20ubWpzJztcbmltcG9ydCB7IGlzQnJvd3NlckVudiwgbG9hZFNjcmlwdE5vZGUsIGNvbXBvc2VLZXlXaXRoU2VwYXJhdG9yLCBsb2FkU2NyaXB0LCBzYWZlVG9TdHJpbmcsIGNyZWF0ZUxpbmssIGNyZWF0ZVNjcmlwdCwgZ2V0UmVzb3VyY2VVcmwsIGlzTWFuaWZlc3RQcm92aWRlciwgZ2VuZXJhdGVTbmFwc2hvdEZyb21NYW5pZmVzdCwgd2FybiBhcyB3YXJuJDEgfSBmcm9tICdAbW9kdWxlLWZlZGVyYXRpb24vc2RrJztcbmV4cG9ydCB7IGxvYWRTY3JpcHQsIGxvYWRTY3JpcHROb2RlIH0gZnJvbSAnQG1vZHVsZS1mZWRlcmF0aW9uL3Nkayc7XG5pbXBvcnQgeyBvIGFzIGdldEdsb2JhbEhvc3RQbHVnaW5zLCB0IGFzIGdsb2JhbExvYWRpbmcsIEQgYXMgREVGQVVMVF9SRU1PVEVfVFlQRSwgdSBhcyBERUZBVUxUX1NDT1BFLCBsIGFzIGdldFJlbW90ZUVudHJ5RXhwb3J0cywgdiBhcyBhc3NlcnQsIHcgYXMgZXJyb3IsIHggYXMgZ2V0Rk1JZCwgeSBhcyBpc09iamVjdCwgeiBhcyB3YXJuLCBBIGFzIGlzUGxhaW5PYmplY3QsIEIgYXMgaXNSZW1vdGVJbmZvV2l0aEVudHJ5LCBDIGFzIGlzUHVyZVJlbW90ZUVudHJ5LCBFIGFzIGdldFJlbW90ZUVudHJ5SW5mb0Zyb21TbmFwc2hvdCwgZSBhcyBnZXRJbmZvV2l0aG91dFR5cGUsIHAgYXMgZ2V0UHJlbG9hZGVkLCBxIGFzIHNldFByZWxvYWRlZCwgZyBhcyBnZXRSZWdpc3RlcmVkU2hhcmUsIEYgYXMgYXJyYXlPcHRpb25zLCBpIGFzIGdldEdsb2JhbFNuYXBzaG90SW5mb0J5TW9kdWxlSW5mbywgayBhcyBhZGRHbG9iYWxTbmFwc2hvdCwgaiBhcyBzZXRHbG9iYWxTbmFwc2hvdEluZm9CeU1vZHVsZUluZm8sIEcgYXMgR2xvYmFsLCBmIGFzIGdldEdsb2JhbFNuYXBzaG90LCBIIGFzIGZvcm1hdFNoYXJlQ29uZmlncywgSSBhcyBnZXRUYXJnZXRTaGFyZWRPcHRpb25zLCBhIGFzIGdldEdsb2JhbFNoYXJlU2NvcGUsIEogYXMgYWRkVW5pcXVlSXRlbSwgSyBhcyBDdXJyZW50R2xvYmFsLCBMIGFzIGxvZ2dlciwgTSBhcyBnZXRCdWlsZGVySWQsIGQgYXMgc2V0R2xvYmFsRmVkZXJhdGlvbkNvbnN0cnVjdG9yLCBiIGFzIGdldEdsb2JhbEZlZGVyYXRpb25JbnN0YW5jZSwgYyBhcyBnZXRHbG9iYWxGZWRlcmF0aW9uQ29uc3RydWN0b3IsIHMgYXMgc2V0R2xvYmFsRmVkZXJhdGlvbkluc3RhbmNlIH0gZnJvbSAnLi9zaGFyZS5lc20ubWpzJztcbmV4cG9ydCB7IG0gYXMgcmVnaXN0ZXJHbG9iYWxQbHVnaW5zIH0gZnJvbSAnLi9zaGFyZS5lc20ubWpzJztcbmltcG9ydCB7IGdldFNob3J0RXJyb3JNc2csIFJVTlRJTUVfMDAxLCBydW50aW1lRGVzY01hcCwgUlVOVElNRV8wMDIsIFJVTlRJTUVfMDA3LCBSVU5USU1FXzAwMywgUlVOVElNRV8wMDUsIFJVTlRJTUVfMDA2LCBSVU5USU1FXzAwNCB9IGZyb20gJ0Btb2R1bGUtZmVkZXJhdGlvbi9lcnJvci1jb2Rlcyc7XG5cbi8vIEZ1bmN0aW9uIHRvIG1hdGNoIGEgcmVtb3RlIHdpdGggaXRzIG5hbWUgYW5kIGV4cG9zZVxuLy8gaWQ6IHBrZ05hbWUoQGZlZGVyYXRpb24vYXBwMSkgKyBleHBvc2UoYnV0dG9uKSA9IEBmZWRlcmF0aW9uL2FwcDEvYnV0dG9uXG4vLyBpZDogYWxpYXMoYXBwMSkgKyBleHBvc2UoYnV0dG9uKSA9IGFwcDEvYnV0dG9uXG4vLyBpZDogYWxpYXMoYXBwMS91dGlscykgKyBleHBvc2UobG9hZGFzaC9zb3J0KSA9IGFwcDEvdXRpbHMvbG9hZGFzaC9zb3J0XG5mdW5jdGlvbiBtYXRjaFJlbW90ZVdpdGhOYW1lQW5kRXhwb3NlKHJlbW90ZXMsIGlkKSB7XG4gICAgZm9yIChjb25zdCByZW1vdGUgb2YgcmVtb3Rlcyl7XG4gICAgICAgIC8vIG1hdGNoIHBrZ05hbWVcbiAgICAgICAgY29uc3QgaXNOYW1lTWF0Y2hlZCA9IGlkLnN0YXJ0c1dpdGgocmVtb3RlLm5hbWUpO1xuICAgICAgICBsZXQgZXhwb3NlID0gaWQucmVwbGFjZShyZW1vdGUubmFtZSwgJycpO1xuICAgICAgICBpZiAoaXNOYW1lTWF0Y2hlZCkge1xuICAgICAgICAgICAgaWYgKGV4cG9zZS5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwa2dOYW1lT3JBbGlhcyA9IHJlbW90ZS5uYW1lO1xuICAgICAgICAgICAgICAgIGV4cG9zZSA9IGAuJHtleHBvc2V9YDtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBwa2dOYW1lT3JBbGlhcyxcbiAgICAgICAgICAgICAgICAgICAgZXhwb3NlLFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChleHBvc2UgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcGtnTmFtZU9yQWxpYXM6IHJlbW90ZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBleHBvc2U6ICcuJyxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBtYXRjaCBhbGlhc1xuICAgICAgICBjb25zdCBpc0FsaWFzTWF0Y2hlZCA9IHJlbW90ZS5hbGlhcyAmJiBpZC5zdGFydHNXaXRoKHJlbW90ZS5hbGlhcyk7XG4gICAgICAgIGxldCBleHBvc2VXaXRoQWxpYXMgPSByZW1vdGUuYWxpYXMgJiYgaWQucmVwbGFjZShyZW1vdGUuYWxpYXMsICcnKTtcbiAgICAgICAgaWYgKHJlbW90ZS5hbGlhcyAmJiBpc0FsaWFzTWF0Y2hlZCkge1xuICAgICAgICAgICAgaWYgKGV4cG9zZVdpdGhBbGlhcyAmJiBleHBvc2VXaXRoQWxpYXMuc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGtnTmFtZU9yQWxpYXMgPSByZW1vdGUuYWxpYXM7XG4gICAgICAgICAgICAgICAgZXhwb3NlV2l0aEFsaWFzID0gYC4ke2V4cG9zZVdpdGhBbGlhc31gO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHBrZ05hbWVPckFsaWFzLFxuICAgICAgICAgICAgICAgICAgICBleHBvc2U6IGV4cG9zZVdpdGhBbGlhcyxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhwb3NlV2l0aEFsaWFzID09PSAnJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHBrZ05hbWVPckFsaWFzOiByZW1vdGUuYWxpYXMsXG4gICAgICAgICAgICAgICAgICAgIGV4cG9zZTogJy4nLFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbn1cbi8vIEZ1bmN0aW9uIHRvIG1hdGNoIGEgcmVtb3RlIHdpdGggaXRzIG5hbWUgb3IgYWxpYXNcbmZ1bmN0aW9uIG1hdGNoUmVtb3RlKHJlbW90ZXMsIG5hbWVPckFsaWFzKSB7XG4gICAgZm9yIChjb25zdCByZW1vdGUgb2YgcmVtb3Rlcyl7XG4gICAgICAgIGNvbnN0IGlzTmFtZU1hdGNoZWQgPSBuYW1lT3JBbGlhcyA9PT0gcmVtb3RlLm5hbWU7XG4gICAgICAgIGlmIChpc05hbWVNYXRjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVtb3RlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzQWxpYXNNYXRjaGVkID0gcmVtb3RlLmFsaWFzICYmIG5hbWVPckFsaWFzID09PSByZW1vdGUuYWxpYXM7XG4gICAgICAgIGlmIChpc0FsaWFzTWF0Y2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlbW90ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2lucyQxKHBsdWdpbnMsIGhvb2tJbnN0YW5jZXMpIHtcbiAgICBjb25zdCBnbG9iYWxQbHVnaW5zID0gZ2V0R2xvYmFsSG9zdFBsdWdpbnMoKTtcbiAgICAvLyBJbmNvcnBvcmF0ZSBnbG9iYWwgcGx1Z2luc1xuICAgIGlmIChnbG9iYWxQbHVnaW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZ2xvYmFsUGx1Z2lucy5mb3JFYWNoKChwbHVnaW4pPT57XG4gICAgICAgICAgICBpZiAocGx1Z2lucyA9PSBudWxsID8gdm9pZCAwIDogcGx1Z2lucy5maW5kKChpdGVtKT0+aXRlbS5uYW1lICE9PSBwbHVnaW4ubmFtZSkpIHtcbiAgICAgICAgICAgICAgICBwbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChwbHVnaW5zICYmIHBsdWdpbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBwbHVnaW5zLmZvckVhY2goKHBsdWdpbik9PntcbiAgICAgICAgICAgIGhvb2tJbnN0YW5jZXMuZm9yRWFjaCgoaG9va0luc3RhbmNlKT0+e1xuICAgICAgICAgICAgICAgIGhvb2tJbnN0YW5jZS5hcHBseVBsdWdpbihwbHVnaW4pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcGx1Z2lucztcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZEVzbUVudHJ5KHsgZW50cnksIHJlbW90ZUVudHJ5RXhwb3J0cyB9KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT57XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIXJlbW90ZUVudHJ5RXhwb3J0cykge1xuICAgICAgICAgICAgICAgIGltcG9ydCgvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovIGVudHJ5KS50aGVuKHJlc29sdmUpLmNhdGNoKHJlamVjdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmVtb3RlRW50cnlFeHBvcnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiBsb2FkU3lzdGVtSnNFbnRyeSh7IGVudHJ5LCByZW1vdGVFbnRyeUV4cG9ydHMgfSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCFyZW1vdGVFbnRyeUV4cG9ydHMpIHtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIF9fc3lzdGVtX2NvbnRleHRfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIFN5c3RlbS5pbXBvcnQoZW50cnkpLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXcgRnVuY3Rpb24oJ2NhbGxiYWNrcycsIGBTeXN0ZW0uaW1wb3J0KFwiJHtlbnRyeX1cIikudGhlbihjYWxsYmFja3NbMF0pLmNhdGNoKGNhbGxiYWNrc1sxXSlgKShbXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZW1vdGVFbnRyeUV4cG9ydHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGxvYWRFbnRyeVNjcmlwdCh7IG5hbWUsIGdsb2JhbE5hbWUsIGVudHJ5LCBsb2FkZXJIb29rIH0pIHtcbiAgICBjb25zdCB7IGVudHJ5RXhwb3J0czogcmVtb3RlRW50cnlFeHBvcnRzIH0gPSBnZXRSZW1vdGVFbnRyeUV4cG9ydHMobmFtZSwgZ2xvYmFsTmFtZSk7XG4gICAgaWYgKHJlbW90ZUVudHJ5RXhwb3J0cykge1xuICAgICAgICByZXR1cm4gcmVtb3RlRW50cnlFeHBvcnRzO1xuICAgIH1cbiAgICByZXR1cm4gbG9hZFNjcmlwdChlbnRyeSwge1xuICAgICAgICBhdHRyczoge30sXG4gICAgICAgIGNyZWF0ZVNjcmlwdEhvb2s6ICh1cmwsIGF0dHJzKT0+e1xuICAgICAgICAgICAgY29uc3QgcmVzID0gbG9hZGVySG9vay5saWZlY3ljbGUuY3JlYXRlU2NyaXB0LmVtaXQoe1xuICAgICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgICBhdHRyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIXJlcykgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHJlcyBpbnN0YW5jZW9mIEhUTUxTY3JpcHRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgnc2NyaXB0JyBpbiByZXMgfHwgJ3RpbWVvdXQnIGluIHJlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9KS50aGVuKCgpPT57XG4gICAgICAgIGNvbnN0IHsgcmVtb3RlRW50cnlLZXksIGVudHJ5RXhwb3J0cyB9ID0gZ2V0UmVtb3RlRW50cnlFeHBvcnRzKG5hbWUsIGdsb2JhbE5hbWUpO1xuICAgICAgICBhc3NlcnQoZW50cnlFeHBvcnRzLCBnZXRTaG9ydEVycm9yTXNnKFJVTlRJTUVfMDAxLCBydW50aW1lRGVzY01hcCwge1xuICAgICAgICAgICAgcmVtb3RlTmFtZTogbmFtZSxcbiAgICAgICAgICAgIHJlbW90ZUVudHJ5VXJsOiBlbnRyeSxcbiAgICAgICAgICAgIHJlbW90ZUVudHJ5S2V5XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIGVudHJ5RXhwb3J0cztcbiAgICB9KS5jYXRjaCgoZSk9PntcbiAgICAgICAgdGhyb3cgZTtcbiAgICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGxvYWRFbnRyeURvbSh7IHJlbW90ZUluZm8sIHJlbW90ZUVudHJ5RXhwb3J0cywgbG9hZGVySG9vayB9KSB7XG4gICAgY29uc3QgeyBlbnRyeSwgZW50cnlHbG9iYWxOYW1lOiBnbG9iYWxOYW1lLCBuYW1lLCB0eXBlIH0gPSByZW1vdGVJbmZvO1xuICAgIHN3aXRjaCh0eXBlKXtcbiAgICAgICAgY2FzZSAnZXNtJzpcbiAgICAgICAgY2FzZSAnbW9kdWxlJzpcbiAgICAgICAgICAgIHJldHVybiBsb2FkRXNtRW50cnkoe1xuICAgICAgICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgICAgICAgIHJlbW90ZUVudHJ5RXhwb3J0c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGNhc2UgJ3N5c3RlbSc6XG4gICAgICAgICAgICByZXR1cm4gbG9hZFN5c3RlbUpzRW50cnkoe1xuICAgICAgICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgICAgICAgIHJlbW90ZUVudHJ5RXhwb3J0c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbG9hZEVudHJ5U2NyaXB0KHtcbiAgICAgICAgICAgICAgICBlbnRyeSxcbiAgICAgICAgICAgICAgICBnbG9iYWxOYW1lLFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgbG9hZGVySG9va1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gbG9hZEVudHJ5Tm9kZSh7IHJlbW90ZUluZm8sIGxvYWRlckhvb2sgfSkge1xuICAgIGNvbnN0IHsgZW50cnksIGVudHJ5R2xvYmFsTmFtZTogZ2xvYmFsTmFtZSwgbmFtZSwgdHlwZSB9ID0gcmVtb3RlSW5mbztcbiAgICBjb25zdCB7IGVudHJ5RXhwb3J0czogcmVtb3RlRW50cnlFeHBvcnRzIH0gPSBnZXRSZW1vdGVFbnRyeUV4cG9ydHMobmFtZSwgZ2xvYmFsTmFtZSk7XG4gICAgaWYgKHJlbW90ZUVudHJ5RXhwb3J0cykge1xuICAgICAgICByZXR1cm4gcmVtb3RlRW50cnlFeHBvcnRzO1xuICAgIH1cbiAgICByZXR1cm4gbG9hZFNjcmlwdE5vZGUoZW50cnksIHtcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBnbG9iYWxOYW1lLFxuICAgICAgICAgICAgdHlwZVxuICAgICAgICB9LFxuICAgICAgICBsb2FkZXJIb29rOiB7XG4gICAgICAgICAgICBjcmVhdGVTY3JpcHRIb29rOiAodXJsLCBhdHRycyA9IHt9KT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGxvYWRlckhvb2subGlmZWN5Y2xlLmNyZWF0ZVNjcmlwdC5lbWl0KHtcbiAgICAgICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICAgICAgICBhdHRyc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghcmVzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKCd1cmwnIGluIHJlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KS50aGVuKCgpPT57XG4gICAgICAgIGNvbnN0IHsgcmVtb3RlRW50cnlLZXksIGVudHJ5RXhwb3J0cyB9ID0gZ2V0UmVtb3RlRW50cnlFeHBvcnRzKG5hbWUsIGdsb2JhbE5hbWUpO1xuICAgICAgICBhc3NlcnQoZW50cnlFeHBvcnRzLCBnZXRTaG9ydEVycm9yTXNnKFJVTlRJTUVfMDAxLCBydW50aW1lRGVzY01hcCwge1xuICAgICAgICAgICAgcmVtb3RlTmFtZTogbmFtZSxcbiAgICAgICAgICAgIHJlbW90ZUVudHJ5VXJsOiBlbnRyeSxcbiAgICAgICAgICAgIHJlbW90ZUVudHJ5S2V5XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIGVudHJ5RXhwb3J0cztcbiAgICB9KS5jYXRjaCgoZSk9PntcbiAgICAgICAgdGhyb3cgZTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldFJlbW90ZUVudHJ5VW5pcXVlS2V5KHJlbW90ZUluZm8pIHtcbiAgICBjb25zdCB7IGVudHJ5LCBuYW1lIH0gPSByZW1vdGVJbmZvO1xuICAgIHJldHVybiBjb21wb3NlS2V5V2l0aFNlcGFyYXRvcihuYW1lLCBlbnRyeSk7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRSZW1vdGVFbnRyeSh7IG9yaWdpbiwgcmVtb3RlRW50cnlFeHBvcnRzLCByZW1vdGVJbmZvIH0pIHtcbiAgICBjb25zdCB1bmlxdWVLZXkgPSBnZXRSZW1vdGVFbnRyeVVuaXF1ZUtleShyZW1vdGVJbmZvKTtcbiAgICBpZiAocmVtb3RlRW50cnlFeHBvcnRzKSB7XG4gICAgICAgIHJldHVybiByZW1vdGVFbnRyeUV4cG9ydHM7XG4gICAgfVxuICAgIGlmICghZ2xvYmFsTG9hZGluZ1t1bmlxdWVLZXldKSB7XG4gICAgICAgIGNvbnN0IGxvYWRFbnRyeUhvb2sgPSBvcmlnaW4ucmVtb3RlSGFuZGxlci5ob29rcy5saWZlY3ljbGUubG9hZEVudHJ5O1xuICAgICAgICBvcmlnaW4ubG9hZGVySG9vay5saWZlY3ljbGUuY3JlYXRlU2NyaXB0O1xuICAgICAgICBjb25zdCBsb2FkZXJIb29rID0gb3JpZ2luLmxvYWRlckhvb2s7XG4gICAgICAgIGdsb2JhbExvYWRpbmdbdW5pcXVlS2V5XSA9IGxvYWRFbnRyeUhvb2suZW1pdCh7XG4gICAgICAgICAgICBsb2FkZXJIb29rLFxuICAgICAgICAgICAgcmVtb3RlSW5mbyxcbiAgICAgICAgICAgIHJlbW90ZUVudHJ5RXhwb3J0c1xuICAgICAgICB9KS50aGVuKChyZXMpPT57XG4gICAgICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpc0Jyb3dzZXJFbnYoKSA/IGxvYWRFbnRyeURvbSh7XG4gICAgICAgICAgICAgICAgcmVtb3RlSW5mbyxcbiAgICAgICAgICAgICAgICByZW1vdGVFbnRyeUV4cG9ydHMsXG4gICAgICAgICAgICAgICAgbG9hZGVySG9va1xuICAgICAgICAgICAgfSkgOiBsb2FkRW50cnlOb2RlKHtcbiAgICAgICAgICAgICAgICByZW1vdGVJbmZvLFxuICAgICAgICAgICAgICAgIGxvYWRlckhvb2tcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGdsb2JhbExvYWRpbmdbdW5pcXVlS2V5XTtcbn1cbmZ1bmN0aW9uIGdldFJlbW90ZUluZm8ocmVtb3RlKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCByZW1vdGUsIHtcbiAgICAgICAgZW50cnk6ICdlbnRyeScgaW4gcmVtb3RlID8gcmVtb3RlLmVudHJ5IDogJycsXG4gICAgICAgIHR5cGU6IHJlbW90ZS50eXBlIHx8IERFRkFVTFRfUkVNT1RFX1RZUEUsXG4gICAgICAgIGVudHJ5R2xvYmFsTmFtZTogcmVtb3RlLmVudHJ5R2xvYmFsTmFtZSB8fCByZW1vdGUubmFtZSxcbiAgICAgICAgc2hhcmVTY29wZTogcmVtb3RlLnNoYXJlU2NvcGUgfHwgREVGQVVMVF9TQ09QRVxuICAgIH0pO1xufVxuXG5sZXQgTW9kdWxlID0gY2xhc3MgTW9kdWxlIHtcbiAgICBhc3luYyBnZXRFbnRyeSgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVtb3RlRW50cnlFeHBvcnRzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdGVFbnRyeUV4cG9ydHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHJlbW90ZUVudHJ5LmpzXG4gICAgICAgIGNvbnN0IHJlbW90ZUVudHJ5RXhwb3J0cyA9IGF3YWl0IGdldFJlbW90ZUVudHJ5KHtcbiAgICAgICAgICAgIG9yaWdpbjogdGhpcy5ob3N0LFxuICAgICAgICAgICAgcmVtb3RlSW5mbzogdGhpcy5yZW1vdGVJbmZvLFxuICAgICAgICAgICAgcmVtb3RlRW50cnlFeHBvcnRzOiB0aGlzLnJlbW90ZUVudHJ5RXhwb3J0c1xuICAgICAgICB9KTtcbiAgICAgICAgYXNzZXJ0KHJlbW90ZUVudHJ5RXhwb3J0cywgYHJlbW90ZUVudHJ5RXhwb3J0cyBpcyB1bmRlZmluZWQgXFxuICR7c2FmZVRvU3RyaW5nKHRoaXMucmVtb3RlSW5mbyl9YCk7XG4gICAgICAgIHRoaXMucmVtb3RlRW50cnlFeHBvcnRzID0gcmVtb3RlRW50cnlFeHBvcnRzO1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdGVFbnRyeUV4cG9ydHM7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG4gICAgYXN5bmMgZ2V0KGlkLCBleHBvc2UsIG9wdGlvbnMsIHJlbW90ZVNuYXBzaG90KSB7XG4gICAgICAgIGNvbnN0IHsgbG9hZEZhY3RvcnkgPSB0cnVlIH0gPSBvcHRpb25zIHx8IHtcbiAgICAgICAgICAgIGxvYWRGYWN0b3J5OiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIC8vIEdldCByZW1vdGVFbnRyeS5qc1xuICAgICAgICBjb25zdCByZW1vdGVFbnRyeUV4cG9ydHMgPSBhd2FpdCB0aGlzLmdldEVudHJ5KCk7XG4gICAgICAgIGlmICghdGhpcy5pbml0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsU2hhcmVTY29wZU1hcCA9IHRoaXMuaG9zdC5zaGFyZVNjb3BlTWFwO1xuICAgICAgICAgICAgY29uc3QgcmVtb3RlU2hhcmVTY29wZSA9IHRoaXMucmVtb3RlSW5mby5zaGFyZVNjb3BlIHx8ICdkZWZhdWx0JztcbiAgICAgICAgICAgIGlmICghbG9jYWxTaGFyZVNjb3BlTWFwW3JlbW90ZVNoYXJlU2NvcGVdKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxTaGFyZVNjb3BlTWFwW3JlbW90ZVNoYXJlU2NvcGVdID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzaGFyZVNjb3BlID0gbG9jYWxTaGFyZVNjb3BlTWFwW3JlbW90ZVNoYXJlU2NvcGVdO1xuICAgICAgICAgICAgY29uc3QgaW5pdFNjb3BlID0gW107XG4gICAgICAgICAgICBjb25zdCByZW1vdGVFbnRyeUluaXRPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHZlcnNpb246IHRoaXMucmVtb3RlSW5mby52ZXJzaW9uIHx8ICcnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gSGVscCB0byBmaW5kIGhvc3QgaW5zdGFuY2VcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZW1vdGVFbnRyeUluaXRPcHRpb25zLCAnc2hhcmVTY29wZU1hcCcsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbG9jYWxTaGFyZVNjb3BlTWFwLFxuICAgICAgICAgICAgICAgIC8vIHJlbW90ZUVudHJ5SW5pdE9wdGlvbnMgd2lsbCBiZSB0cmF2ZXJzZWQgYW5kIGFzc2lnbmVkIGR1cmluZyBjb250YWluZXIgaW5pdCwgLHNvIHRoaXMgYXR0cmlidXRlIGlzIG5vdCBhbGxvd2VkIHRvIGJlIHRyYXZlcnNlZFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGluaXRDb250YWluZXJPcHRpb25zID0gYXdhaXQgdGhpcy5ob3N0Lmhvb2tzLmxpZmVjeWNsZS5iZWZvcmVJbml0Q29udGFpbmVyLmVtaXQoe1xuICAgICAgICAgICAgICAgIHNoYXJlU2NvcGUsXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBzaGFyZVNjb3BlTWFwIHdpbGwgYmUgc2V0IGJ5IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxuICAgICAgICAgICAgICAgIHJlbW90ZUVudHJ5SW5pdE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgaW5pdFNjb3BlLFxuICAgICAgICAgICAgICAgIHJlbW90ZUluZm86IHRoaXMucmVtb3RlSW5mbyxcbiAgICAgICAgICAgICAgICBvcmlnaW46IHRoaXMuaG9zdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIChyZW1vdGVFbnRyeUV4cG9ydHMgPT0gbnVsbCA/IHZvaWQgMCA6IHJlbW90ZUVudHJ5RXhwb3J0cy5pbml0KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBlcnJvcihnZXRTaG9ydEVycm9yTXNnKFJVTlRJTUVfMDAyLCBydW50aW1lRGVzY01hcCwge1xuICAgICAgICAgICAgICAgICAgICByZW1vdGVOYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVFbnRyeVVybDogdGhpcy5yZW1vdGVJbmZvLmVudHJ5LFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVFbnRyeUtleTogdGhpcy5yZW1vdGVJbmZvLmVudHJ5R2xvYmFsTmFtZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHJlbW90ZUVudHJ5RXhwb3J0cy5pbml0KGluaXRDb250YWluZXJPcHRpb25zLnNoYXJlU2NvcGUsIGluaXRDb250YWluZXJPcHRpb25zLmluaXRTY29wZSwgaW5pdENvbnRhaW5lck9wdGlvbnMucmVtb3RlRW50cnlJbml0T3B0aW9ucyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmhvc3QuaG9va3MubGlmZWN5Y2xlLmluaXRDb250YWluZXIuZW1pdChfZXh0ZW5kcyh7fSwgaW5pdENvbnRhaW5lck9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICByZW1vdGVTbmFwc2hvdCxcbiAgICAgICAgICAgICAgICByZW1vdGVFbnRyeUV4cG9ydHNcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxpYiA9IHJlbW90ZUVudHJ5RXhwb3J0cztcbiAgICAgICAgdGhpcy5pbml0ZWQgPSB0cnVlO1xuICAgICAgICBsZXQgbW9kdWxlRmFjdG9yeTtcbiAgICAgICAgbW9kdWxlRmFjdG9yeSA9IGF3YWl0IHRoaXMuaG9zdC5sb2FkZXJIb29rLmxpZmVjeWNsZS5nZXRNb2R1bGVGYWN0b3J5LmVtaXQoe1xuICAgICAgICAgICAgcmVtb3RlRW50cnlFeHBvcnRzLFxuICAgICAgICAgICAgZXhwb3NlLFxuICAgICAgICAgICAgbW9kdWxlSW5mbzogdGhpcy5yZW1vdGVJbmZvXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBnZXQgZXhwb3NlR2V0dGVyXG4gICAgICAgIGlmICghbW9kdWxlRmFjdG9yeSkge1xuICAgICAgICAgICAgbW9kdWxlRmFjdG9yeSA9IGF3YWl0IHJlbW90ZUVudHJ5RXhwb3J0cy5nZXQoZXhwb3NlKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnQobW9kdWxlRmFjdG9yeSwgYCR7Z2V0Rk1JZCh0aGlzLnJlbW90ZUluZm8pfSByZW1vdGUgZG9uJ3QgZXhwb3J0ICR7ZXhwb3NlfS5gKTtcbiAgICAgICAgY29uc3Qgd3JhcE1vZHVsZUZhY3RvcnkgPSB0aGlzLndyYXBlckZhY3RvcnkobW9kdWxlRmFjdG9yeSwgaWQpO1xuICAgICAgICBpZiAoIWxvYWRGYWN0b3J5KSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcE1vZHVsZUZhY3Rvcnk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXhwb3NlQ29udGVudCA9IGF3YWl0IHdyYXBNb2R1bGVGYWN0b3J5KCk7XG4gICAgICAgIHJldHVybiBleHBvc2VDb250ZW50O1xuICAgIH1cbiAgICB3cmFwZXJGYWN0b3J5KG1vZHVsZUZhY3RvcnksIGlkKSB7XG4gICAgICAgIGZ1bmN0aW9uIGRlZmluZU1vZHVsZUlkKHJlcywgaWQpIHtcbiAgICAgICAgICAgIGlmIChyZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShyZXMpICYmICFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHJlcywgU3ltYm9sLmZvcignbWZfbW9kdWxlX2lkJykpKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcywgU3ltYm9sLmZvcignbWZfbW9kdWxlX2lkJyksIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGlkLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtb2R1bGVGYWN0b3J5IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFzeW5jICgpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgbW9kdWxlRmFjdG9yeSgpO1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgcGFyYW1ldGVyIGlzIHVzZWQgZm9yIGJyaWRnZSBkZWJ1Z2dpbmdcbiAgICAgICAgICAgICAgICBkZWZpbmVNb2R1bGVJZChyZXMsIGlkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IG1vZHVsZUZhY3RvcnkoKTtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHBhcmFtZXRlciBpcyB1c2VkIGZvciBicmlkZ2UgZGVidWdnaW5nXG4gICAgICAgICAgICAgICAgZGVmaW5lTW9kdWxlSWQocmVzLCBpZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3RydWN0b3IoeyByZW1vdGVJbmZvLCBob3N0IH0pe1xuICAgICAgICB0aGlzLmluaXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxpYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yZW1vdGVJbmZvID0gcmVtb3RlSW5mbztcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICB9XG59O1xuXG5jbGFzcyBTeW5jSG9vayB7XG4gICAgb24oZm4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMuYWRkKGZuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbmNlKGZuKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5vbihmdW5jdGlvbiB3cmFwcGVyKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHNlbGYucmVtb3ZlKHdyYXBwZXIpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVtaXQoLi4uZGF0YSkge1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBpZiAodGhpcy5saXN0ZW5lcnMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKChmbik9PntcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmbiguLi5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJlbW92ZShmbikge1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5kZWxldGUoZm4pO1xuICAgIH1cbiAgICByZW1vdmVBbGwoKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHR5cGUpe1xuICAgICAgICB0aGlzLnR5cGUgPSAnJztcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBBc3luY0hvb2sgZXh0ZW5kcyBTeW5jSG9vayB7XG4gICAgZW1pdCguLi5kYXRhKSB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIGNvbnN0IGxzID0gQXJyYXkuZnJvbSh0aGlzLmxpc3RlbmVycyk7XG4gICAgICAgIGlmIChscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICBjb25zdCBjYWxsID0gKHByZXYpPT57XG4gICAgICAgICAgICAgICAgaWYgKHByZXYgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gQWJvcnQgcHJvY2Vzc1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA8IGxzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGxzW2krK10uYXBwbHkobnVsbCwgZGF0YSkpLnRoZW4oY2FsbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNhbGwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG4gICAgfVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuZnVuY3Rpb24gY2hlY2tSZXR1cm5EYXRhKG9yaWdpbmFsRGF0YSwgcmV0dXJuZWREYXRhKSB7XG4gICAgaWYgKCFpc09iamVjdChyZXR1cm5lZERhdGEpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG9yaWdpbmFsRGF0YSAhPT0gcmV0dXJuZWREYXRhKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBmb3IoY29uc3Qga2V5IGluIG9yaWdpbmFsRGF0YSl7XG4gICAgICAgICAgICBpZiAoIShrZXkgaW4gcmV0dXJuZWREYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmNsYXNzIFN5bmNXYXRlcmZhbGxIb29rIGV4dGVuZHMgU3luY0hvb2sge1xuICAgIGVtaXQoZGF0YSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgICBlcnJvcihgVGhlIGRhdGEgZm9yIHRoZSBcIiR7dGhpcy50eXBlfVwiIGhvb2sgc2hvdWxkIGJlIGFuIG9iamVjdC5gKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGZuIG9mIHRoaXMubGlzdGVuZXJzKXtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcERhdGEgPSBmbihkYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tSZXR1cm5EYXRhKGRhdGEsIHRlbXBEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gdGVtcERhdGE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmVycm9yKGBBIHBsdWdpbiByZXR1cm5lZCBhbiB1bmFjY2VwdGFibGUgdmFsdWUgZm9yIHRoZSBcIiR7dGhpcy50eXBlfVwiIHR5cGUuYCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGUpO1xuICAgICAgICAgICAgICAgIHRoaXMub25lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IodHlwZSl7XG4gICAgICAgIHN1cGVyKCksIHRoaXMub25lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH1cbn1cblxuY2xhc3MgQXN5bmNXYXRlcmZhbGxIb29rIGV4dGVuZHMgU3luY0hvb2sge1xuICAgIGVtaXQoZGF0YSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgICBlcnJvcihgVGhlIHJlc3BvbnNlIGRhdGEgZm9yIHRoZSBcIiR7dGhpcy50eXBlfVwiIGhvb2sgbXVzdCBiZSBhbiBvYmplY3QuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbHMgPSBBcnJheS5mcm9tKHRoaXMubGlzdGVuZXJzKTtcbiAgICAgICAgaWYgKGxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NFcnJvciA9IChlKT0+e1xuICAgICAgICAgICAgICAgIHdhcm4oZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmVycm9yKGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGNhbGwgPSAocHJldkRhdGEpPT57XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrUmV0dXJuRGF0YShkYXRhLCBwcmV2RGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHByZXZEYXRhO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IGxzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGxzW2krK10oZGF0YSkpLnRoZW4oY2FsbCwgcHJvY2Vzc0Vycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0Vycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmVycm9yKGBBIHBsdWdpbiByZXR1cm5lZCBhbiBpbmNvcnJlY3QgdmFsdWUgZm9yIHRoZSBcIiR7dGhpcy50eXBlfVwiIHR5cGUuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2FsbChkYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkYXRhKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IodHlwZSl7XG4gICAgICAgIHN1cGVyKCksIHRoaXMub25lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH1cbn1cblxuY2xhc3MgUGx1Z2luU3lzdGVtIHtcbiAgICBhcHBseVBsdWdpbihwbHVnaW4pIHtcbiAgICAgICAgYXNzZXJ0KGlzUGxhaW5PYmplY3QocGx1Z2luKSwgJ1BsdWdpbiBjb25maWd1cmF0aW9uIGlzIGludmFsaWQuJyk7XG4gICAgICAgIC8vIFRoZSBwbHVnaW4ncyBuYW1lIGlzIG1hbmRhdG9yeSBhbmQgbXVzdCBiZSB1bmlxdWVcbiAgICAgICAgY29uc3QgcGx1Z2luTmFtZSA9IHBsdWdpbi5uYW1lO1xuICAgICAgICBhc3NlcnQocGx1Z2luTmFtZSwgJ0EgbmFtZSBtdXN0IGJlIHByb3ZpZGVkIGJ5IHRoZSBwbHVnaW4uJyk7XG4gICAgICAgIGlmICghdGhpcy5yZWdpc3RlclBsdWdpbnNbcGx1Z2luTmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJQbHVnaW5zW3BsdWdpbk5hbWVdID0gcGx1Z2luO1xuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5saWZlY3ljbGUpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBwbHVnaW5MaWZlID0gcGx1Z2luW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbkxpZmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saWZlY3ljbGVba2V5XS5vbihwbHVnaW5MaWZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVQbHVnaW4ocGx1Z2luTmFtZSkge1xuICAgICAgICBhc3NlcnQocGx1Z2luTmFtZSwgJ0EgbmFtZSBpcyByZXF1aXJlZC4nKTtcbiAgICAgICAgY29uc3QgcGx1Z2luID0gdGhpcy5yZWdpc3RlclBsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgICAgIGFzc2VydChwbHVnaW4sIGBUaGUgcGx1Z2luIFwiJHtwbHVnaW5OYW1lfVwiIGlzIG5vdCByZWdpc3RlcmVkLmApO1xuICAgICAgICBPYmplY3Qua2V5cyhwbHVnaW4pLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgIGlmIChrZXkgIT09ICduYW1lJykge1xuICAgICAgICAgICAgICAgIHRoaXMubGlmZWN5Y2xlW2tleV0ucmVtb3ZlKHBsdWdpbltrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tc2hhZG93XG4gICAgaW5oZXJpdCh7IGxpZmVjeWNsZSwgcmVnaXN0ZXJQbHVnaW5zIH0pIHtcbiAgICAgICAgT2JqZWN0LmtleXMobGlmZWN5Y2xlKS5mb3JFYWNoKChob29rTmFtZSk9PntcbiAgICAgICAgICAgIGFzc2VydCghdGhpcy5saWZlY3ljbGVbaG9va05hbWVdLCBgVGhlIGhvb2sgXCIke2hvb2tOYW1lfVwiIGhhcyBhIGNvbmZsaWN0IGFuZCBjYW5ub3QgYmUgaW5oZXJpdGVkLmApO1xuICAgICAgICAgICAgdGhpcy5saWZlY3ljbGVbaG9va05hbWVdID0gbGlmZWN5Y2xlW2hvb2tOYW1lXTtcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5rZXlzKHJlZ2lzdGVyUGx1Z2lucykuZm9yRWFjaCgocGx1Z2luTmFtZSk9PntcbiAgICAgICAgICAgIGFzc2VydCghdGhpcy5yZWdpc3RlclBsdWdpbnNbcGx1Z2luTmFtZV0sIGBUaGUgcGx1Z2luIFwiJHtwbHVnaW5OYW1lfVwiIGhhcyBhIGNvbmZsaWN0IGFuZCBjYW5ub3QgYmUgaW5oZXJpdGVkLmApO1xuICAgICAgICAgICAgdGhpcy5hcHBseVBsdWdpbihyZWdpc3RlclBsdWdpbnNbcGx1Z2luTmFtZV0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IobGlmZWN5Y2xlKXtcbiAgICAgICAgdGhpcy5yZWdpc3RlclBsdWdpbnMgPSB7fTtcbiAgICAgICAgdGhpcy5saWZlY3ljbGUgPSBsaWZlY3ljbGU7XG4gICAgICAgIHRoaXMubGlmZWN5Y2xlS2V5cyA9IE9iamVjdC5rZXlzKGxpZmVjeWNsZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlbG9hZEFyZ3MocHJlbG9hZENvbmZpZykge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIHJlc291cmNlQ2F0ZWdvcnk6ICdzeW5jJyxcbiAgICAgICAgc2hhcmU6IHRydWUsXG4gICAgICAgIGRlcHNSZW1vdGU6IHRydWUsXG4gICAgICAgIHByZWZldGNoSW50ZXJmYWNlOiBmYWxzZVxuICAgIH0sIHByZWxvYWRDb25maWcpO1xufVxuZnVuY3Rpb24gZm9ybWF0UHJlbG9hZEFyZ3MocmVtb3RlcywgcHJlbG9hZEFyZ3MpIHtcbiAgICByZXR1cm4gcHJlbG9hZEFyZ3MubWFwKChhcmdzKT0+e1xuICAgICAgICBjb25zdCByZW1vdGVJbmZvID0gbWF0Y2hSZW1vdGUocmVtb3RlcywgYXJncy5uYW1lT3JBbGlhcyk7XG4gICAgICAgIGFzc2VydChyZW1vdGVJbmZvLCBgVW5hYmxlIHRvIHByZWxvYWQgJHthcmdzLm5hbWVPckFsaWFzfSBhcyBpdCBpcyBub3QgaW5jbHVkZWQgaW4gJHshcmVtb3RlSW5mbyAmJiBzYWZlVG9TdHJpbmcoe1xuICAgICAgICAgICAgcmVtb3RlSW5mbyxcbiAgICAgICAgICAgIHJlbW90ZXNcbiAgICAgICAgfSl9YCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZW1vdGU6IHJlbW90ZUluZm8sXG4gICAgICAgICAgICBwcmVsb2FkQ29uZmlnOiBkZWZhdWx0UHJlbG9hZEFyZ3MoYXJncylcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByZWxvYWRFeHBvc2VzKGV4cG9zZXMpIHtcbiAgICBpZiAoIWV4cG9zZXMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gZXhwb3Nlcy5tYXAoKGV4cG9zZSk9PntcbiAgICAgICAgaWYgKGV4cG9zZSA9PT0gJy4nKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhwb3NlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHBvc2Uuc3RhcnRzV2l0aCgnLi8nKSkge1xuICAgICAgICAgICAgcmV0dXJuIGV4cG9zZS5yZXBsYWNlKCcuLycsICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXhwb3NlO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gcHJlbG9hZEFzc2V0cyhyZW1vdGVJbmZvLCBob3N0LCBhc3NldHMsIC8vIEl0IGlzIHVzZWQgdG8gZGlzdGluZ3Vpc2ggcHJlbG9hZCBmcm9tIGxvYWQgcmVtb3RlIHBhcmFsbGVsIGxvYWRpbmdcbnVzZUxpbmtQcmVsb2FkID0gdHJ1ZSkge1xuICAgIGNvbnN0IHsgY3NzQXNzZXRzLCBqc0Fzc2V0c1dpdGhvdXRFbnRyeSwgZW50cnlBc3NldHMgfSA9IGFzc2V0cztcbiAgICBpZiAoaG9zdC5vcHRpb25zLmluQnJvd3Nlcikge1xuICAgICAgICBlbnRyeUFzc2V0cy5mb3JFYWNoKChhc3NldCk9PntcbiAgICAgICAgICAgIGNvbnN0IHsgbW9kdWxlSW5mbyB9ID0gYXNzZXQ7XG4gICAgICAgICAgICBjb25zdCBtb2R1bGUgPSBob3N0Lm1vZHVsZUNhY2hlLmdldChyZW1vdGVJbmZvLm5hbWUpO1xuICAgICAgICAgICAgaWYgKG1vZHVsZSkge1xuICAgICAgICAgICAgICAgIGdldFJlbW90ZUVudHJ5KHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luOiBob3N0LFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVJbmZvOiBtb2R1bGVJbmZvLFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVFbnRyeUV4cG9ydHM6IG1vZHVsZS5yZW1vdGVFbnRyeUV4cG9ydHNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2V0UmVtb3RlRW50cnkoe1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW46IGhvc3QsXG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZUluZm86IG1vZHVsZUluZm8sXG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZUVudHJ5RXhwb3J0czogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodXNlTGlua1ByZWxvYWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRBdHRycyA9IHtcbiAgICAgICAgICAgICAgICByZWw6ICdwcmVsb2FkJyxcbiAgICAgICAgICAgICAgICBhczogJ3N0eWxlJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNzc0Fzc2V0cy5mb3JFYWNoKChjc3NVcmwpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgeyBsaW5rOiBjc3NFbCwgbmVlZEF0dGFjaCB9ID0gY3JlYXRlTGluayh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogY3NzVXJsLFxuICAgICAgICAgICAgICAgICAgICBjYjogKCk9PntcbiAgICAgICAgICAgICAgICAgICAgLy8gbm9vcFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhdHRyczogZGVmYXVsdEF0dHJzLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVMaW5rSG9vazogKHVybCwgYXR0cnMpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBob3N0LmxvYWRlckhvb2subGlmZWN5Y2xlLmNyZWF0ZUxpbmsuZW1pdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMgaW5zdGFuY2VvZiBIVE1MTGlua0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGNzc0VsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdEF0dHJzID0ge1xuICAgICAgICAgICAgICAgIHJlbDogJ3N0eWxlc2hlZXQnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0L2NzcydcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjc3NBc3NldHMuZm9yRWFjaCgoY3NzVXJsKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbGluazogY3NzRWwsIG5lZWRBdHRhY2ggfSA9IGNyZWF0ZUxpbmsoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IGNzc1VybCxcbiAgICAgICAgICAgICAgICAgICAgY2I6ICgpPT57XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IGRlZmF1bHRBdHRycyxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlTGlua0hvb2s6ICh1cmwsIGF0dHJzKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gaG9zdC5sb2FkZXJIb29rLmxpZmVjeWNsZS5jcmVhdGVMaW5rLmVtaXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzIGluc3RhbmNlb2YgSFRNTExpbmtFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbmVlZERlbGV0ZUxpbms6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGNzc0VsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1c2VMaW5rUHJlbG9hZCkge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdEF0dHJzID0ge1xuICAgICAgICAgICAgICAgIHJlbDogJ3ByZWxvYWQnLFxuICAgICAgICAgICAgICAgIGFzOiAnc2NyaXB0J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGpzQXNzZXRzV2l0aG91dEVudHJ5LmZvckVhY2goKGpzVXJsKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbGluazogbGlua0VsLCBuZWVkQXR0YWNoIH0gPSBjcmVhdGVMaW5rKHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBqc1VybCxcbiAgICAgICAgICAgICAgICAgICAgY2I6ICgpPT57XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IGRlZmF1bHRBdHRycyxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlTGlua0hvb2s6ICh1cmwsIGF0dHJzKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gaG9zdC5sb2FkZXJIb29rLmxpZmVjeWNsZS5jcmVhdGVMaW5rLmVtaXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzIGluc3RhbmNlb2YgSFRNTExpbmtFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rRWwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0QXR0cnMgPSB7XG4gICAgICAgICAgICAgICAgZmV0Y2hwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgICAgICAgICAgIHR5cGU6IChyZW1vdGVJbmZvID09IG51bGwgPyB2b2lkIDAgOiByZW1vdGVJbmZvLnR5cGUpID09PSAnbW9kdWxlJyA/ICdtb2R1bGUnIDogJ3RleHQvamF2YXNjcmlwdCdcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBqc0Fzc2V0c1dpdGhvdXRFbnRyeS5mb3JFYWNoKChqc1VybCk9PntcbiAgICAgICAgICAgICAgICBjb25zdCB7IHNjcmlwdDogc2NyaXB0RWwsIG5lZWRBdHRhY2ggfSA9IGNyZWF0ZVNjcmlwdCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDoganNVcmwsXG4gICAgICAgICAgICAgICAgICAgIGNiOiAoKT0+e1xuICAgICAgICAgICAgICAgICAgICAvLyBub29wXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiBkZWZhdWx0QXR0cnMsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVNjcmlwdEhvb2s6ICh1cmwsIGF0dHJzKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gaG9zdC5sb2FkZXJIb29rLmxpZmVjeWNsZS5jcmVhdGVTY3JpcHQuZW1pdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMgaW5zdGFuY2VvZiBIVE1MU2NyaXB0RWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG5lZWREZWxldGVTY3JpcHQ6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0RWwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFzc2lnblJlbW90ZUluZm8ocmVtb3RlSW5mbywgcmVtb3RlU25hcHNob3QpIHtcbiAgICBjb25zdCByZW1vdGVFbnRyeUluZm8gPSBnZXRSZW1vdGVFbnRyeUluZm9Gcm9tU25hcHNob3QocmVtb3RlU25hcHNob3QpO1xuICAgIGlmICghcmVtb3RlRW50cnlJbmZvLnVybCkge1xuICAgICAgICBlcnJvcihgVGhlIGF0dHJpYnV0ZSByZW1vdGVFbnRyeSBvZiAke3JlbW90ZUluZm8ubmFtZX0gbXVzdCBub3QgYmUgdW5kZWZpbmVkLmApO1xuICAgIH1cbiAgICBsZXQgZW50cnlVcmwgPSBnZXRSZXNvdXJjZVVybChyZW1vdGVTbmFwc2hvdCwgcmVtb3RlRW50cnlJbmZvLnVybCk7XG4gICAgaWYgKCFpc0Jyb3dzZXJFbnYoKSAmJiAhZW50cnlVcmwuc3RhcnRzV2l0aCgnaHR0cCcpKSB7XG4gICAgICAgIGVudHJ5VXJsID0gYGh0dHBzOiR7ZW50cnlVcmx9YDtcbiAgICB9XG4gICAgcmVtb3RlSW5mby50eXBlID0gcmVtb3RlRW50cnlJbmZvLnR5cGU7XG4gICAgcmVtb3RlSW5mby5lbnRyeUdsb2JhbE5hbWUgPSByZW1vdGVFbnRyeUluZm8uZ2xvYmFsTmFtZTtcbiAgICByZW1vdGVJbmZvLmVudHJ5ID0gZW50cnlVcmw7XG4gICAgcmVtb3RlSW5mby52ZXJzaW9uID0gcmVtb3RlU25hcHNob3QudmVyc2lvbjtcbiAgICByZW1vdGVJbmZvLmJ1aWxkVmVyc2lvbiA9IHJlbW90ZVNuYXBzaG90LmJ1aWxkVmVyc2lvbjtcbn1cbmZ1bmN0aW9uIHNuYXBzaG90UGx1Z2luKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6ICdzbmFwc2hvdC1wbHVnaW4nLFxuICAgICAgICBhc3luYyBhZnRlclJlc29sdmUgKGFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcmVtb3RlLCBwa2dOYW1lT3JBbGlhcywgZXhwb3NlLCBvcmlnaW4sIHJlbW90ZUluZm8gfSA9IGFyZ3M7XG4gICAgICAgICAgICBpZiAoIWlzUmVtb3RlSW5mb1dpdGhFbnRyeShyZW1vdGUpIHx8ICFpc1B1cmVSZW1vdGVFbnRyeShyZW1vdGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyByZW1vdGVTbmFwc2hvdCwgZ2xvYmFsU25hcHNob3QgfSA9IGF3YWl0IG9yaWdpbi5zbmFwc2hvdEhhbmRsZXIubG9hZFJlbW90ZVNuYXBzaG90SW5mbyhyZW1vdGUpO1xuICAgICAgICAgICAgICAgIGFzc2lnblJlbW90ZUluZm8ocmVtb3RlSW5mbywgcmVtb3RlU25hcHNob3QpO1xuICAgICAgICAgICAgICAgIC8vIHByZWxvYWRpbmcgYXNzZXRzXG4gICAgICAgICAgICAgICAgY29uc3QgcHJlbG9hZE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZSxcbiAgICAgICAgICAgICAgICAgICAgcHJlbG9hZENvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZU9yQWxpYXM6IHBrZ05hbWVPckFsaWFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3NlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cG9zZVxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlQ2F0ZWdvcnk6ICdzeW5jJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcHNSZW1vdGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGFzc2V0cyA9IGF3YWl0IG9yaWdpbi5yZW1vdGVIYW5kbGVyLmhvb2tzLmxpZmVjeWNsZS5nZW5lcmF0ZVByZWxvYWRBc3NldHMuZW1pdCh7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbixcbiAgICAgICAgICAgICAgICAgICAgcHJlbG9hZE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZUluZm8sXG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlU25hcHNob3QsXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFNuYXBzaG90XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGFzc2V0cykge1xuICAgICAgICAgICAgICAgICAgICBwcmVsb2FkQXNzZXRzKHJlbW90ZUluZm8sIG9yaWdpbiwgYXNzZXRzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYXJncywge1xuICAgICAgICAgICAgICAgICAgICByZW1vdGVTbmFwc2hvdFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vLyBuYW1lXG4vLyBuYW1lOnZlcnNpb25cbmZ1bmN0aW9uIHNwbGl0SWQoaWQpIHtcbiAgICBjb25zdCBzcGxpdEluZm8gPSBpZC5zcGxpdCgnOicpO1xuICAgIGlmIChzcGxpdEluZm8ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBzcGxpdEluZm9bMF0sXG4gICAgICAgICAgICB2ZXJzaW9uOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHNwbGl0SW5mby5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHNwbGl0SW5mb1swXSxcbiAgICAgICAgICAgIHZlcnNpb246IHNwbGl0SW5mb1sxXVxuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBzcGxpdEluZm9bMV0sXG4gICAgICAgICAgICB2ZXJzaW9uOiBzcGxpdEluZm9bMl1cbiAgICAgICAgfTtcbiAgICB9XG59XG4vLyBUcmF2ZXJzZSBhbGwgbm9kZXMgaW4gbW9kdWxlSW5mbyBhbmQgdHJhdmVyc2UgdGhlIGVudGlyZSBzbmFwc2hvdFxuZnVuY3Rpb24gdHJhdmVyc2VNb2R1bGVJbmZvKGdsb2JhbFNuYXBzaG90LCByZW1vdGVJbmZvLCB0cmF2ZXJzZSwgaXNSb290LCBtZW1vID0ge30sIHJlbW90ZVNuYXBzaG90KSB7XG4gICAgY29uc3QgaWQgPSBnZXRGTUlkKHJlbW90ZUluZm8pO1xuICAgIGNvbnN0IHsgdmFsdWU6IHNuYXBzaG90VmFsdWUgfSA9IGdldEluZm9XaXRob3V0VHlwZShnbG9iYWxTbmFwc2hvdCwgaWQpO1xuICAgIGNvbnN0IGVmZmVjdGl2ZVJlbW90ZVNuYXBzaG90ID0gcmVtb3RlU25hcHNob3QgfHwgc25hcHNob3RWYWx1ZTtcbiAgICBpZiAoZWZmZWN0aXZlUmVtb3RlU25hcHNob3QgJiYgIWlzTWFuaWZlc3RQcm92aWRlcihlZmZlY3RpdmVSZW1vdGVTbmFwc2hvdCkpIHtcbiAgICAgICAgdHJhdmVyc2UoZWZmZWN0aXZlUmVtb3RlU25hcHNob3QsIHJlbW90ZUluZm8sIGlzUm9vdCk7XG4gICAgICAgIGlmIChlZmZlY3RpdmVSZW1vdGVTbmFwc2hvdC5yZW1vdGVzSW5mbykge1xuICAgICAgICAgICAgY29uc3QgcmVtb3RlS2V5cyA9IE9iamVjdC5rZXlzKGVmZmVjdGl2ZVJlbW90ZVNuYXBzaG90LnJlbW90ZXNJbmZvKTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHJlbW90ZUtleXMpe1xuICAgICAgICAgICAgICAgIGlmIChtZW1vW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1lbW9ba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3ViUmVtb3RlSW5mbyA9IHNwbGl0SWQoa2V5KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZW1vdGVWYWx1ZSA9IGVmZmVjdGl2ZVJlbW90ZVNuYXBzaG90LnJlbW90ZXNJbmZvW2tleV07XG4gICAgICAgICAgICAgICAgdHJhdmVyc2VNb2R1bGVJbmZvKGdsb2JhbFNuYXBzaG90LCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHN1YlJlbW90ZUluZm8ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogcmVtb3RlVmFsdWUubWF0Y2hlZFZlcnNpb25cbiAgICAgICAgICAgICAgICB9LCB0cmF2ZXJzZSwgZmFsc2UsIG1lbW8sIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxpbmVzLXBlci1mdW5jdGlvblxuZnVuY3Rpb24gZ2VuZXJhdGVQcmVsb2FkQXNzZXRzKG9yaWdpbiwgcHJlbG9hZE9wdGlvbnMsIHJlbW90ZSwgZ2xvYmFsU25hcHNob3QsIHJlbW90ZVNuYXBzaG90KSB7XG4gICAgY29uc3QgY3NzQXNzZXRzID0gW107XG4gICAgY29uc3QganNBc3NldHMgPSBbXTtcbiAgICBjb25zdCBlbnRyeUFzc2V0cyA9IFtdO1xuICAgIGNvbnN0IGxvYWRlZFNoYXJlZEpzQXNzZXRzID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGxvYWRlZFNoYXJlZENzc0Fzc2V0cyA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IG9yaWdpbjtcbiAgICBjb25zdCB7IHByZWxvYWRDb25maWc6IHJvb3RQcmVsb2FkQ29uZmlnIH0gPSBwcmVsb2FkT3B0aW9ucztcbiAgICBjb25zdCB7IGRlcHNSZW1vdGUgfSA9IHJvb3RQcmVsb2FkQ29uZmlnO1xuICAgIGNvbnN0IG1lbW8gPSB7fTtcbiAgICB0cmF2ZXJzZU1vZHVsZUluZm8oZ2xvYmFsU25hcHNob3QsIHJlbW90ZSwgKG1vZHVsZUluZm9TbmFwc2hvdCwgcmVtb3RlSW5mbywgaXNSb290KT0+e1xuICAgICAgICBsZXQgcHJlbG9hZENvbmZpZztcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgcHJlbG9hZENvbmZpZyA9IHJvb3RQcmVsb2FkQ29uZmlnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGVwc1JlbW90ZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYXJyYXktY2FsbGJhY2stcmV0dXJuXG4gICAgICAgICAgICAgICAgY29uc3QgZmluZFByZWxvYWRDb25maWcgPSBkZXBzUmVtb3RlLmZpbmQoKHJlbW90ZUNvbmZpZyk9PntcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW90ZUNvbmZpZy5uYW1lT3JBbGlhcyA9PT0gcmVtb3RlSW5mby5uYW1lIHx8IHJlbW90ZUNvbmZpZy5uYW1lT3JBbGlhcyA9PT0gcmVtb3RlSW5mby5hbGlhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghZmluZFByZWxvYWRDb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmVsb2FkQ29uZmlnID0gZGVmYXVsdFByZWxvYWRBcmdzKGZpbmRQcmVsb2FkQ29uZmlnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVwc1JlbW90ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHByZWxvYWRDb25maWcgPSByb290UHJlbG9hZENvbmZpZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlbW90ZUVudHJ5VXJsID0gZ2V0UmVzb3VyY2VVcmwobW9kdWxlSW5mb1NuYXBzaG90LCBnZXRSZW1vdGVFbnRyeUluZm9Gcm9tU25hcHNob3QobW9kdWxlSW5mb1NuYXBzaG90KS51cmwpO1xuICAgICAgICBpZiAocmVtb3RlRW50cnlVcmwpIHtcbiAgICAgICAgICAgIGVudHJ5QXNzZXRzLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlbW90ZUluZm8ubmFtZSxcbiAgICAgICAgICAgICAgICBtb2R1bGVJbmZvOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlbW90ZUluZm8ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZW50cnk6IHJlbW90ZUVudHJ5VXJsLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncmVtb3RlRW50cnlUeXBlJyBpbiBtb2R1bGVJbmZvU25hcHNob3QgPyBtb2R1bGVJbmZvU25hcHNob3QucmVtb3RlRW50cnlUeXBlIDogJ2dsb2JhbCcsXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5R2xvYmFsTmFtZTogJ2dsb2JhbE5hbWUnIGluIG1vZHVsZUluZm9TbmFwc2hvdCA/IG1vZHVsZUluZm9TbmFwc2hvdC5nbG9iYWxOYW1lIDogcmVtb3RlSW5mby5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBzaGFyZVNjb3BlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogJ3ZlcnNpb24nIGluIG1vZHVsZUluZm9TbmFwc2hvdCA/IG1vZHVsZUluZm9TbmFwc2hvdC52ZXJzaW9uIDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cmw6IHJlbW90ZUVudHJ5VXJsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbW9kdWxlQXNzZXRzSW5mbyA9ICdtb2R1bGVzJyBpbiBtb2R1bGVJbmZvU25hcHNob3QgPyBtb2R1bGVJbmZvU25hcHNob3QubW9kdWxlcyA6IFtdO1xuICAgICAgICBjb25zdCBub3JtYWxpemVkUHJlbG9hZEV4cG9zZXMgPSBub3JtYWxpemVQcmVsb2FkRXhwb3NlcyhwcmVsb2FkQ29uZmlnLmV4cG9zZXMpO1xuICAgICAgICBpZiAobm9ybWFsaXplZFByZWxvYWRFeHBvc2VzLmxlbmd0aCAmJiAnbW9kdWxlcycgaW4gbW9kdWxlSW5mb1NuYXBzaG90KSB7XG4gICAgICAgICAgICB2YXIgX21vZHVsZUluZm9TbmFwc2hvdF9tb2R1bGVzO1xuICAgICAgICAgICAgbW9kdWxlQXNzZXRzSW5mbyA9IG1vZHVsZUluZm9TbmFwc2hvdCA9PSBudWxsID8gdm9pZCAwIDogKF9tb2R1bGVJbmZvU25hcHNob3RfbW9kdWxlcyA9IG1vZHVsZUluZm9TbmFwc2hvdC5tb2R1bGVzKSA9PSBudWxsID8gdm9pZCAwIDogX21vZHVsZUluZm9TbmFwc2hvdF9tb2R1bGVzLnJlZHVjZSgoYXNzZXRzLCBtb2R1bGVBc3NldEluZm8pPT57XG4gICAgICAgICAgICAgICAgaWYgKChub3JtYWxpemVkUHJlbG9hZEV4cG9zZXMgPT0gbnVsbCA/IHZvaWQgMCA6IG5vcm1hbGl6ZWRQcmVsb2FkRXhwb3Nlcy5pbmRleE9mKG1vZHVsZUFzc2V0SW5mby5tb2R1bGVOYW1lKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0cy5wdXNoKG1vZHVsZUFzc2V0SW5mbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhc3NldHM7XG4gICAgICAgICAgICB9LCBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlQXNzZXRzKGFzc2V0cykge1xuICAgICAgICAgICAgY29uc3QgYXNzZXRzUmVzID0gYXNzZXRzLm1hcCgoYXNzZXQpPT5nZXRSZXNvdXJjZVVybChtb2R1bGVJbmZvU25hcHNob3QsIGFzc2V0KSk7XG4gICAgICAgICAgICBpZiAocHJlbG9hZENvbmZpZy5maWx0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXNzZXRzUmVzLmZpbHRlcihwcmVsb2FkQ29uZmlnLmZpbHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXNzZXRzUmVzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2R1bGVBc3NldHNJbmZvKSB7XG4gICAgICAgICAgICBjb25zdCBhc3NldHNMZW5ndGggPSBtb2R1bGVBc3NldHNJbmZvLmxlbmd0aDtcbiAgICAgICAgICAgIGZvcihsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFzc2V0c0xlbmd0aDsgaW5kZXgrKyl7XG4gICAgICAgICAgICAgICAgY29uc3QgYXNzZXRzSW5mbyA9IG1vZHVsZUFzc2V0c0luZm9baW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4cG9zZUZ1bGxQYXRoID0gYCR7cmVtb3RlSW5mby5uYW1lfS8ke2Fzc2V0c0luZm8ubW9kdWxlTmFtZX1gO1xuICAgICAgICAgICAgICAgIG9yaWdpbi5yZW1vdGVIYW5kbGVyLmhvb2tzLmxpZmVjeWNsZS5oYW5kbGVQcmVsb2FkTW9kdWxlLmVtaXQoe1xuICAgICAgICAgICAgICAgICAgICBpZDogYXNzZXRzSW5mby5tb2R1bGVOYW1lID09PSAnLicgPyByZW1vdGVJbmZvLm5hbWUgOiBleHBvc2VGdWxsUGF0aCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVtb3RlSW5mby5uYW1lLFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVTbmFwc2hvdDogbW9kdWxlSW5mb1NuYXBzaG90LFxuICAgICAgICAgICAgICAgICAgICBwcmVsb2FkQ29uZmlnLFxuICAgICAgICAgICAgICAgICAgICByZW1vdGU6IHJlbW90ZUluZm8sXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZWxvYWRlZCA9IGdldFByZWxvYWRlZChleHBvc2VGdWxsUGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHByZWxvYWRlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByZWxvYWRDb25maWcucmVzb3VyY2VDYXRlZ29yeSA9PT0gJ2FsbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzQXNzZXRzLnB1c2goLi4uaGFuZGxlQXNzZXRzKGFzc2V0c0luZm8uYXNzZXRzLmNzcy5hc3luYykpO1xuICAgICAgICAgICAgICAgICAgICBjc3NBc3NldHMucHVzaCguLi5oYW5kbGVBc3NldHMoYXNzZXRzSW5mby5hc3NldHMuY3NzLnN5bmMpKTtcbiAgICAgICAgICAgICAgICAgICAganNBc3NldHMucHVzaCguLi5oYW5kbGVBc3NldHMoYXNzZXRzSW5mby5hc3NldHMuanMuYXN5bmMpKTtcbiAgICAgICAgICAgICAgICAgICAganNBc3NldHMucHVzaCguLi5oYW5kbGVBc3NldHMoYXNzZXRzSW5mby5hc3NldHMuanMuc3luYykpO1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByZWxvYWRDb25maWcucmVzb3VyY2VDYXRlZ29yeSA9ICdzeW5jJykge1xuICAgICAgICAgICAgICAgICAgICBjc3NBc3NldHMucHVzaCguLi5oYW5kbGVBc3NldHMoYXNzZXRzSW5mby5hc3NldHMuY3NzLnN5bmMpKTtcbiAgICAgICAgICAgICAgICAgICAganNBc3NldHMucHVzaCguLi5oYW5kbGVBc3NldHMoYXNzZXRzSW5mby5hc3NldHMuanMuc3luYykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXRQcmVsb2FkZWQoZXhwb3NlRnVsbFBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgdHJ1ZSwgbWVtbywgcmVtb3RlU25hcHNob3QpO1xuICAgIGlmIChyZW1vdGVTbmFwc2hvdC5zaGFyZWQpIHtcbiAgICAgICAgY29uc3QgY29sbGVjdFNoYXJlZEFzc2V0cyA9IChzaGFyZUluZm8sIHNuYXBzaG90U2hhcmVkKT0+e1xuICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJlZFNoYXJlZCA9IGdldFJlZ2lzdGVyZWRTaGFyZShvcmlnaW4uc2hhcmVTY29wZU1hcCwgc25hcHNob3RTaGFyZWQuc2hhcmVkTmFtZSwgc2hhcmVJbmZvLCBvcmlnaW4uc2hhcmVkSGFuZGxlci5ob29rcy5saWZlY3ljbGUucmVzb2x2ZVNoYXJlKTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBnbG9iYWwgc2hhcmUgZG9lcyBub3QgZXhpc3QsIG9yIHRoZSBsaWIgZnVuY3Rpb24gZG9lcyBub3QgZXhpc3QsIGl0IG1lYW5zIHRoYXQgdGhlIHNoYXJlZCBoYXMgbm90IGJlZW4gbG9hZGVkIHlldCBhbmQgY2FuIGJlIHByZWxvYWRlZC5cbiAgICAgICAgICAgIGlmIChyZWdpc3RlcmVkU2hhcmVkICYmIHR5cGVvZiByZWdpc3RlcmVkU2hhcmVkLmxpYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHNuYXBzaG90U2hhcmVkLmFzc2V0cy5qcy5zeW5jLmZvckVhY2goKGFzc2V0KT0+e1xuICAgICAgICAgICAgICAgICAgICBsb2FkZWRTaGFyZWRKc0Fzc2V0cy5hZGQoYXNzZXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNuYXBzaG90U2hhcmVkLmFzc2V0cy5jc3Muc3luYy5mb3JFYWNoKChhc3NldCk9PntcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVkU2hhcmVkQ3NzQXNzZXRzLmFkZChhc3NldCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJlbW90ZVNuYXBzaG90LnNoYXJlZC5mb3JFYWNoKChzaGFyZWQpPT57XG4gICAgICAgICAgICB2YXIgX29wdGlvbnNfc2hhcmVkO1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVJbmZvcyA9IChfb3B0aW9uc19zaGFyZWQgPSBvcHRpb25zLnNoYXJlZCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9vcHRpb25zX3NoYXJlZFtzaGFyZWQuc2hhcmVkTmFtZV07XG4gICAgICAgICAgICBpZiAoIXNoYXJlSW5mb3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBubyB2ZXJzaW9uLCBwcmVsb2FkIGFsbCBzaGFyZWRcbiAgICAgICAgICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSBzaGFyZWQudmVyc2lvbiA/IHNoYXJlSW5mb3MuZmluZCgocyk9PnMudmVyc2lvbiA9PT0gc2hhcmVkLnZlcnNpb24pIDogc2hhcmVJbmZvcztcbiAgICAgICAgICAgIGlmICghc2hhcmVkT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGFycmF5U2hhcmVJbmZvID0gYXJyYXlPcHRpb25zKHNoYXJlZE9wdGlvbnMpO1xuICAgICAgICAgICAgYXJyYXlTaGFyZUluZm8uZm9yRWFjaCgocyk9PntcbiAgICAgICAgICAgICAgICBjb2xsZWN0U2hhcmVkQXNzZXRzKHMsIHNoYXJlZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG5lZWRQcmVsb2FkSnNBc3NldHMgPSBqc0Fzc2V0cy5maWx0ZXIoKGFzc2V0KT0+IWxvYWRlZFNoYXJlZEpzQXNzZXRzLmhhcyhhc3NldCkpO1xuICAgIGNvbnN0IG5lZWRQcmVsb2FkQ3NzQXNzZXRzID0gY3NzQXNzZXRzLmZpbHRlcigoYXNzZXQpPT4hbG9hZGVkU2hhcmVkQ3NzQXNzZXRzLmhhcyhhc3NldCkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNzc0Fzc2V0czogbmVlZFByZWxvYWRDc3NBc3NldHMsXG4gICAgICAgIGpzQXNzZXRzV2l0aG91dEVudHJ5OiBuZWVkUHJlbG9hZEpzQXNzZXRzLFxuICAgICAgICBlbnRyeUFzc2V0c1xuICAgIH07XG59XG5jb25zdCBnZW5lcmF0ZVByZWxvYWRBc3NldHNQbHVnaW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiAnZ2VuZXJhdGUtcHJlbG9hZC1hc3NldHMtcGx1Z2luJyxcbiAgICAgICAgYXN5bmMgZ2VuZXJhdGVQcmVsb2FkQXNzZXRzIChhcmdzKSB7XG4gICAgICAgICAgICBjb25zdCB7IG9yaWdpbiwgcHJlbG9hZE9wdGlvbnMsIHJlbW90ZUluZm8sIHJlbW90ZSwgZ2xvYmFsU25hcHNob3QsIHJlbW90ZVNuYXBzaG90IH0gPSBhcmdzO1xuICAgICAgICAgICAgaWYgKGlzUmVtb3RlSW5mb1dpdGhFbnRyeShyZW1vdGUpICYmIGlzUHVyZVJlbW90ZUVudHJ5KHJlbW90ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjc3NBc3NldHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBqc0Fzc2V0c1dpdGhvdXRFbnRyeTogW10sXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5QXNzZXRzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVtb3RlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiByZW1vdGUuZW50cnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlSW5mbzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiByZW1vdGVJbmZvLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5OiByZW1vdGUuZW50cnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHJlbW90ZUluZm8udHlwZSB8fCAnZ2xvYmFsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnlHbG9iYWxOYW1lOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVTY29wZTogJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXNzaWduUmVtb3RlSW5mbyhyZW1vdGVJbmZvLCByZW1vdGVTbmFwc2hvdCk7XG4gICAgICAgICAgICBjb25zdCBhc3NldHMgPSBnZW5lcmF0ZVByZWxvYWRBc3NldHMob3JpZ2luLCBwcmVsb2FkT3B0aW9ucywgcmVtb3RlSW5mbywgZ2xvYmFsU25hcHNob3QsIHJlbW90ZVNuYXBzaG90KTtcbiAgICAgICAgICAgIHJldHVybiBhc3NldHM7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuZnVuY3Rpb24gZ2V0R2xvYmFsUmVtb3RlSW5mbyhtb2R1bGVJbmZvLCBvcmlnaW4pIHtcbiAgICBjb25zdCBob3N0R2xvYmFsU25hcHNob3QgPSBnZXRHbG9iYWxTbmFwc2hvdEluZm9CeU1vZHVsZUluZm8oe1xuICAgICAgICBuYW1lOiBvcmlnaW4ub3B0aW9ucy5uYW1lLFxuICAgICAgICB2ZXJzaW9uOiBvcmlnaW4ub3B0aW9ucy52ZXJzaW9uXG4gICAgfSk7XG4gICAgLy8gZ2V0IHJlbW90ZSBkZXRhaWwgaW5mbyBmcm9tIGdsb2JhbFxuICAgIGNvbnN0IGdsb2JhbFJlbW90ZUluZm8gPSBob3N0R2xvYmFsU25hcHNob3QgJiYgJ3JlbW90ZXNJbmZvJyBpbiBob3N0R2xvYmFsU25hcHNob3QgJiYgaG9zdEdsb2JhbFNuYXBzaG90LnJlbW90ZXNJbmZvICYmIGdldEluZm9XaXRob3V0VHlwZShob3N0R2xvYmFsU25hcHNob3QucmVtb3Rlc0luZm8sIG1vZHVsZUluZm8ubmFtZSkudmFsdWU7XG4gICAgaWYgKGdsb2JhbFJlbW90ZUluZm8gJiYgZ2xvYmFsUmVtb3RlSW5mby5tYXRjaGVkVmVyc2lvbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaG9zdEdsb2JhbFNuYXBzaG90LFxuICAgICAgICAgICAgZ2xvYmFsU25hcHNob3Q6IGdldEdsb2JhbFNuYXBzaG90KCksXG4gICAgICAgICAgICByZW1vdGVTbmFwc2hvdDogZ2V0R2xvYmFsU25hcHNob3RJbmZvQnlNb2R1bGVJbmZvKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBtb2R1bGVJbmZvLm5hbWUsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogZ2xvYmFsUmVtb3RlSW5mby5tYXRjaGVkVmVyc2lvblxuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaG9zdEdsb2JhbFNuYXBzaG90OiB1bmRlZmluZWQsXG4gICAgICAgIGdsb2JhbFNuYXBzaG90OiBnZXRHbG9iYWxTbmFwc2hvdCgpLFxuICAgICAgICByZW1vdGVTbmFwc2hvdDogZ2V0R2xvYmFsU25hcHNob3RJbmZvQnlNb2R1bGVJbmZvKHtcbiAgICAgICAgICAgIG5hbWU6IG1vZHVsZUluZm8ubmFtZSxcbiAgICAgICAgICAgIHZlcnNpb246ICd2ZXJzaW9uJyBpbiBtb2R1bGVJbmZvID8gbW9kdWxlSW5mby52ZXJzaW9uIDogdW5kZWZpbmVkXG4gICAgICAgIH0pXG4gICAgfTtcbn1cbmNsYXNzIFNuYXBzaG90SGFuZGxlciB7XG4gICAgYXN5bmMgbG9hZFNuYXBzaG90KG1vZHVsZUluZm8pIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzLkhvc3RJbnN0YW5jZTtcbiAgICAgICAgY29uc3QgeyBob3N0R2xvYmFsU25hcHNob3QsIHJlbW90ZVNuYXBzaG90LCBnbG9iYWxTbmFwc2hvdCB9ID0gdGhpcy5nZXRHbG9iYWxSZW1vdGVJbmZvKG1vZHVsZUluZm8pO1xuICAgICAgICBjb25zdCB7IHJlbW90ZVNuYXBzaG90OiBnbG9iYWxSZW1vdGVTbmFwc2hvdCwgZ2xvYmFsU25hcHNob3Q6IGdsb2JhbFNuYXBzaG90UmVzIH0gPSBhd2FpdCB0aGlzLmhvb2tzLmxpZmVjeWNsZS5sb2FkU25hcHNob3QuZW1pdCh7XG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgbW9kdWxlSW5mbyxcbiAgICAgICAgICAgIGhvc3RHbG9iYWxTbmFwc2hvdCxcbiAgICAgICAgICAgIHJlbW90ZVNuYXBzaG90LFxuICAgICAgICAgICAgZ2xvYmFsU25hcHNob3RcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZW1vdGVTbmFwc2hvdDogZ2xvYmFsUmVtb3RlU25hcHNob3QsXG4gICAgICAgICAgICBnbG9iYWxTbmFwc2hvdDogZ2xvYmFsU25hcHNob3RSZXNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1saW5lcy1wZXItZnVuY3Rpb25cbiAgICBhc3luYyBsb2FkUmVtb3RlU25hcHNob3RJbmZvKG1vZHVsZUluZm8pIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzLkhvc3RJbnN0YW5jZTtcbiAgICAgICAgYXdhaXQgdGhpcy5ob29rcy5saWZlY3ljbGUuYmVmb3JlTG9hZFJlbW90ZVNuYXBzaG90LmVtaXQoe1xuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIG1vZHVsZUluZm9cbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBob3N0U25hcHNob3QgPSBnZXRHbG9iYWxTbmFwc2hvdEluZm9CeU1vZHVsZUluZm8oe1xuICAgICAgICAgICAgbmFtZTogdGhpcy5Ib3N0SW5zdGFuY2Uub3B0aW9ucy5uYW1lLFxuICAgICAgICAgICAgdmVyc2lvbjogdGhpcy5Ib3N0SW5zdGFuY2Uub3B0aW9ucy52ZXJzaW9uXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWhvc3RTbmFwc2hvdCkge1xuICAgICAgICAgICAgaG9zdFNuYXBzaG90ID0ge1xuICAgICAgICAgICAgICAgIHZlcnNpb246IHRoaXMuSG9zdEluc3RhbmNlLm9wdGlvbnMudmVyc2lvbiB8fCAnJyxcbiAgICAgICAgICAgICAgICByZW1vdGVFbnRyeTogJycsXG4gICAgICAgICAgICAgICAgcmVtb3Rlc0luZm86IHt9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYWRkR2xvYmFsU25hcHNob3Qoe1xuICAgICAgICAgICAgICAgIFt0aGlzLkhvc3RJbnN0YW5jZS5vcHRpb25zLm5hbWVdOiBob3N0U25hcHNob3RcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIEluIGR5bmFtaWMgbG9hZFJlbW90ZSBzY2VuYXJpb3MsIGluY29tcGxldGUgcmVtb3Rlc0luZm8gZGVsaXZlcnkgbWF5IG9jY3VyLiBJbiBzdWNoIGNhc2VzLCB0aGUgcmVtb3Rlc0luZm8gaW4gdGhlIGhvc3QgbmVlZHMgdG8gYmUgY29tcGxldGVkIGluIHRoZSBzbmFwc2hvdCBhdCBydW50aW1lLlxuICAgICAgICAvLyBUaGlzIGVuc3VyZXMgdGhlIHNuYXBzaG90J3MgaW50ZWdyaXR5IGFuZCBoZWxwcyB0aGUgY2hyb21lIHBsdWdpbiBjb3JyZWN0bHkgaWRlbnRpZnkgYWxsIHByb2R1Y2VyIG1vZHVsZXMsIGVuc3VyaW5nIHRoYXQgcHJveHlhYmxlIHByb2R1Y2VyIG1vZHVsZXMgd2lsbCBub3QgYmUgbWlzc2luZy5cbiAgICAgICAgaWYgKGhvc3RTbmFwc2hvdCAmJiAncmVtb3Rlc0luZm8nIGluIGhvc3RTbmFwc2hvdCAmJiAhZ2V0SW5mb1dpdGhvdXRUeXBlKGhvc3RTbmFwc2hvdC5yZW1vdGVzSW5mbywgbW9kdWxlSW5mby5uYW1lKS52YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCd2ZXJzaW9uJyBpbiBtb2R1bGVJbmZvIHx8ICdlbnRyeScgaW4gbW9kdWxlSW5mbykge1xuICAgICAgICAgICAgICAgIGhvc3RTbmFwc2hvdC5yZW1vdGVzSW5mbyA9IF9leHRlbmRzKHt9LCBob3N0U25hcHNob3QgPT0gbnVsbCA/IHZvaWQgMCA6IGhvc3RTbmFwc2hvdC5yZW1vdGVzSW5mbywge1xuICAgICAgICAgICAgICAgICAgICBbbW9kdWxlSW5mby5uYW1lXToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFZlcnNpb246ICd2ZXJzaW9uJyBpbiBtb2R1bGVJbmZvID8gbW9kdWxlSW5mby52ZXJzaW9uIDogbW9kdWxlSW5mby5lbnRyeVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBob3N0R2xvYmFsU25hcHNob3QsIHJlbW90ZVNuYXBzaG90LCBnbG9iYWxTbmFwc2hvdCB9ID0gdGhpcy5nZXRHbG9iYWxSZW1vdGVJbmZvKG1vZHVsZUluZm8pO1xuICAgICAgICBjb25zdCB7IHJlbW90ZVNuYXBzaG90OiBnbG9iYWxSZW1vdGVTbmFwc2hvdCwgZ2xvYmFsU25hcHNob3Q6IGdsb2JhbFNuYXBzaG90UmVzIH0gPSBhd2FpdCB0aGlzLmhvb2tzLmxpZmVjeWNsZS5sb2FkU25hcHNob3QuZW1pdCh7XG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgbW9kdWxlSW5mbyxcbiAgICAgICAgICAgIGhvc3RHbG9iYWxTbmFwc2hvdCxcbiAgICAgICAgICAgIHJlbW90ZVNuYXBzaG90LFxuICAgICAgICAgICAgZ2xvYmFsU25hcHNob3RcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGdsb2JhbCBzbmFwc2hvdCBpbmNsdWRlcyBtYW5pZmVzdCBvciBtb2R1bGUgaW5mbyBpbmNsdWRlcyBtYW5pZmVzdFxuICAgICAgICBpZiAoZ2xvYmFsUmVtb3RlU25hcHNob3QpIHtcbiAgICAgICAgICAgIGlmIChpc01hbmlmZXN0UHJvdmlkZXIoZ2xvYmFsUmVtb3RlU25hcHNob3QpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3RlRW50cnkgPSBpc0Jyb3dzZXJFbnYoKSA/IGdsb2JhbFJlbW90ZVNuYXBzaG90LnJlbW90ZUVudHJ5IDogZ2xvYmFsUmVtb3RlU25hcHNob3Quc3NyUmVtb3RlRW50cnkgfHwgZ2xvYmFsUmVtb3RlU25hcHNob3QucmVtb3RlRW50cnkgfHwgJyc7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kdWxlU25hcHNob3QgPSBhd2FpdCB0aGlzLmdldE1hbmlmZXN0SnNvbihyZW1vdGVFbnRyeSwgbW9kdWxlSW5mbywge30pO1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tc2hhZG93XG4gICAgICAgICAgICAgICAgY29uc3QgZ2xvYmFsU25hcHNob3RSZXMgPSBzZXRHbG9iYWxTbmFwc2hvdEluZm9CeU1vZHVsZUluZm8oX2V4dGVuZHMoe30sIG1vZHVsZUluZm8sIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGdsb2JhbCByZW1vdGUgbWF5IGJlIG92ZXJyaWRkZW5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmVmb3JlLCBzZXQgdGhlIHNuYXBzaG90IGtleSB0byB0aGUgZ2xvYmFsIGFkZHJlc3Mgb2YgdGhlIGFjdHVhbCByZXF1ZXN0XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5OiByZW1vdGVFbnRyeVxuICAgICAgICAgICAgICAgIH0pLCBtb2R1bGVTbmFwc2hvdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlU25hcHNob3Q6IG1vZHVsZVNuYXBzaG90LFxuICAgICAgICAgICAgICAgICAgICBnbG9iYWxTbmFwc2hvdDogZ2xvYmFsU25hcHNob3RSZXNcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHJlbW90ZVNuYXBzaG90OiByZW1vdGVTbmFwc2hvdFJlcyB9ID0gYXdhaXQgdGhpcy5ob29rcy5saWZlY3ljbGUubG9hZFJlbW90ZVNuYXBzaG90LmVtaXQoe1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLkhvc3RJbnN0YW5jZS5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBtb2R1bGVJbmZvLFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVTbmFwc2hvdDogZ2xvYmFsUmVtb3RlU25hcHNob3QsXG4gICAgICAgICAgICAgICAgICAgIGZyb206ICdnbG9iYWwnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlU25hcHNob3Q6IHJlbW90ZVNuYXBzaG90UmVzLFxuICAgICAgICAgICAgICAgICAgICBnbG9iYWxTbmFwc2hvdDogZ2xvYmFsU25hcHNob3RSZXNcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzUmVtb3RlSW5mb1dpdGhFbnRyeShtb2R1bGVJbmZvKSkge1xuICAgICAgICAgICAgICAgIC8vIGdldCBmcm9tIG1hbmlmZXN0Lmpzb24gYW5kIG1lcmdlIHJlbW90ZSBpbmZvIGZyb20gcmVtb3RlIHNlcnZlclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vZHVsZVNuYXBzaG90ID0gYXdhaXQgdGhpcy5nZXRNYW5pZmVzdEpzb24obW9kdWxlSW5mby5lbnRyeSwgbW9kdWxlSW5mbywge30pO1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tc2hhZG93XG4gICAgICAgICAgICAgICAgY29uc3QgZ2xvYmFsU25hcHNob3RSZXMgPSBzZXRHbG9iYWxTbmFwc2hvdEluZm9CeU1vZHVsZUluZm8obW9kdWxlSW5mbywgbW9kdWxlU25hcHNob3QpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgcmVtb3RlU25hcHNob3Q6IHJlbW90ZVNuYXBzaG90UmVzIH0gPSBhd2FpdCB0aGlzLmhvb2tzLmxpZmVjeWNsZS5sb2FkUmVtb3RlU25hcHNob3QuZW1pdCh7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMuSG9zdEluc3RhbmNlLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZUluZm8sXG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZVNuYXBzaG90OiBtb2R1bGVTbmFwc2hvdCxcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogJ2dsb2JhbCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICByZW1vdGVTbmFwc2hvdDogcmVtb3RlU25hcHNob3RSZXMsXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFNuYXBzaG90OiBnbG9iYWxTbmFwc2hvdFJlc1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVycm9yKGdldFNob3J0RXJyb3JNc2coUlVOVElNRV8wMDcsIHJ1bnRpbWVEZXNjTWFwLCB7XG4gICAgICAgICAgICAgICAgICAgIGhvc3ROYW1lOiBtb2R1bGVJbmZvLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGhvc3RWZXJzaW9uOiBtb2R1bGVJbmZvLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbFNuYXBzaG90OiBKU09OLnN0cmluZ2lmeShnbG9iYWxTbmFwc2hvdFJlcylcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0R2xvYmFsUmVtb3RlSW5mbyhtb2R1bGVJbmZvKSB7XG4gICAgICAgIHJldHVybiBnZXRHbG9iYWxSZW1vdGVJbmZvKG1vZHVsZUluZm8sIHRoaXMuSG9zdEluc3RhbmNlKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TWFuaWZlc3RKc29uKG1hbmlmZXN0VXJsLCBtb2R1bGVJbmZvLCBleHRyYU9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZ2V0TWFuaWZlc3QgPSBhc3luYyAoKT0+e1xuICAgICAgICAgICAgbGV0IG1hbmlmZXN0SnNvbiA9IHRoaXMubWFuaWZlc3RDYWNoZS5nZXQobWFuaWZlc3RVcmwpO1xuICAgICAgICAgICAgaWYgKG1hbmlmZXN0SnNvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYW5pZmVzdEpzb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCByZXMgPSBhd2FpdCB0aGlzLmxvYWRlckhvb2subGlmZWN5Y2xlLmZldGNoLmVtaXQobWFuaWZlc3RVcmwsIHt9KTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlcyB8fCAhKHJlcyBpbnN0YW5jZW9mIFJlc3BvbnNlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXMgPSBhd2FpdCBmZXRjaChtYW5pZmVzdFVybCwge30pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYW5pZmVzdEpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgICAgICAgICAgIGFzc2VydChtYW5pZmVzdEpzb24ubWV0YURhdGEgJiYgbWFuaWZlc3RKc29uLmV4cG9zZXMgJiYgbWFuaWZlc3RKc29uLnNoYXJlZCwgYCR7bWFuaWZlc3RVcmx9IGlzIG5vdCBhIGZlZGVyYXRpb24gbWFuaWZlc3RgKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1hbmlmZXN0Q2FjaGUuc2V0KG1hbmlmZXN0VXJsLCBtYW5pZmVzdEpzb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiBtYW5pZmVzdEpzb247XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5tYW5pZmVzdExvYWRpbmdbbWFuaWZlc3RVcmxdO1xuICAgICAgICAgICAgICAgIGVycm9yKGdldFNob3J0RXJyb3JNc2coUlVOVElNRV8wMDMsIHJ1bnRpbWVEZXNjTWFwLCB7XG4gICAgICAgICAgICAgICAgICAgIG1hbmlmZXN0VXJsLFxuICAgICAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBtb2R1bGVJbmZvLm5hbWVcbiAgICAgICAgICAgICAgICB9LCBgJHtlcnJ9YCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhc3luY0xvYWRQcm9jZXNzID0gYXN5bmMgKCk9PntcbiAgICAgICAgICAgIGNvbnN0IG1hbmlmZXN0SnNvbiA9IGF3YWl0IGdldE1hbmlmZXN0KCk7XG4gICAgICAgICAgICBjb25zdCByZW1vdGVTbmFwc2hvdCA9IGdlbmVyYXRlU25hcHNob3RGcm9tTWFuaWZlc3QobWFuaWZlc3RKc29uLCB7XG4gICAgICAgICAgICAgICAgdmVyc2lvbjogbWFuaWZlc3RVcmxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgeyByZW1vdGVTbmFwc2hvdDogcmVtb3RlU25hcHNob3RSZXMgfSA9IGF3YWl0IHRoaXMuaG9va3MubGlmZWN5Y2xlLmxvYWRSZW1vdGVTbmFwc2hvdC5lbWl0KHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLkhvc3RJbnN0YW5jZS5vcHRpb25zLFxuICAgICAgICAgICAgICAgIG1vZHVsZUluZm8sXG4gICAgICAgICAgICAgICAgbWFuaWZlc3RKc29uLFxuICAgICAgICAgICAgICAgIHJlbW90ZVNuYXBzaG90LFxuICAgICAgICAgICAgICAgIG1hbmlmZXN0VXJsLFxuICAgICAgICAgICAgICAgIGZyb206ICdtYW5pZmVzdCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlbW90ZVNuYXBzaG90UmVzO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoIXRoaXMubWFuaWZlc3RMb2FkaW5nW21hbmlmZXN0VXJsXSkge1xuICAgICAgICAgICAgdGhpcy5tYW5pZmVzdExvYWRpbmdbbWFuaWZlc3RVcmxdID0gYXN5bmNMb2FkUHJvY2VzcygpLnRoZW4oKHJlcyk9PnJlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFuaWZlc3RMb2FkaW5nW21hbmlmZXN0VXJsXTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoSG9zdEluc3RhbmNlKXtcbiAgICAgICAgdGhpcy5sb2FkaW5nSG9zdFNuYXBzaG90ID0gbnVsbDtcbiAgICAgICAgdGhpcy5tYW5pZmVzdENhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmhvb2tzID0gbmV3IFBsdWdpblN5c3RlbSh7XG4gICAgICAgICAgICBiZWZvcmVMb2FkUmVtb3RlU25hcHNob3Q6IG5ldyBBc3luY0hvb2soJ2JlZm9yZUxvYWRSZW1vdGVTbmFwc2hvdCcpLFxuICAgICAgICAgICAgbG9hZFNuYXBzaG90OiBuZXcgQXN5bmNXYXRlcmZhbGxIb29rKCdsb2FkR2xvYmFsU25hcHNob3QnKSxcbiAgICAgICAgICAgIGxvYWRSZW1vdGVTbmFwc2hvdDogbmV3IEFzeW5jV2F0ZXJmYWxsSG9vaygnbG9hZFJlbW90ZVNuYXBzaG90JylcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFuaWZlc3RMb2FkaW5nID0gR2xvYmFsLl9fRkVERVJBVElPTl9fLl9fTUFOSUZFU1RfTE9BRElOR19fO1xuICAgICAgICB0aGlzLkhvc3RJbnN0YW5jZSA9IEhvc3RJbnN0YW5jZTtcbiAgICAgICAgdGhpcy5sb2FkZXJIb29rID0gSG9zdEluc3RhbmNlLmxvYWRlckhvb2s7XG4gICAgfVxufVxuXG5jbGFzcyBTaGFyZWRIYW5kbGVyIHtcbiAgICAvLyByZWdpc3RlciBzaGFyZWQgaW4gc2hhcmVTY29wZU1hcFxuICAgIHJlZ2lzdGVyU2hhcmVkKGdsb2JhbE9wdGlvbnMsIHVzZXJPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgc2hhcmVJbmZvcywgc2hhcmVkIH0gPSBmb3JtYXRTaGFyZUNvbmZpZ3MoZ2xvYmFsT3B0aW9ucywgdXNlck9wdGlvbnMpO1xuICAgICAgICBjb25zdCBzaGFyZWRLZXlzID0gT2JqZWN0LmtleXMoc2hhcmVJbmZvcyk7XG4gICAgICAgIHNoYXJlZEtleXMuZm9yRWFjaCgoc2hhcmVkS2V5KT0+e1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVkVmFscyA9IHNoYXJlSW5mb3Nbc2hhcmVkS2V5XTtcbiAgICAgICAgICAgIHNoYXJlZFZhbHMuZm9yRWFjaCgoc2hhcmVkVmFsKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lzdGVyZWRTaGFyZWQgPSBnZXRSZWdpc3RlcmVkU2hhcmUodGhpcy5zaGFyZVNjb3BlTWFwLCBzaGFyZWRLZXksIHNoYXJlZFZhbCwgdGhpcy5ob29rcy5saWZlY3ljbGUucmVzb2x2ZVNoYXJlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlZ2lzdGVyZWRTaGFyZWQgJiYgc2hhcmVkVmFsICYmIHNoYXJlZFZhbC5saWIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTaGFyZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcGtnTmFtZTogc2hhcmVkS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGliOiBzaGFyZWRWYWwubGliLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBzaGFyZWRWYWwuZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVkOiBzaGFyZWRWYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiB1c2VyT3B0aW9ucy5uYW1lXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNoYXJlSW5mb3MsXG4gICAgICAgICAgICBzaGFyZWRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgbG9hZFNoYXJlKHBrZ05hbWUsIGV4dHJhT3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGhvc3QgfSA9IHRoaXM7XG4gICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gcGVyZm9ybXMgdGhlIGZvbGxvd2luZyBzdGVwczpcbiAgICAgICAgLy8gMS4gQ2hlY2tzIGlmIHRoZSBjdXJyZW50bHkgbG9hZGVkIHNoYXJlIGFscmVhZHkgZXhpc3RzLCBpZiBub3QsIGl0IHRocm93cyBhbiBlcnJvclxuICAgICAgICAvLyAyLiBTZWFyY2hlcyBnbG9iYWxseSBmb3IgYSBtYXRjaGluZyBzaGFyZSwgaWYgZm91bmQsIGl0IHVzZXMgaXQgZGlyZWN0bHlcbiAgICAgICAgLy8gMy4gSWYgbm90IGZvdW5kLCBpdCByZXRyaWV2ZXMgaXQgZnJvbSB0aGUgY3VycmVudCBzaGFyZSBhbmQgc3RvcmVzIHRoZSBvYnRhaW5lZCBzaGFyZSBnbG9iYWxseS5cbiAgICAgICAgY29uc3Qgc2hhcmVJbmZvID0gZ2V0VGFyZ2V0U2hhcmVkT3B0aW9ucyh7XG4gICAgICAgICAgICBwa2dOYW1lLFxuICAgICAgICAgICAgZXh0cmFPcHRpb25zLFxuICAgICAgICAgICAgc2hhcmVJbmZvczogaG9zdC5vcHRpb25zLnNoYXJlZFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNoYXJlSW5mbyA9PSBudWxsID8gdm9pZCAwIDogc2hhcmVJbmZvLnNjb3BlKSB7XG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChzaGFyZUluZm8uc2NvcGUubWFwKGFzeW5jIChzaGFyZVNjb3BlKT0+e1xuICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHRoaXMuaW5pdGlhbGl6ZVNoYXJpbmcoc2hhcmVTY29wZSwge1xuICAgICAgICAgICAgICAgICAgICBzdHJhdGVneTogc2hhcmVJbmZvLnN0cmF0ZWd5XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2FkU2hhcmVSZXMgPSBhd2FpdCB0aGlzLmhvb2tzLmxpZmVjeWNsZS5iZWZvcmVMb2FkU2hhcmUuZW1pdCh7XG4gICAgICAgICAgICBwa2dOYW1lLFxuICAgICAgICAgICAgc2hhcmVJbmZvLFxuICAgICAgICAgICAgc2hhcmVkOiBob3N0Lm9wdGlvbnMuc2hhcmVkLFxuICAgICAgICAgICAgb3JpZ2luOiBob3N0XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IHNoYXJlSW5mbzogc2hhcmVJbmZvUmVzIH0gPSBsb2FkU2hhcmVSZXM7XG4gICAgICAgIC8vIEFzc2VydCB0aGF0IHNoYXJlSW5mb1JlcyBleGlzdHMsIGlmIG5vdCwgdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgYXNzZXJ0KHNoYXJlSW5mb1JlcywgYENhbm5vdCBmaW5kICR7cGtnTmFtZX0gU2hhcmUgaW4gdGhlICR7aG9zdC5vcHRpb25zLm5hbWV9LiBQbGVhc2UgZW5zdXJlIHRoYXQgdGhlICR7cGtnTmFtZX0gU2hhcmUgcGFyYW1ldGVycyBoYXZlIGJlZW4gaW5qZWN0ZWRgKTtcbiAgICAgICAgLy8gUmV0cmlldmUgZnJvbSBjYWNoZVxuICAgICAgICBjb25zdCByZWdpc3RlcmVkU2hhcmVkID0gZ2V0UmVnaXN0ZXJlZFNoYXJlKHRoaXMuc2hhcmVTY29wZU1hcCwgcGtnTmFtZSwgc2hhcmVJbmZvUmVzLCB0aGlzLmhvb2tzLmxpZmVjeWNsZS5yZXNvbHZlU2hhcmUpO1xuICAgICAgICBjb25zdCBhZGRVc2VJbiA9IChzaGFyZWQpPT57XG4gICAgICAgICAgICBpZiAoIXNoYXJlZC51c2VJbikge1xuICAgICAgICAgICAgICAgIHNoYXJlZC51c2VJbiA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkVW5pcXVlSXRlbShzaGFyZWQudXNlSW4sIGhvc3Qub3B0aW9ucy5uYW1lKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWRTaGFyZWQgJiYgcmVnaXN0ZXJlZFNoYXJlZC5saWIpIHtcbiAgICAgICAgICAgIGFkZFVzZUluKHJlZ2lzdGVyZWRTaGFyZWQpO1xuICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdGVyZWRTaGFyZWQubGliO1xuICAgICAgICB9IGVsc2UgaWYgKHJlZ2lzdGVyZWRTaGFyZWQgJiYgcmVnaXN0ZXJlZFNoYXJlZC5sb2FkaW5nICYmICFyZWdpc3RlcmVkU2hhcmVkLmxvYWRlZCkge1xuICAgICAgICAgICAgY29uc3QgZmFjdG9yeSA9IGF3YWl0IHJlZ2lzdGVyZWRTaGFyZWQubG9hZGluZztcbiAgICAgICAgICAgIHJlZ2lzdGVyZWRTaGFyZWQubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghcmVnaXN0ZXJlZFNoYXJlZC5saWIpIHtcbiAgICAgICAgICAgICAgICByZWdpc3RlcmVkU2hhcmVkLmxpYiA9IGZhY3Rvcnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRVc2VJbihyZWdpc3RlcmVkU2hhcmVkKTtcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5O1xuICAgICAgICB9IGVsc2UgaWYgKHJlZ2lzdGVyZWRTaGFyZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGFzeW5jTG9hZFByb2Nlc3MgPSBhc3luYyAoKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IGZhY3RvcnkgPSBhd2FpdCByZWdpc3RlcmVkU2hhcmVkLmdldCgpO1xuICAgICAgICAgICAgICAgIHNoYXJlSW5mb1Jlcy5saWIgPSBmYWN0b3J5O1xuICAgICAgICAgICAgICAgIHNoYXJlSW5mb1Jlcy5sb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGFkZFVzZUluKHNoYXJlSW5mb1Jlcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgZ1NoYXJlZCA9IGdldFJlZ2lzdGVyZWRTaGFyZSh0aGlzLnNoYXJlU2NvcGVNYXAsIHBrZ05hbWUsIHNoYXJlSW5mb1JlcywgdGhpcy5ob29rcy5saWZlY3ljbGUucmVzb2x2ZVNoYXJlKTtcbiAgICAgICAgICAgICAgICBpZiAoZ1NoYXJlZCkge1xuICAgICAgICAgICAgICAgICAgICBnU2hhcmVkLmxpYiA9IGZhY3Rvcnk7XG4gICAgICAgICAgICAgICAgICAgIGdTaGFyZWQubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgbG9hZGluZyA9IGFzeW5jTG9hZFByb2Nlc3MoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U2hhcmVkKHtcbiAgICAgICAgICAgICAgICBwa2dOYW1lLFxuICAgICAgICAgICAgICAgIGxvYWRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hhcmVkOiByZWdpc3RlcmVkU2hhcmVkLFxuICAgICAgICAgICAgICAgIGZyb206IGhvc3Qub3B0aW9ucy5uYW1lLFxuICAgICAgICAgICAgICAgIGxpYjogbnVsbCxcbiAgICAgICAgICAgICAgICBsb2FkaW5nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBsb2FkaW5nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGV4dHJhT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogZXh0cmFPcHRpb25zLmN1c3RvbVNoYXJlSW5mbykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGFzeW5jTG9hZFByb2Nlc3MgPSBhc3luYyAoKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IGZhY3RvcnkgPSBhd2FpdCBzaGFyZUluZm9SZXMuZ2V0KCk7XG4gICAgICAgICAgICAgICAgc2hhcmVJbmZvUmVzLmxpYiA9IGZhY3Rvcnk7XG4gICAgICAgICAgICAgICAgc2hhcmVJbmZvUmVzLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYWRkVXNlSW4oc2hhcmVJbmZvUmVzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBnU2hhcmVkID0gZ2V0UmVnaXN0ZXJlZFNoYXJlKHRoaXMuc2hhcmVTY29wZU1hcCwgcGtnTmFtZSwgc2hhcmVJbmZvUmVzLCB0aGlzLmhvb2tzLmxpZmVjeWNsZS5yZXNvbHZlU2hhcmUpO1xuICAgICAgICAgICAgICAgIGlmIChnU2hhcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGdTaGFyZWQubGliID0gZmFjdG9yeTtcbiAgICAgICAgICAgICAgICAgICAgZ1NoYXJlZC5sb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFjdG9yeTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBsb2FkaW5nID0gYXN5bmNMb2FkUHJvY2VzcygpO1xuICAgICAgICAgICAgdGhpcy5zZXRTaGFyZWQoe1xuICAgICAgICAgICAgICAgIHBrZ05hbWUsXG4gICAgICAgICAgICAgICAgbG9hZGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaGFyZWQ6IHNoYXJlSW5mb1JlcyxcbiAgICAgICAgICAgICAgICBmcm9tOiBob3N0Lm9wdGlvbnMubmFtZSxcbiAgICAgICAgICAgICAgICBsaWI6IG51bGwsXG4gICAgICAgICAgICAgICAgbG9hZGluZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbG9hZGluZztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpbml0aWFsaXplcyB0aGUgc2hhcmluZyBzZXF1ZW5jZSAoZXhlY3V0ZWQgb25seSBvbmNlIHBlciBzaGFyZSBzY29wZSkuXG4gICAqIEl0IGFjY2VwdHMgb25lIGFyZ3VtZW50LCB0aGUgbmFtZSBvZiB0aGUgc2hhcmUgc2NvcGUuXG4gICAqIElmIHRoZSBzaGFyZSBzY29wZSBkb2VzIG5vdCBleGlzdCwgaXQgY3JlYXRlcyBvbmUuXG4gICAqLyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L21lbWJlci1vcmRlcmluZ1xuICAgIGluaXRpYWxpemVTaGFyaW5nKHNoYXJlU2NvcGVOYW1lID0gREVGQVVMVF9TQ09QRSwgZXh0cmFPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgaG9zdCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZnJvbSA9IGV4dHJhT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogZXh0cmFPcHRpb25zLmZyb207XG4gICAgICAgIGNvbnN0IHN0cmF0ZWd5ID0gZXh0cmFPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBleHRyYU9wdGlvbnMuc3RyYXRlZ3k7XG4gICAgICAgIGxldCBpbml0U2NvcGUgPSBleHRyYU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dHJhT3B0aW9ucy5pbml0U2NvcGU7XG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICAgIGlmIChmcm9tICE9PSAnYnVpbGQnKSB7XG4gICAgICAgICAgICBjb25zdCB7IGluaXRUb2tlbnMgfSA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoIWluaXRTY29wZSkgaW5pdFNjb3BlID0gW107XG4gICAgICAgICAgICBsZXQgaW5pdFRva2VuID0gaW5pdFRva2Vuc1tzaGFyZVNjb3BlTmFtZV07XG4gICAgICAgICAgICBpZiAoIWluaXRUb2tlbikgaW5pdFRva2VuID0gaW5pdFRva2Vuc1tzaGFyZVNjb3BlTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgZnJvbTogdGhpcy5ob3N0Lm5hbWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaW5pdFNjb3BlLmluZGV4T2YoaW5pdFRva2VuKSA+PSAwKSByZXR1cm4gcHJvbWlzZXM7XG4gICAgICAgICAgICBpbml0U2NvcGUucHVzaChpbml0VG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNoYXJlU2NvcGUgPSB0aGlzLnNoYXJlU2NvcGVNYXA7XG4gICAgICAgIGNvbnN0IGhvc3ROYW1lID0gaG9zdC5vcHRpb25zLm5hbWU7XG4gICAgICAgIC8vIENyZWF0ZXMgYSBuZXcgc2hhcmUgc2NvcGUgaWYgbmVjZXNzYXJ5XG4gICAgICAgIGlmICghc2hhcmVTY29wZVtzaGFyZVNjb3BlTmFtZV0pIHtcbiAgICAgICAgICAgIHNoYXJlU2NvcGVbc2hhcmVTY29wZU5hbWVdID0ge307XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXhlY3V0ZXMgYWxsIGluaXRpYWxpemF0aW9uIHNuaXBwZXRzIGZyb20gYWxsIGFjY2Vzc2libGUgbW9kdWxlc1xuICAgICAgICBjb25zdCBzY29wZSA9IHNoYXJlU2NvcGVbc2hhcmVTY29wZU5hbWVdO1xuICAgICAgICBjb25zdCByZWdpc3RlciA9IChuYW1lLCBzaGFyZWQpPT57XG4gICAgICAgICAgICB2YXIgX2FjdGl2ZVZlcnNpb25fc2hhcmVDb25maWc7XG4gICAgICAgICAgICBjb25zdCB7IHZlcnNpb24sIGVhZ2VyIH0gPSBzaGFyZWQ7XG4gICAgICAgICAgICBzY29wZVtuYW1lXSA9IHNjb3BlW25hbWVdIHx8IHt9O1xuICAgICAgICAgICAgY29uc3QgdmVyc2lvbnMgPSBzY29wZVtuYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVZlcnNpb24gPSB2ZXJzaW9uc1t2ZXJzaW9uXTtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVZlcnNpb25FYWdlciA9IEJvb2xlYW4oYWN0aXZlVmVyc2lvbiAmJiAoYWN0aXZlVmVyc2lvbi5lYWdlciB8fCAoKF9hY3RpdmVWZXJzaW9uX3NoYXJlQ29uZmlnID0gYWN0aXZlVmVyc2lvbi5zaGFyZUNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hY3RpdmVWZXJzaW9uX3NoYXJlQ29uZmlnLmVhZ2VyKSkpO1xuICAgICAgICAgICAgaWYgKCFhY3RpdmVWZXJzaW9uIHx8IGFjdGl2ZVZlcnNpb24uc3RyYXRlZ3kgIT09ICdsb2FkZWQtZmlyc3QnICYmICFhY3RpdmVWZXJzaW9uLmxvYWRlZCAmJiAoQm9vbGVhbighZWFnZXIpICE9PSAhYWN0aXZlVmVyc2lvbkVhZ2VyID8gZWFnZXIgOiBob3N0TmFtZSA+IGFjdGl2ZVZlcnNpb24uZnJvbSkpIHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uc1t2ZXJzaW9uXSA9IHNoYXJlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaW5pdEZuID0gKG1vZCk9Pm1vZCAmJiBtb2QuaW5pdCAmJiBtb2QuaW5pdChzaGFyZVNjb3BlW3NoYXJlU2NvcGVOYW1lXSwgaW5pdFNjb3BlKTtcbiAgICAgICAgY29uc3QgaW5pdFJlbW90ZU1vZHVsZSA9IGFzeW5jIChrZXkpPT57XG4gICAgICAgICAgICBjb25zdCB7IG1vZHVsZSB9ID0gYXdhaXQgaG9zdC5yZW1vdGVIYW5kbGVyLmdldFJlbW90ZU1vZHVsZUFuZE9wdGlvbnMoe1xuICAgICAgICAgICAgICAgIGlkOiBrZXlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG1vZHVsZS5nZXRFbnRyeSkge1xuICAgICAgICAgICAgICAgIGxldCByZW1vdGVFbnRyeUV4cG9ydHM7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlRW50cnlFeHBvcnRzID0gYXdhaXQgbW9kdWxlLmdldEVudHJ5KCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlRW50cnlFeHBvcnRzID0gYXdhaXQgaG9zdC5yZW1vdGVIYW5kbGVyLmhvb2tzLmxpZmVjeWNsZS5lcnJvckxvYWRSZW1vdGUuZW1pdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDoga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAncnVudGltZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaWZlY3ljbGU6ICdiZWZvcmVMb2FkU2hhcmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luOiBob3N0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIW1vZHVsZS5pbml0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgaW5pdEZuKHJlbW90ZUVudHJ5RXhwb3J0cyk7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZS5pbml0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmtleXMoaG9zdC5vcHRpb25zLnNoYXJlZCkuZm9yRWFjaCgoc2hhcmVOYW1lKT0+e1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVkQXJyID0gaG9zdC5vcHRpb25zLnNoYXJlZFtzaGFyZU5hbWVdO1xuICAgICAgICAgICAgc2hhcmVkQXJyLmZvckVhY2goKHNoYXJlZCk9PntcbiAgICAgICAgICAgICAgICBpZiAoc2hhcmVkLnNjb3BlLmluY2x1ZGVzKHNoYXJlU2NvcGVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZWdpc3RlcihzaGFyZU5hbWUsIHNoYXJlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUT0RPOiBzdHJhdGVneT09PSd2ZXJzaW9uLWZpcnN0JyBuZWVkIHRvIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZVxuICAgICAgICBpZiAoaG9zdC5vcHRpb25zLnNoYXJlU3RyYXRlZ3kgPT09ICd2ZXJzaW9uLWZpcnN0JyB8fCBzdHJhdGVneSA9PT0gJ3ZlcnNpb24tZmlyc3QnKSB7XG4gICAgICAgICAgICBob3N0Lm9wdGlvbnMucmVtb3Rlcy5mb3JFYWNoKChyZW1vdGUpPT57XG4gICAgICAgICAgICAgICAgaWYgKHJlbW90ZS5zaGFyZVNjb3BlID09PSBzaGFyZVNjb3BlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKGluaXRSZW1vdGVNb2R1bGUocmVtb3RlLm5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvbWlzZXM7XG4gICAgfVxuICAgIC8vIFRoZSBsaWIgZnVuY3Rpb24gd2lsbCBvbmx5IGJlIGF2YWlsYWJsZSBpZiB0aGUgc2hhcmVkIHNldCBieSBlYWdlciBvciBydW50aW1lIGluaXQgaXMgc2V0IG9yIHRoZSBzaGFyZWQgaXMgc3VjY2Vzc2Z1bGx5IGxvYWRlZC5cbiAgICAvLyAxLiBJZiB0aGUgbG9hZGVkIHNoYXJlZCBhbHJlYWR5IGV4aXN0cyBnbG9iYWxseSwgdGhlbiBpdCB3aWxsIGJlIHJldXNlZFxuICAgIC8vIDIuIElmIGxpYiBleGlzdHMgaW4gbG9jYWwgc2hhcmVkLCBpdCB3aWxsIGJlIHVzZWQgZGlyZWN0bHlcbiAgICAvLyAzLiBJZiB0aGUgbG9jYWwgZ2V0IHJldHVybnMgc29tZXRoaW5nIG90aGVyIHRoYW4gUHJvbWlzZSwgdGhlbiBpdCB3aWxsIGJlIHVzZWQgZGlyZWN0bHlcbiAgICBsb2FkU2hhcmVTeW5jKHBrZ05hbWUsIGV4dHJhT3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGhvc3QgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHNoYXJlSW5mbyA9IGdldFRhcmdldFNoYXJlZE9wdGlvbnMoe1xuICAgICAgICAgICAgcGtnTmFtZSxcbiAgICAgICAgICAgIGV4dHJhT3B0aW9ucyxcbiAgICAgICAgICAgIHNoYXJlSW5mb3M6IGhvc3Qub3B0aW9ucy5zaGFyZWRcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzaGFyZUluZm8gPT0gbnVsbCA/IHZvaWQgMCA6IHNoYXJlSW5mby5zY29wZSkge1xuICAgICAgICAgICAgc2hhcmVJbmZvLnNjb3BlLmZvckVhY2goKHNoYXJlU2NvcGUpPT57XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplU2hhcmluZyhzaGFyZVNjb3BlLCB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmF0ZWd5OiBzaGFyZUluZm8uc3RyYXRlZ3lcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlZ2lzdGVyZWRTaGFyZWQgPSBnZXRSZWdpc3RlcmVkU2hhcmUodGhpcy5zaGFyZVNjb3BlTWFwLCBwa2dOYW1lLCBzaGFyZUluZm8sIHRoaXMuaG9va3MubGlmZWN5Y2xlLnJlc29sdmVTaGFyZSk7XG4gICAgICAgIGNvbnN0IGFkZFVzZUluID0gKHNoYXJlZCk9PntcbiAgICAgICAgICAgIGlmICghc2hhcmVkLnVzZUluKSB7XG4gICAgICAgICAgICAgICAgc2hhcmVkLnVzZUluID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRVbmlxdWVJdGVtKHNoYXJlZC51c2VJbiwgaG9zdC5vcHRpb25zLm5hbWUpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAocmVnaXN0ZXJlZFNoYXJlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZWdpc3RlcmVkU2hhcmVkLmxpYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGFkZFVzZUluKHJlZ2lzdGVyZWRTaGFyZWQpO1xuICAgICAgICAgICAgICAgIGlmICghcmVnaXN0ZXJlZFNoYXJlZC5sb2FkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJlZFNoYXJlZC5sb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVnaXN0ZXJlZFNoYXJlZC5mcm9tID09PSBob3N0Lm9wdGlvbnMubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVJbmZvLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdGVyZWRTaGFyZWQubGliO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZWdpc3RlcmVkU2hhcmVkLmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vZHVsZSA9IHJlZ2lzdGVyZWRTaGFyZWQuZ2V0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCEobW9kdWxlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkVXNlSW4ocmVnaXN0ZXJlZFNoYXJlZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U2hhcmVkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBrZ05hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiBob3N0Lm9wdGlvbnMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpYjogbW9kdWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVkOiByZWdpc3RlcmVkU2hhcmVkXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9kdWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhcmVJbmZvLmxpYikge1xuICAgICAgICAgICAgaWYgKCFzaGFyZUluZm8ubG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgc2hhcmVJbmZvLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2hhcmVJbmZvLmxpYjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhcmVJbmZvLmdldCkge1xuICAgICAgICAgICAgY29uc3QgbW9kdWxlID0gc2hhcmVJbmZvLmdldCgpO1xuICAgICAgICAgICAgaWYgKG1vZHVsZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvckNvZGUgPSAoZXh0cmFPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBleHRyYU9wdGlvbnMuZnJvbSkgPT09ICdidWlsZCcgPyBSVU5USU1FXzAwNSA6IFJVTlRJTUVfMDA2O1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihnZXRTaG9ydEVycm9yTXNnKGVycm9yQ29kZSwgcnVudGltZURlc2NNYXAsIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdE5hbWU6IGhvc3Qub3B0aW9ucy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBzaGFyZWRQa2dOYW1lOiBwa2dOYW1lXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2hhcmVJbmZvLmxpYiA9IG1vZHVsZTtcbiAgICAgICAgICAgIHRoaXMuc2V0U2hhcmVkKHtcbiAgICAgICAgICAgICAgICBwa2dOYW1lLFxuICAgICAgICAgICAgICAgIGxvYWRlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmcm9tOiBob3N0Lm9wdGlvbnMubmFtZSxcbiAgICAgICAgICAgICAgICBsaWI6IHNoYXJlSW5mby5saWIsXG4gICAgICAgICAgICAgICAgc2hhcmVkOiBzaGFyZUluZm9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHNoYXJlSW5mby5saWI7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGdldFNob3J0RXJyb3JNc2coUlVOVElNRV8wMDYsIHJ1bnRpbWVEZXNjTWFwLCB7XG4gICAgICAgICAgICBob3N0TmFtZTogaG9zdC5vcHRpb25zLm5hbWUsXG4gICAgICAgICAgICBzaGFyZWRQa2dOYW1lOiBwa2dOYW1lXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgaW5pdFNoYXJlU2NvcGVNYXAoc2NvcGVOYW1lLCBzaGFyZVNjb3BlLCBleHRyYU9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IGhvc3QgfSA9IHRoaXM7XG4gICAgICAgIHRoaXMuc2hhcmVTY29wZU1hcFtzY29wZU5hbWVdID0gc2hhcmVTY29wZTtcbiAgICAgICAgdGhpcy5ob29rcy5saWZlY3ljbGUuaW5pdENvbnRhaW5lclNoYXJlU2NvcGVNYXAuZW1pdCh7XG4gICAgICAgICAgICBzaGFyZVNjb3BlLFxuICAgICAgICAgICAgb3B0aW9uczogaG9zdC5vcHRpb25zLFxuICAgICAgICAgICAgb3JpZ2luOiBob3N0LFxuICAgICAgICAgICAgc2NvcGVOYW1lLFxuICAgICAgICAgICAgaG9zdFNoYXJlU2NvcGVNYXA6IGV4dHJhT3B0aW9ucy5ob3N0U2hhcmVTY29wZU1hcFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0U2hhcmVkKHsgcGtnTmFtZSwgc2hhcmVkLCBmcm9tLCBsaWIsIGxvYWRpbmcsIGxvYWRlZCwgZ2V0IH0pIHtcbiAgICAgICAgY29uc3QgeyB2ZXJzaW9uLCBzY29wZSA9ICdkZWZhdWx0JyB9ID0gc2hhcmVkLCBzaGFyZUluZm8gPSBfb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllc19sb29zZShzaGFyZWQsIFtcbiAgICAgICAgICAgIFwidmVyc2lvblwiLFxuICAgICAgICAgICAgXCJzY29wZVwiXG4gICAgICAgIF0pO1xuICAgICAgICBjb25zdCBzY29wZXMgPSBBcnJheS5pc0FycmF5KHNjb3BlKSA/IHNjb3BlIDogW1xuICAgICAgICAgICAgc2NvcGVcbiAgICAgICAgXTtcbiAgICAgICAgc2NvcGVzLmZvckVhY2goKHNjKT0+e1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNoYXJlU2NvcGVNYXBbc2NdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFyZVNjb3BlTWFwW3NjXSA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnNoYXJlU2NvcGVNYXBbc2NdW3BrZ05hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFyZVNjb3BlTWFwW3NjXVtwa2dOYW1lXSA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnNoYXJlU2NvcGVNYXBbc2NdW3BrZ05hbWVdW3ZlcnNpb25dKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFyZVNjb3BlTWFwW3NjXVtwa2dOYW1lXVt2ZXJzaW9uXSA9IF9leHRlbmRzKHtcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdkZWZhdWx0J1xuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSwgc2hhcmVJbmZvLCB7XG4gICAgICAgICAgICAgICAgICAgIGxpYixcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVkLFxuICAgICAgICAgICAgICAgICAgICBsb2FkaW5nXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGdldCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYXJlU2NvcGVNYXBbc2NdW3BrZ05hbWVdW3ZlcnNpb25dLmdldCA9IGdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJlZFNoYXJlZCA9IHRoaXMuc2hhcmVTY29wZU1hcFtzY11bcGtnTmFtZV1bdmVyc2lvbl07XG4gICAgICAgICAgICBpZiAobG9hZGluZyAmJiAhcmVnaXN0ZXJlZFNoYXJlZC5sb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJlZFNoYXJlZC5sb2FkaW5nID0gbG9hZGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9zZXRHbG9iYWxTaGFyZVNjb3BlTWFwKGhvc3RPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGdsb2JhbFNoYXJlU2NvcGVNYXAgPSBnZXRHbG9iYWxTaGFyZVNjb3BlKCk7XG4gICAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSBob3N0T3B0aW9ucy5pZCB8fCBob3N0T3B0aW9ucy5uYW1lO1xuICAgICAgICBpZiAoaWRlbnRpZmllciAmJiAhZ2xvYmFsU2hhcmVTY29wZU1hcFtpZGVudGlmaWVyXSkge1xuICAgICAgICAgICAgZ2xvYmFsU2hhcmVTY29wZU1hcFtpZGVudGlmaWVyXSA9IHRoaXMuc2hhcmVTY29wZU1hcDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihob3N0KXtcbiAgICAgICAgdGhpcy5ob29rcyA9IG5ldyBQbHVnaW5TeXN0ZW0oe1xuICAgICAgICAgICAgYWZ0ZXJSZXNvbHZlOiBuZXcgQXN5bmNXYXRlcmZhbGxIb29rKCdhZnRlclJlc29sdmUnKSxcbiAgICAgICAgICAgIGJlZm9yZUxvYWRTaGFyZTogbmV3IEFzeW5jV2F0ZXJmYWxsSG9vaygnYmVmb3JlTG9hZFNoYXJlJyksXG4gICAgICAgICAgICAvLyBub3QgdXNlZCB5ZXRcbiAgICAgICAgICAgIGxvYWRTaGFyZTogbmV3IEFzeW5jSG9vaygpLFxuICAgICAgICAgICAgcmVzb2x2ZVNoYXJlOiBuZXcgU3luY1dhdGVyZmFsbEhvb2soJ3Jlc29sdmVTaGFyZScpLFxuICAgICAgICAgICAgLy8gbWF5YmUgd2lsbCBjaGFuZ2UsIHRlbXBvcmFyaWx5IGZvciBpbnRlcm5hbCB1c2Ugb25seVxuICAgICAgICAgICAgaW5pdENvbnRhaW5lclNoYXJlU2NvcGVNYXA6IG5ldyBTeW5jV2F0ZXJmYWxsSG9vaygnaW5pdENvbnRhaW5lclNoYXJlU2NvcGVNYXAnKVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5zaGFyZVNjb3BlTWFwID0ge307XG4gICAgICAgIHRoaXMuaW5pdFRva2VucyA9IHt9O1xuICAgICAgICB0aGlzLl9zZXRHbG9iYWxTaGFyZVNjb3BlTWFwKGhvc3Qub3B0aW9ucyk7XG4gICAgfVxufVxuXG5jbGFzcyBSZW1vdGVIYW5kbGVyIHtcbiAgICBmb3JtYXRBbmRSZWdpc3RlclJlbW90ZShnbG9iYWxPcHRpb25zLCB1c2VyT3B0aW9ucykge1xuICAgICAgICBjb25zdCB1c2VyUmVtb3RlcyA9IHVzZXJPcHRpb25zLnJlbW90ZXMgfHwgW107XG4gICAgICAgIHJldHVybiB1c2VyUmVtb3Rlcy5yZWR1Y2UoKHJlcywgcmVtb3RlKT0+e1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlclJlbW90ZShyZW1vdGUsIHJlcywge1xuICAgICAgICAgICAgICAgIGZvcmNlOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9LCBnbG9iYWxPcHRpb25zLnJlbW90ZXMpO1xuICAgIH1cbiAgICBzZXRJZFRvUmVtb3RlTWFwKGlkLCByZW1vdGVNYXRjaEluZm8pIHtcbiAgICAgICAgY29uc3QgeyByZW1vdGUsIGV4cG9zZSB9ID0gcmVtb3RlTWF0Y2hJbmZvO1xuICAgICAgICBjb25zdCB7IG5hbWUsIGFsaWFzIH0gPSByZW1vdGU7XG4gICAgICAgIHRoaXMuaWRUb1JlbW90ZU1hcFtpZF0gPSB7XG4gICAgICAgICAgICBuYW1lOiByZW1vdGUubmFtZSxcbiAgICAgICAgICAgIGV4cG9zZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoYWxpYXMgJiYgaWQuc3RhcnRzV2l0aChuYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgaWRXaXRoQWxpYXMgPSBpZC5yZXBsYWNlKG5hbWUsIGFsaWFzKTtcbiAgICAgICAgICAgIHRoaXMuaWRUb1JlbW90ZU1hcFtpZFdpdGhBbGlhc10gPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogcmVtb3RlLm5hbWUsXG4gICAgICAgICAgICAgICAgZXhwb3NlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbGlhcyAmJiBpZC5zdGFydHNXaXRoKGFsaWFzKSkge1xuICAgICAgICAgICAgY29uc3QgaWRXaXRoTmFtZSA9IGlkLnJlcGxhY2UoYWxpYXMsIG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5pZFRvUmVtb3RlTWFwW2lkV2l0aE5hbWVdID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlbW90ZS5uYW1lLFxuICAgICAgICAgICAgICAgIGV4cG9zZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxpbmVzLXBlci1mdW5jdGlvblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbWVtYmVyLW9yZGVyaW5nXG4gICAgYXN5bmMgbG9hZFJlbW90ZShpZCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGhvc3QgfSA9IHRoaXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGxvYWRGYWN0b3J5ID0gdHJ1ZSB9ID0gb3B0aW9ucyB8fCB7XG4gICAgICAgICAgICAgICAgbG9hZEZhY3Rvcnk6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyAxLiBWYWxpZGF0ZSB0aGUgcGFyYW1ldGVycyBvZiB0aGUgcmV0cmlldmVkIG1vZHVsZS4gVGhlcmUgYXJlIHR3byBtb2R1bGUgcmVxdWVzdCBtZXRob2RzOiBwa2dOYW1lICsgZXhwb3NlIGFuZCBhbGlhcyArIGV4cG9zZS5cbiAgICAgICAgICAgIC8vIDIuIFJlcXVlc3QgdGhlIHNuYXBzaG90IGluZm9ybWF0aW9uIG9mIHRoZSBjdXJyZW50IGhvc3QgYW5kIGdsb2JhbGx5IHN0b3JlIHRoZSBvYnRhaW5lZCBzbmFwc2hvdCBpbmZvcm1hdGlvbi4gVGhlIHJldHJpZXZlZCBtb2R1bGUgaW5mb3JtYXRpb24gaXMgcGFydGlhbGx5IG9mZmxpbmUgYW5kIHBhcnRpYWxseSBvbmxpbmUuIFRoZSBvbmxpbmUgbW9kdWxlIGluZm9ybWF0aW9uIHdpbGwgcmV0cmlldmUgdGhlIG1vZHVsZXMgdXNlZCBvbmxpbmUuXG4gICAgICAgICAgICAvLyAzLiBSZXRyaWV2ZSB0aGUgZGV0YWlsZWQgaW5mb3JtYXRpb24gb2YgdGhlIGN1cnJlbnQgbW9kdWxlIGZyb20gZ2xvYmFsIChyZW1vdGVFbnRyeSBhZGRyZXNzLCBleHBvc2UgcmVzb3VyY2UgYWRkcmVzcylcbiAgICAgICAgICAgIC8vIDQuIEFmdGVyIHJldHJpZXZpbmcgcmVtb3RlRW50cnksIGNhbGwgdGhlIGluaXQgb2YgdGhlIG1vZHVsZSwgYW5kIHRoZW4gcmV0cmlldmUgdGhlIGV4cG9ydGVkIGNvbnRlbnQgb2YgdGhlIG1vZHVsZSB0aHJvdWdoIGdldFxuICAgICAgICAgICAgLy8gaWQ6IHBrZ05hbWUoQGZlZGVyYXRpb24vYXBwMSkgKyBleHBvc2UoYnV0dG9uKSA9IEBmZWRlcmF0aW9uL2FwcDEvYnV0dG9uXG4gICAgICAgICAgICAvLyBpZDogYWxpYXMoYXBwMSkgKyBleHBvc2UoYnV0dG9uKSA9IGFwcDEvYnV0dG9uXG4gICAgICAgICAgICAvLyBpZDogYWxpYXMoYXBwMS91dGlscykgKyBleHBvc2UobG9hZGFzaC9zb3J0KSA9IGFwcDEvdXRpbHMvbG9hZGFzaC9zb3J0XG4gICAgICAgICAgICBjb25zdCB7IG1vZHVsZSwgbW9kdWxlT3B0aW9ucywgcmVtb3RlTWF0Y2hJbmZvIH0gPSBhd2FpdCB0aGlzLmdldFJlbW90ZU1vZHVsZUFuZE9wdGlvbnMoe1xuICAgICAgICAgICAgICAgIGlkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHsgcGtnTmFtZU9yQWxpYXMsIHJlbW90ZSwgZXhwb3NlLCBpZDogaWRSZXMsIHJlbW90ZVNuYXBzaG90IH0gPSByZW1vdGVNYXRjaEluZm87XG4gICAgICAgICAgICBjb25zdCBtb2R1bGVPckZhY3RvcnkgPSBhd2FpdCBtb2R1bGUuZ2V0KGlkUmVzLCBleHBvc2UsIG9wdGlvbnMsIHJlbW90ZVNuYXBzaG90KTtcbiAgICAgICAgICAgIGNvbnN0IG1vZHVsZVdyYXBwZXIgPSBhd2FpdCB0aGlzLmhvb2tzLmxpZmVjeWNsZS5vbkxvYWQuZW1pdCh7XG4gICAgICAgICAgICAgICAgaWQ6IGlkUmVzLFxuICAgICAgICAgICAgICAgIHBrZ05hbWVPckFsaWFzLFxuICAgICAgICAgICAgICAgIGV4cG9zZSxcbiAgICAgICAgICAgICAgICBleHBvc2VNb2R1bGU6IGxvYWRGYWN0b3J5ID8gbW9kdWxlT3JGYWN0b3J5IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGV4cG9zZU1vZHVsZUZhY3Rvcnk6IGxvYWRGYWN0b3J5ID8gdW5kZWZpbmVkIDogbW9kdWxlT3JGYWN0b3J5LFxuICAgICAgICAgICAgICAgIHJlbW90ZSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBtb2R1bGVPcHRpb25zLFxuICAgICAgICAgICAgICAgIG1vZHVsZUluc3RhbmNlOiBtb2R1bGUsXG4gICAgICAgICAgICAgICAgb3JpZ2luOiBob3N0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc2V0SWRUb1JlbW90ZU1hcChpZCwgcmVtb3RlTWF0Y2hJbmZvKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbW9kdWxlV3JhcHBlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb2R1bGVXcmFwcGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZU9yRmFjdG9yeTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZnJvbSA9ICdydW50aW1lJyB9ID0gb3B0aW9ucyB8fCB7XG4gICAgICAgICAgICAgICAgZnJvbTogJ3J1bnRpbWUnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZmFpbE92ZXIgPSBhd2FpdCB0aGlzLmhvb2tzLmxpZmVjeWNsZS5lcnJvckxvYWRSZW1vdGUuZW1pdCh7XG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgZnJvbSxcbiAgICAgICAgICAgICAgICBsaWZlY3ljbGU6ICdvbkxvYWQnLFxuICAgICAgICAgICAgICAgIG9yaWdpbjogaG9zdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWZhaWxPdmVyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFpbE92ZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9tZW1iZXItb3JkZXJpbmdcbiAgICBhc3luYyBwcmVsb2FkUmVtb3RlKHByZWxvYWRPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgaG9zdCB9ID0gdGhpcztcbiAgICAgICAgYXdhaXQgdGhpcy5ob29rcy5saWZlY3ljbGUuYmVmb3JlUHJlbG9hZFJlbW90ZS5lbWl0KHtcbiAgICAgICAgICAgIHByZWxvYWRPcHM6IHByZWxvYWRPcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9uczogaG9zdC5vcHRpb25zLFxuICAgICAgICAgICAgb3JpZ2luOiBob3N0XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwcmVsb2FkT3BzID0gZm9ybWF0UHJlbG9hZEFyZ3MoaG9zdC5vcHRpb25zLnJlbW90ZXMsIHByZWxvYWRPcHRpb25zKTtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJlbG9hZE9wcy5tYXAoYXN5bmMgKG9wcyk9PntcbiAgICAgICAgICAgIGNvbnN0IHsgcmVtb3RlIH0gPSBvcHM7XG4gICAgICAgICAgICBjb25zdCByZW1vdGVJbmZvID0gZ2V0UmVtb3RlSW5mbyhyZW1vdGUpO1xuICAgICAgICAgICAgY29uc3QgeyBnbG9iYWxTbmFwc2hvdCwgcmVtb3RlU25hcHNob3QgfSA9IGF3YWl0IGhvc3Quc25hcHNob3RIYW5kbGVyLmxvYWRSZW1vdGVTbmFwc2hvdEluZm8ocmVtb3RlKTtcbiAgICAgICAgICAgIGNvbnN0IGFzc2V0cyA9IGF3YWl0IHRoaXMuaG9va3MubGlmZWN5Y2xlLmdlbmVyYXRlUHJlbG9hZEFzc2V0cy5lbWl0KHtcbiAgICAgICAgICAgICAgICBvcmlnaW46IGhvc3QsXG4gICAgICAgICAgICAgICAgcHJlbG9hZE9wdGlvbnM6IG9wcyxcbiAgICAgICAgICAgICAgICByZW1vdGUsXG4gICAgICAgICAgICAgICAgcmVtb3RlSW5mbyxcbiAgICAgICAgICAgICAgICBnbG9iYWxTbmFwc2hvdCxcbiAgICAgICAgICAgICAgICByZW1vdGVTbmFwc2hvdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWFzc2V0cykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZWxvYWRBc3NldHMocmVtb3RlSW5mbywgaG9zdCwgYXNzZXRzKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICByZWdpc3RlclJlbW90ZXMocmVtb3Rlcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGhvc3QgfSA9IHRoaXM7XG4gICAgICAgIHJlbW90ZXMuZm9yRWFjaCgocmVtb3RlKT0+e1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlclJlbW90ZShyZW1vdGUsIGhvc3Qub3B0aW9ucy5yZW1vdGVzLCB7XG4gICAgICAgICAgICAgICAgZm9yY2U6IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZm9yY2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0UmVtb3RlTW9kdWxlQW5kT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgaG9zdCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBpZCB9ID0gb3B0aW9ucztcbiAgICAgICAgbGV0IGxvYWRSZW1vdGVBcmdzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9hZFJlbW90ZUFyZ3MgPSBhd2FpdCB0aGlzLmhvb2tzLmxpZmVjeWNsZS5iZWZvcmVSZXF1ZXN0LmVtaXQoe1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGhvc3Qub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBvcmlnaW46IGhvc3RcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbG9hZFJlbW90ZUFyZ3MgPSBhd2FpdCB0aGlzLmhvb2tzLmxpZmVjeWNsZS5lcnJvckxvYWRSZW1vdGUuZW1pdCh7XG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogaG9zdC5vcHRpb25zLFxuICAgICAgICAgICAgICAgIG9yaWdpbjogaG9zdCxcbiAgICAgICAgICAgICAgICBmcm9tOiAncnVudGltZScsXG4gICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgbGlmZWN5Y2xlOiAnYmVmb3JlUmVxdWVzdCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFsb2FkUmVtb3RlQXJncykge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgaWQ6IGlkUmVzIH0gPSBsb2FkUmVtb3RlQXJncztcbiAgICAgICAgY29uc3QgcmVtb3RlU3BsaXRJbmZvID0gbWF0Y2hSZW1vdGVXaXRoTmFtZUFuZEV4cG9zZShob3N0Lm9wdGlvbnMucmVtb3RlcywgaWRSZXMpO1xuICAgICAgICBhc3NlcnQocmVtb3RlU3BsaXRJbmZvLCBnZXRTaG9ydEVycm9yTXNnKFJVTlRJTUVfMDA0LCBydW50aW1lRGVzY01hcCwge1xuICAgICAgICAgICAgaG9zdE5hbWU6IGhvc3Qub3B0aW9ucy5uYW1lLFxuICAgICAgICAgICAgcmVxdWVzdElkOiBpZFJlc1xuICAgICAgICB9KSk7XG4gICAgICAgIGNvbnN0IHsgcmVtb3RlOiByYXdSZW1vdGUgfSA9IHJlbW90ZVNwbGl0SW5mbztcbiAgICAgICAgY29uc3QgcmVtb3RlSW5mbyA9IGdldFJlbW90ZUluZm8ocmF3UmVtb3RlKTtcbiAgICAgICAgY29uc3QgbWF0Y2hJbmZvID0gYXdhaXQgaG9zdC5zaGFyZWRIYW5kbGVyLmhvb2tzLmxpZmVjeWNsZS5hZnRlclJlc29sdmUuZW1pdChfZXh0ZW5kcyh7XG4gICAgICAgICAgICBpZDogaWRSZXNcbiAgICAgICAgfSwgcmVtb3RlU3BsaXRJbmZvLCB7XG4gICAgICAgICAgICBvcHRpb25zOiBob3N0Lm9wdGlvbnMsXG4gICAgICAgICAgICBvcmlnaW46IGhvc3QsXG4gICAgICAgICAgICByZW1vdGVJbmZvXG4gICAgICAgIH0pKTtcbiAgICAgICAgY29uc3QgeyByZW1vdGUsIGV4cG9zZSB9ID0gbWF0Y2hJbmZvO1xuICAgICAgICBhc3NlcnQocmVtb3RlICYmIGV4cG9zZSwgYFRoZSAnYmVmb3JlUmVxdWVzdCcgaG9vayB3YXMgZXhlY3V0ZWQsIGJ1dCBpdCBmYWlsZWQgdG8gcmV0dXJuIHRoZSBjb3JyZWN0ICdyZW1vdGUnIGFuZCAnZXhwb3NlJyB2YWx1ZXMgd2hpbGUgbG9hZGluZyAke2lkUmVzfS5gKTtcbiAgICAgICAgbGV0IG1vZHVsZSA9IGhvc3QubW9kdWxlQ2FjaGUuZ2V0KHJlbW90ZS5uYW1lKTtcbiAgICAgICAgY29uc3QgbW9kdWxlT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGhvc3Q6IGhvc3QsXG4gICAgICAgICAgICByZW1vdGVJbmZvXG4gICAgICAgIH07XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgICBtb2R1bGUgPSBuZXcgTW9kdWxlKG1vZHVsZU9wdGlvbnMpO1xuICAgICAgICAgICAgaG9zdC5tb2R1bGVDYWNoZS5zZXQocmVtb3RlLm5hbWUsIG1vZHVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1vZHVsZSxcbiAgICAgICAgICAgIG1vZHVsZU9wdGlvbnMsXG4gICAgICAgICAgICByZW1vdGVNYXRjaEluZm86IG1hdGNoSW5mb1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZWdpc3RlclJlbW90ZShyZW1vdGUsIHRhcmdldFJlbW90ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBob3N0IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBub3JtYWxpemVSZW1vdGUgPSAoKT0+e1xuICAgICAgICAgICAgaWYgKHJlbW90ZS5hbGlhcykge1xuICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIGlmIGFsaWFzIGVxdWFscyB0aGUgcHJlZml4IG9mIHJlbW90ZS5uYW1lIGFuZCByZW1vdGUuYWxpYXMsIGlmIHNvLCB0aHJvdyBhbiBlcnJvclxuICAgICAgICAgICAgICAgIC8vIEFzIG11bHRpLWxldmVsIHBhdGggcmVmZXJlbmNlcyBjYW5ub3QgZ3VhcmFudGVlIHVuaXF1ZSBuYW1lcywgYWxpYXMgYmVpbmcgYSBwcmVmaXggb2YgcmVtb3RlLm5hbWUgaXMgbm90IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbmRFcXVhbCA9IHRhcmdldFJlbW90ZXMuZmluZCgoaXRlbSk9PntcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVtX2FsaWFzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3RlLmFsaWFzICYmIChpdGVtLm5hbWUuc3RhcnRzV2l0aChyZW1vdGUuYWxpYXMpIHx8ICgoX2l0ZW1fYWxpYXMgPSBpdGVtLmFsaWFzKSA9PSBudWxsID8gdm9pZCAwIDogX2l0ZW1fYWxpYXMuc3RhcnRzV2l0aChyZW1vdGUuYWxpYXMpKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KCFmaW5kRXF1YWwsIGBUaGUgYWxpYXMgJHtyZW1vdGUuYWxpYXN9IG9mIHJlbW90ZSAke3JlbW90ZS5uYW1lfSBpcyBub3QgYWxsb3dlZCB0byBiZSB0aGUgcHJlZml4IG9mICR7ZmluZEVxdWFsICYmIGZpbmRFcXVhbC5uYW1lfSBuYW1lIG9yIGFsaWFzYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXQgdGhlIHJlbW90ZSBlbnRyeSB0byBhIGNvbXBsZXRlIHBhdGhcbiAgICAgICAgICAgIGlmICgnZW50cnknIGluIHJlbW90ZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc0Jyb3dzZXJFbnYoKSAmJiAhcmVtb3RlLmVudHJ5LnN0YXJ0c1dpdGgoJ2h0dHAnKSkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdGUuZW50cnkgPSBuZXcgVVJMKHJlbW90ZS5lbnRyeSwgd2luZG93LmxvY2F0aW9uLm9yaWdpbikuaHJlZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJlbW90ZS5zaGFyZVNjb3BlKSB7XG4gICAgICAgICAgICAgICAgcmVtb3RlLnNoYXJlU2NvcGUgPSBERUZBVUxUX1NDT1BFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFyZW1vdGUudHlwZSkge1xuICAgICAgICAgICAgICAgIHJlbW90ZS50eXBlID0gREVGQVVMVF9SRU1PVEVfVFlQRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5ob29rcy5saWZlY3ljbGUuYmVmb3JlUmVnaXN0ZXJSZW1vdGUuZW1pdCh7XG4gICAgICAgICAgICByZW1vdGUsXG4gICAgICAgICAgICBvcmlnaW46IGhvc3RcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlZ2lzdGVyZWRSZW1vdGUgPSB0YXJnZXRSZW1vdGVzLmZpbmQoKGl0ZW0pPT5pdGVtLm5hbWUgPT09IHJlbW90ZS5uYW1lKTtcbiAgICAgICAgaWYgKCFyZWdpc3RlcmVkUmVtb3RlKSB7XG4gICAgICAgICAgICBub3JtYWxpemVSZW1vdGUoKTtcbiAgICAgICAgICAgIHRhcmdldFJlbW90ZXMucHVzaChyZW1vdGUpO1xuICAgICAgICAgICAgdGhpcy5ob29rcy5saWZlY3ljbGUucmVnaXN0ZXJSZW1vdGUuZW1pdCh7XG4gICAgICAgICAgICAgICAgcmVtb3RlLFxuICAgICAgICAgICAgICAgIG9yaWdpbjogaG9zdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlcyA9IFtcbiAgICAgICAgICAgICAgICBgVGhlIHJlbW90ZSBcIiR7cmVtb3RlLm5hbWV9XCIgaXMgYWxyZWFkeSByZWdpc3RlcmVkLmAsXG4gICAgICAgICAgICAgICAgKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZm9yY2UpID8gJ0hvcGUgeW91IGhhdmUga25vd24gdGhhdCBPVkVSUklERSBpdCBtYXkgaGF2ZSBzb21lIHVuZXhwZWN0ZWQgZXJyb3JzJyA6ICdJZiB5b3Ugd2FudCB0byBtZXJnZSB0aGUgcmVtb3RlLCB5b3UgY2FuIHNldCBcImZvcmNlOiB0cnVlXCIuJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmZvcmNlKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHJlZ2lzdGVyZWQgcmVtb3RlXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVSZW1vdGUocmVnaXN0ZXJlZFJlbW90ZSk7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplUmVtb3RlKCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0UmVtb3Rlcy5wdXNoKHJlbW90ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5ob29rcy5saWZlY3ljbGUucmVnaXN0ZXJSZW1vdGUuZW1pdCh7XG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZSxcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luOiBob3N0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXJuJDEobWVzc2FnZXMuam9pbignICcpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVSZW1vdGUocmVtb3RlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGhvc3QgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IG5hbWUgfSA9IHJlbW90ZTtcbiAgICAgICAgICAgIGNvbnN0IHJlbW90ZUluZGV4ID0gaG9zdC5vcHRpb25zLnJlbW90ZXMuZmluZEluZGV4KChpdGVtKT0+aXRlbS5uYW1lID09PSBuYW1lKTtcbiAgICAgICAgICAgIGlmIChyZW1vdGVJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBob3N0Lm9wdGlvbnMucmVtb3Rlcy5zcGxpY2UocmVtb3RlSW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9hZGVkTW9kdWxlID0gaG9zdC5tb2R1bGVDYWNoZS5nZXQocmVtb3RlLm5hbWUpO1xuICAgICAgICAgICAgaWYgKGxvYWRlZE1vZHVsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbW90ZUluZm8gPSBsb2FkZWRNb2R1bGUucmVtb3RlSW5mbztcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSByZW1vdGVJbmZvLmVudHJ5R2xvYmFsTmFtZTtcbiAgICAgICAgICAgICAgICBpZiAoQ3VycmVudEdsb2JhbFtrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfT2JqZWN0X2dldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChfT2JqZWN0X2dldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoQ3VycmVudEdsb2JhbCwga2V5KSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9PYmplY3RfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIEN1cnJlbnRHbG9iYWxba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJlbnRHbG9iYWxba2V5XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByZW1vdGVFbnRyeVVuaXF1ZUtleSA9IGdldFJlbW90ZUVudHJ5VW5pcXVlS2V5KGxvYWRlZE1vZHVsZS5yZW1vdGVJbmZvKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsTG9hZGluZ1tyZW1vdGVFbnRyeVVuaXF1ZUtleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGdsb2JhbExvYWRpbmdbcmVtb3RlRW50cnlVbmlxdWVLZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBob3N0LnNuYXBzaG90SGFuZGxlci5tYW5pZmVzdENhY2hlLmRlbGV0ZShyZW1vdGVJbmZvLmVudHJ5KTtcbiAgICAgICAgICAgICAgICAvLyBkZWxldGUgdW5sb2FkZWQgc2hhcmVkIGFuZCBpbnN0YW5jZVxuICAgICAgICAgICAgICAgIGxldCByZW1vdGVJbnNJZCA9IHJlbW90ZUluZm8uYnVpbGRWZXJzaW9uID8gY29tcG9zZUtleVdpdGhTZXBhcmF0b3IocmVtb3RlSW5mby5uYW1lLCByZW1vdGVJbmZvLmJ1aWxkVmVyc2lvbikgOiByZW1vdGVJbmZvLm5hbWU7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3RlSW5zSW5kZXggPSBDdXJyZW50R2xvYmFsLl9fRkVERVJBVElPTl9fLl9fSU5TVEFOQ0VTX18uZmluZEluZGV4KChpbnMpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdGVJbmZvLmJ1aWxkVmVyc2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucy5vcHRpb25zLmlkID09PSByZW1vdGVJbnNJZDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnMubmFtZSA9PT0gcmVtb3RlSW5zSWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVtb3RlSW5zSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW90ZUlucyA9IEN1cnJlbnRHbG9iYWwuX19GRURFUkFUSU9OX18uX19JTlNUQU5DRVNfX1tyZW1vdGVJbnNJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZUluc0lkID0gcmVtb3RlSW5zLm9wdGlvbnMuaWQgfHwgcmVtb3RlSW5zSWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdsb2JhbFNoYXJlU2NvcGVNYXAgPSBnZXRHbG9iYWxTaGFyZVNjb3BlKCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpc0FsbFNoYXJlZE5vdFVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZWVkRGVsZXRlS2V5cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhnbG9iYWxTaGFyZVNjb3BlTWFwKS5mb3JFYWNoKChpbnN0SWQpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGFyZVNjb3BlTWFwID0gZ2xvYmFsU2hhcmVTY29wZU1hcFtpbnN0SWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVTY29wZU1hcCAmJiBPYmplY3Qua2V5cyhzaGFyZVNjb3BlTWFwKS5mb3JFYWNoKChzaGFyZVNjb3BlKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNoYXJlU2NvcGVWYWwgPSBzaGFyZVNjb3BlTWFwW3NoYXJlU2NvcGVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlU2NvcGVWYWwgJiYgT2JqZWN0LmtleXMoc2hhcmVTY29wZVZhbCkuZm9yRWFjaCgoc2hhcmVOYW1lKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGFyZWRQa2dzID0gc2hhcmVTY29wZVZhbFtzaGFyZU5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZWRQa2dzICYmIE9iamVjdC5rZXlzKHNoYXJlZFBrZ3MpLmZvckVhY2goKHNoYXJlVmVyc2lvbik9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNoYXJlZCA9IHNoYXJlZFBrZ3Nbc2hhcmVWZXJzaW9uXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGFyZWQgJiYgdHlwZW9mIHNoYXJlZCA9PT0gJ29iamVjdCcgJiYgc2hhcmVkLmZyb20gPT09IHJlbW90ZUluZm8ubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGFyZWQubG9hZGVkIHx8IHNoYXJlZC5sb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlZC51c2VJbiA9IHNoYXJlZC51c2VJbi5maWx0ZXIoKHVzZWRIb3N0TmFtZSk9PnVzZWRIb3N0TmFtZSAhPT0gcmVtb3RlSW5mby5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYXJlZC51c2VJbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQWxsU2hhcmVkTm90VXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVlZERlbGV0ZUtleXMucHVzaChbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlU2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlVmVyc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkRGVsZXRlS2V5cy5wdXNoKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlU2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFyZVZlcnNpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWxsU2hhcmVkTm90VXNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlSW5zLnNoYXJlU2NvcGVNYXAgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBnbG9iYWxTaGFyZVNjb3BlTWFwW3JlbW90ZUluc0lkXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuZWVkRGVsZXRlS2V5cy5mb3JFYWNoKChbaW5zSWQsIHNoYXJlU2NvcGUsIHNoYXJlTmFtZSwgc2hhcmVWZXJzaW9uXSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZ2xvYmFsU2hhcmVTY29wZU1hcF9pbnNJZF9zaGFyZVNjb3BlX3NoYXJlTmFtZSwgX2dsb2JhbFNoYXJlU2NvcGVNYXBfaW5zSWRfc2hhcmVTY29wZSwgX2dsb2JhbFNoYXJlU2NvcGVNYXBfaW5zSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAoX2dsb2JhbFNoYXJlU2NvcGVNYXBfaW5zSWQgPSBnbG9iYWxTaGFyZVNjb3BlTWFwW2luc0lkXSkgPT0gbnVsbCA/IHRydWUgOiAoX2dsb2JhbFNoYXJlU2NvcGVNYXBfaW5zSWRfc2hhcmVTY29wZSA9IF9nbG9iYWxTaGFyZVNjb3BlTWFwX2luc0lkW3NoYXJlU2NvcGVdKSA9PSBudWxsID8gdHJ1ZSA6IChfZ2xvYmFsU2hhcmVTY29wZU1hcF9pbnNJZF9zaGFyZVNjb3BlX3NoYXJlTmFtZSA9IF9nbG9iYWxTaGFyZVNjb3BlTWFwX2luc0lkX3NoYXJlU2NvcGVbc2hhcmVOYW1lXSkgPT0gbnVsbCA/IHRydWUgOiBkZWxldGUgX2dsb2JhbFNoYXJlU2NvcGVNYXBfaW5zSWRfc2hhcmVTY29wZV9zaGFyZU5hbWVbc2hhcmVWZXJzaW9uXTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIEN1cnJlbnRHbG9iYWwuX19GRURFUkFUSU9OX18uX19JTlNUQU5DRVNfXy5zcGxpY2UocmVtb3RlSW5zSW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IGhvc3RHbG9iYWxTbmFwc2hvdCB9ID0gZ2V0R2xvYmFsUmVtb3RlSW5mbyhyZW1vdGUsIGhvc3QpO1xuICAgICAgICAgICAgICAgIGlmIChob3N0R2xvYmFsU25hcHNob3QpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtb3RlS2V5ID0gaG9zdEdsb2JhbFNuYXBzaG90ICYmICdyZW1vdGVzSW5mbycgaW4gaG9zdEdsb2JhbFNuYXBzaG90ICYmIGhvc3RHbG9iYWxTbmFwc2hvdC5yZW1vdGVzSW5mbyAmJiBnZXRJbmZvV2l0aG91dFR5cGUoaG9zdEdsb2JhbFNuYXBzaG90LnJlbW90ZXNJbmZvLCByZW1vdGUubmFtZSkua2V5O1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3RlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaG9zdEdsb2JhbFNuYXBzaG90LnJlbW90ZXNJbmZvW3JlbW90ZUtleV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0XG4gICAgICAgICAgICAgICAgICAgICAgICBCb29sZWFuKEdsb2JhbC5fX0ZFREVSQVRJT05fXy5fX01BTklGRVNUX0xPQURJTkdfX1tyZW1vdGVLZXldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBHbG9iYWwuX19GRURFUkFUSU9OX18uX19NQU5JRkVTVF9MT0FESU5HX19bcmVtb3RlS2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBob3N0Lm1vZHVsZUNhY2hlLmRlbGV0ZShyZW1vdGUubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgbG9nZ2VyLmxvZygncmVtb3ZlUmVtb3RlIGZhaWw6ICcsIGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3RydWN0b3IoaG9zdCl7XG4gICAgICAgIHRoaXMuaG9va3MgPSBuZXcgUGx1Z2luU3lzdGVtKHtcbiAgICAgICAgICAgIGJlZm9yZVJlZ2lzdGVyUmVtb3RlOiBuZXcgU3luY1dhdGVyZmFsbEhvb2soJ2JlZm9yZVJlZ2lzdGVyUmVtb3RlJyksXG4gICAgICAgICAgICByZWdpc3RlclJlbW90ZTogbmV3IFN5bmNXYXRlcmZhbGxIb29rKCdyZWdpc3RlclJlbW90ZScpLFxuICAgICAgICAgICAgYmVmb3JlUmVxdWVzdDogbmV3IEFzeW5jV2F0ZXJmYWxsSG9vaygnYmVmb3JlUmVxdWVzdCcpLFxuICAgICAgICAgICAgb25Mb2FkOiBuZXcgQXN5bmNIb29rKCdvbkxvYWQnKSxcbiAgICAgICAgICAgIGhhbmRsZVByZWxvYWRNb2R1bGU6IG5ldyBTeW5jSG9vaygnaGFuZGxlUHJlbG9hZE1vZHVsZScpLFxuICAgICAgICAgICAgZXJyb3JMb2FkUmVtb3RlOiBuZXcgQXN5bmNIb29rKCdlcnJvckxvYWRSZW1vdGUnKSxcbiAgICAgICAgICAgIGJlZm9yZVByZWxvYWRSZW1vdGU6IG5ldyBBc3luY0hvb2soJ2JlZm9yZVByZWxvYWRSZW1vdGUnKSxcbiAgICAgICAgICAgIGdlbmVyYXRlUHJlbG9hZEFzc2V0czogbmV3IEFzeW5jSG9vaygnZ2VuZXJhdGVQcmVsb2FkQXNzZXRzJyksXG4gICAgICAgICAgICAvLyBub3QgdXNlZCB5ZXRcbiAgICAgICAgICAgIGFmdGVyUHJlbG9hZFJlbW90ZTogbmV3IEFzeW5jSG9vaygpLFxuICAgICAgICAgICAgbG9hZEVudHJ5OiBuZXcgQXN5bmNIb29rKClcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaG9zdCA9IGhvc3Q7XG4gICAgICAgIHRoaXMuaWRUb1JlbW90ZU1hcCA9IHt9O1xuICAgIH1cbn1cblxuY2xhc3MgRmVkZXJhdGlvbkhvc3Qge1xuICAgIGluaXRPcHRpb25zKHVzZXJPcHRpb25zKSB7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJQbHVnaW5zKHVzZXJPcHRpb25zLnBsdWdpbnMpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5mb3JtYXRPcHRpb25zKHRoaXMub3B0aW9ucywgdXNlck9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG4gICAgYXN5bmMgbG9hZFNoYXJlKHBrZ05hbWUsIGV4dHJhT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5zaGFyZWRIYW5kbGVyLmxvYWRTaGFyZShwa2dOYW1lLCBleHRyYU9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyBUaGUgbGliIGZ1bmN0aW9uIHdpbGwgb25seSBiZSBhdmFpbGFibGUgaWYgdGhlIHNoYXJlZCBzZXQgYnkgZWFnZXIgb3IgcnVudGltZSBpbml0IGlzIHNldCBvciB0aGUgc2hhcmVkIGlzIHN1Y2Nlc3NmdWxseSBsb2FkZWQuXG4gICAgLy8gMS4gSWYgdGhlIGxvYWRlZCBzaGFyZWQgYWxyZWFkeSBleGlzdHMgZ2xvYmFsbHksIHRoZW4gaXQgd2lsbCBiZSByZXVzZWRcbiAgICAvLyAyLiBJZiBsaWIgZXhpc3RzIGluIGxvY2FsIHNoYXJlZCwgaXQgd2lsbCBiZSB1c2VkIGRpcmVjdGx5XG4gICAgLy8gMy4gSWYgdGhlIGxvY2FsIGdldCByZXR1cm5zIHNvbWV0aGluZyBvdGhlciB0aGFuIFByb21pc2UsIHRoZW4gaXQgd2lsbCBiZSB1c2VkIGRpcmVjdGx5XG4gICAgbG9hZFNoYXJlU3luYyhwa2dOYW1lLCBleHRyYU9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hhcmVkSGFuZGxlci5sb2FkU2hhcmVTeW5jKHBrZ05hbWUsIGV4dHJhT3B0aW9ucyk7XG4gICAgfVxuICAgIGluaXRpYWxpemVTaGFyaW5nKHNoYXJlU2NvcGVOYW1lID0gREVGQVVMVF9TQ09QRSwgZXh0cmFPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNoYXJlZEhhbmRsZXIuaW5pdGlhbGl6ZVNoYXJpbmcoc2hhcmVTY29wZU5hbWUsIGV4dHJhT3B0aW9ucyk7XG4gICAgfVxuICAgIGluaXRSYXdDb250YWluZXIobmFtZSwgdXJsLCBjb250YWluZXIpIHtcbiAgICAgICAgY29uc3QgcmVtb3RlSW5mbyA9IGdldFJlbW90ZUluZm8oe1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGVudHJ5OiB1cmxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG1vZHVsZSA9IG5ldyBNb2R1bGUoe1xuICAgICAgICAgICAgaG9zdDogdGhpcyxcbiAgICAgICAgICAgIHJlbW90ZUluZm9cbiAgICAgICAgfSk7XG4gICAgICAgIG1vZHVsZS5yZW1vdGVFbnRyeUV4cG9ydHMgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMubW9kdWxlQ2FjaGUuc2V0KG5hbWUsIG1vZHVsZSk7XG4gICAgICAgIHJldHVybiBtb2R1bGU7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGluZXMtcGVyLWZ1bmN0aW9uXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9tZW1iZXItb3JkZXJpbmdcbiAgICBhc3luYyBsb2FkUmVtb3RlKGlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbW90ZUhhbmRsZXIubG9hZFJlbW90ZShpZCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbWVtYmVyLW9yZGVyaW5nXG4gICAgYXN5bmMgcHJlbG9hZFJlbW90ZShwcmVsb2FkT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdGVIYW5kbGVyLnByZWxvYWRSZW1vdGUocHJlbG9hZE9wdGlvbnMpO1xuICAgIH1cbiAgICBpbml0U2hhcmVTY29wZU1hcChzY29wZU5hbWUsIHNoYXJlU2NvcGUsIGV4dHJhT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuc2hhcmVkSGFuZGxlci5pbml0U2hhcmVTY29wZU1hcChzY29wZU5hbWUsIHNoYXJlU2NvcGUsIGV4dHJhT3B0aW9ucyk7XG4gICAgfVxuICAgIGZvcm1hdE9wdGlvbnMoZ2xvYmFsT3B0aW9ucywgdXNlck9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBzaGFyZWQgfSA9IGZvcm1hdFNoYXJlQ29uZmlncyhnbG9iYWxPcHRpb25zLCB1c2VyT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHsgdXNlck9wdGlvbnM6IHVzZXJPcHRpb25zUmVzLCBvcHRpb25zOiBnbG9iYWxPcHRpb25zUmVzIH0gPSB0aGlzLmhvb2tzLmxpZmVjeWNsZS5iZWZvcmVJbml0LmVtaXQoe1xuICAgICAgICAgICAgb3JpZ2luOiB0aGlzLFxuICAgICAgICAgICAgdXNlck9wdGlvbnMsXG4gICAgICAgICAgICBvcHRpb25zOiBnbG9iYWxPcHRpb25zLFxuICAgICAgICAgICAgc2hhcmVJbmZvOiBzaGFyZWRcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlbW90ZXMgPSB0aGlzLnJlbW90ZUhhbmRsZXIuZm9ybWF0QW5kUmVnaXN0ZXJSZW1vdGUoZ2xvYmFsT3B0aW9uc1JlcywgdXNlck9wdGlvbnNSZXMpO1xuICAgICAgICBjb25zdCB7IHNoYXJlZDogaGFuZGxlZFNoYXJlZCB9ID0gdGhpcy5zaGFyZWRIYW5kbGVyLnJlZ2lzdGVyU2hhcmVkKGdsb2JhbE9wdGlvbnNSZXMsIHVzZXJPcHRpb25zUmVzKTtcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IFtcbiAgICAgICAgICAgIC4uLmdsb2JhbE9wdGlvbnNSZXMucGx1Z2luc1xuICAgICAgICBdO1xuICAgICAgICBpZiAodXNlck9wdGlvbnNSZXMucGx1Z2lucykge1xuICAgICAgICAgICAgdXNlck9wdGlvbnNSZXMucGx1Z2lucy5mb3JFYWNoKChwbHVnaW4pPT57XG4gICAgICAgICAgICAgICAgaWYgKCFwbHVnaW5zLmluY2x1ZGVzKHBsdWdpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9uc1JlcyA9IF9leHRlbmRzKHt9LCBnbG9iYWxPcHRpb25zLCB1c2VyT3B0aW9ucywge1xuICAgICAgICAgICAgcGx1Z2lucyxcbiAgICAgICAgICAgIHJlbW90ZXMsXG4gICAgICAgICAgICBzaGFyZWQ6IGhhbmRsZWRTaGFyZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaG9va3MubGlmZWN5Y2xlLmluaXQuZW1pdCh7XG4gICAgICAgICAgICBvcmlnaW46IHRoaXMsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zUmVzXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb3B0aW9uc1JlcztcbiAgICB9XG4gICAgcmVnaXN0ZXJQbHVnaW5zKHBsdWdpbnMpIHtcbiAgICAgICAgY29uc3QgcGx1Z2luUmVzID0gcmVnaXN0ZXJQbHVnaW5zJDEocGx1Z2lucywgW1xuICAgICAgICAgICAgdGhpcy5ob29rcyxcbiAgICAgICAgICAgIHRoaXMucmVtb3RlSGFuZGxlci5ob29rcyxcbiAgICAgICAgICAgIHRoaXMuc2hhcmVkSGFuZGxlci5ob29rcyxcbiAgICAgICAgICAgIHRoaXMuc25hcHNob3RIYW5kbGVyLmhvb2tzLFxuICAgICAgICAgICAgdGhpcy5sb2FkZXJIb29rXG4gICAgICAgIF0pO1xuICAgICAgICAvLyBNZXJnZSBwbHVnaW5cbiAgICAgICAgdGhpcy5vcHRpb25zLnBsdWdpbnMgPSB0aGlzLm9wdGlvbnMucGx1Z2lucy5yZWR1Y2UoKHJlcywgcGx1Z2luKT0+e1xuICAgICAgICAgICAgaWYgKCFwbHVnaW4pIHJldHVybiByZXM7XG4gICAgICAgICAgICBpZiAocmVzICYmICFyZXMuZmluZCgoaXRlbSk9Pml0ZW0ubmFtZSA9PT0gcGx1Z2luLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2gocGx1Z2luKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0sIHBsdWdpblJlcyB8fCBbXSk7XG4gICAgfVxuICAgIHJlZ2lzdGVyUmVtb3RlcyhyZW1vdGVzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbW90ZUhhbmRsZXIucmVnaXN0ZXJSZW1vdGVzKHJlbW90ZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcih1c2VyT3B0aW9ucyl7XG4gICAgICAgIHRoaXMuaG9va3MgPSBuZXcgUGx1Z2luU3lzdGVtKHtcbiAgICAgICAgICAgIGJlZm9yZUluaXQ6IG5ldyBTeW5jV2F0ZXJmYWxsSG9vaygnYmVmb3JlSW5pdCcpLFxuICAgICAgICAgICAgaW5pdDogbmV3IFN5bmNIb29rKCksXG4gICAgICAgICAgICAvLyBtYXliZSB3aWxsIGNoYW5nZSwgdGVtcG9yYXJpbHkgZm9yIGludGVybmFsIHVzZSBvbmx5XG4gICAgICAgICAgICBiZWZvcmVJbml0Q29udGFpbmVyOiBuZXcgQXN5bmNXYXRlcmZhbGxIb29rKCdiZWZvcmVJbml0Q29udGFpbmVyJyksXG4gICAgICAgICAgICAvLyBtYXliZSB3aWxsIGNoYW5nZSwgdGVtcG9yYXJpbHkgZm9yIGludGVybmFsIHVzZSBvbmx5XG4gICAgICAgICAgICBpbml0Q29udGFpbmVyOiBuZXcgQXN5bmNXYXRlcmZhbGxIb29rKCdpbml0Q29udGFpbmVyJylcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IFwiMC43LjNcIjtcbiAgICAgICAgdGhpcy5tb2R1bGVDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5sb2FkZXJIb29rID0gbmV3IFBsdWdpblN5c3RlbSh7XG4gICAgICAgICAgICAvLyBGSVhNRTogbWF5IG5vdCBiZSBzdWl0YWJsZSAsIG5vdCBvcGVuIHRvIHRoZSBwdWJsaWMgeWV0XG4gICAgICAgICAgICBnZXRNb2R1bGVJbmZvOiBuZXcgU3luY0hvb2soKSxcbiAgICAgICAgICAgIGNyZWF0ZVNjcmlwdDogbmV3IFN5bmNIb29rKCksXG4gICAgICAgICAgICBjcmVhdGVMaW5rOiBuZXcgU3luY0hvb2soKSxcbiAgICAgICAgICAgIC8vIG9ubHkgd29yayBmb3IgbWFuaWZlc3QgLCBzbyBub3Qgb3BlbiB0byB0aGUgcHVibGljIHlldFxuICAgICAgICAgICAgZmV0Y2g6IG5ldyBBc3luY0hvb2soKSxcbiAgICAgICAgICAgIGdldE1vZHVsZUZhY3Rvcnk6IG5ldyBBc3luY0hvb2soKVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVE9ETzogVmFsaWRhdGUgdGhlIGRldGFpbHMgb2YgdGhlIG9wdGlvbnNcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBvcHRpb25zIHdpdGggZGVmYXVsdCB2YWx1ZXNcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBpZDogZ2V0QnVpbGRlcklkKCksXG4gICAgICAgICAgICBuYW1lOiB1c2VyT3B0aW9ucy5uYW1lLFxuICAgICAgICAgICAgcGx1Z2luczogW1xuICAgICAgICAgICAgICAgIHNuYXBzaG90UGx1Z2luKCksXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVQcmVsb2FkQXNzZXRzUGx1Z2luKClcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICByZW1vdGVzOiBbXSxcbiAgICAgICAgICAgIHNoYXJlZDoge30sXG4gICAgICAgICAgICBpbkJyb3dzZXI6IGlzQnJvd3NlckVudigpXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubmFtZSA9IHVzZXJPcHRpb25zLm5hbWU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuICAgICAgICB0aGlzLnNuYXBzaG90SGFuZGxlciA9IG5ldyBTbmFwc2hvdEhhbmRsZXIodGhpcyk7XG4gICAgICAgIHRoaXMuc2hhcmVkSGFuZGxlciA9IG5ldyBTaGFyZWRIYW5kbGVyKHRoaXMpO1xuICAgICAgICB0aGlzLnJlbW90ZUhhbmRsZXIgPSBuZXcgUmVtb3RlSGFuZGxlcih0aGlzKTtcbiAgICAgICAgdGhpcy5zaGFyZVNjb3BlTWFwID0gdGhpcy5zaGFyZWRIYW5kbGVyLnNoYXJlU2NvcGVNYXA7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJQbHVnaW5zKFtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRPcHRpb25zLnBsdWdpbnMsXG4gICAgICAgICAgICAuLi51c2VyT3B0aW9ucy5wbHVnaW5zIHx8IFtdXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmZvcm1hdE9wdGlvbnMoZGVmYXVsdE9wdGlvbnMsIHVzZXJPcHRpb25zKTtcbiAgICB9XG59XG5cbmxldCBGZWRlcmF0aW9uSW5zdGFuY2UgPSBudWxsO1xuZnVuY3Rpb24gaW5pdChvcHRpb25zKSB7XG4gICAgLy8gUmV0cmlldmUgdGhlIHNhbWUgaW5zdGFuY2Ugd2l0aCB0aGUgc2FtZSBuYW1lXG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRHbG9iYWxGZWRlcmF0aW9uSW5zdGFuY2Uob3B0aW9ucy5uYW1lLCBvcHRpb25zLnZlcnNpb24pO1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgICAgLy8gUmV0cmlldmUgZGVidWcgY29uc3RydWN0b3JcbiAgICAgICAgY29uc3QgRmVkZXJhdGlvbkNvbnN0cnVjdG9yID0gZ2V0R2xvYmFsRmVkZXJhdGlvbkNvbnN0cnVjdG9yKCkgfHwgRmVkZXJhdGlvbkhvc3Q7XG4gICAgICAgIEZlZGVyYXRpb25JbnN0YW5jZSA9IG5ldyBGZWRlcmF0aW9uQ29uc3RydWN0b3Iob3B0aW9ucyk7XG4gICAgICAgIHNldEdsb2JhbEZlZGVyYXRpb25JbnN0YW5jZShGZWRlcmF0aW9uSW5zdGFuY2UpO1xuICAgICAgICByZXR1cm4gRmVkZXJhdGlvbkluc3RhbmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1lcmdlIG9wdGlvbnNcbiAgICAgICAgaW5zdGFuY2UuaW5pdE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGlmICghRmVkZXJhdGlvbkluc3RhbmNlKSB7XG4gICAgICAgICAgICBGZWRlcmF0aW9uSW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxufVxuZnVuY3Rpb24gbG9hZFJlbW90ZSguLi5hcmdzKSB7XG4gICAgYXNzZXJ0KEZlZGVyYXRpb25JbnN0YW5jZSwgJ1BsZWFzZSBjYWxsIGluaXQgZmlyc3QnKTtcbiAgICBjb25zdCBsb2FkUmVtb3RlMSA9IEZlZGVyYXRpb25JbnN0YW5jZS5sb2FkUmVtb3RlO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG4gICAgcmV0dXJuIGxvYWRSZW1vdGUxLmFwcGx5KEZlZGVyYXRpb25JbnN0YW5jZSwgYXJncyk7XG59XG5mdW5jdGlvbiBsb2FkU2hhcmUoLi4uYXJncykge1xuICAgIGFzc2VydChGZWRlcmF0aW9uSW5zdGFuY2UsICdQbGVhc2UgY2FsbCBpbml0IGZpcnN0Jyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgICBjb25zdCBsb2FkU2hhcmUxID0gRmVkZXJhdGlvbkluc3RhbmNlLmxvYWRTaGFyZTtcbiAgICByZXR1cm4gbG9hZFNoYXJlMS5hcHBseShGZWRlcmF0aW9uSW5zdGFuY2UsIGFyZ3MpO1xufVxuZnVuY3Rpb24gbG9hZFNoYXJlU3luYyguLi5hcmdzKSB7XG4gICAgYXNzZXJ0KEZlZGVyYXRpb25JbnN0YW5jZSwgJ1BsZWFzZSBjYWxsIGluaXQgZmlyc3QnKTtcbiAgICBjb25zdCBsb2FkU2hhcmVTeW5jMSA9IEZlZGVyYXRpb25JbnN0YW5jZS5sb2FkU2hhcmVTeW5jO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG4gICAgcmV0dXJuIGxvYWRTaGFyZVN5bmMxLmFwcGx5KEZlZGVyYXRpb25JbnN0YW5jZSwgYXJncyk7XG59XG5mdW5jdGlvbiBwcmVsb2FkUmVtb3RlKC4uLmFyZ3MpIHtcbiAgICBhc3NlcnQoRmVkZXJhdGlvbkluc3RhbmNlLCAnUGxlYXNlIGNhbGwgaW5pdCBmaXJzdCcpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG4gICAgcmV0dXJuIEZlZGVyYXRpb25JbnN0YW5jZS5wcmVsb2FkUmVtb3RlLmFwcGx5KEZlZGVyYXRpb25JbnN0YW5jZSwgYXJncyk7XG59XG5mdW5jdGlvbiByZWdpc3RlclJlbW90ZXMoLi4uYXJncykge1xuICAgIGFzc2VydChGZWRlcmF0aW9uSW5zdGFuY2UsICdQbGVhc2UgY2FsbCBpbml0IGZpcnN0Jyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgICByZXR1cm4gRmVkZXJhdGlvbkluc3RhbmNlLnJlZ2lzdGVyUmVtb3Rlcy5hcHBseShGZWRlcmF0aW9uSW5zdGFuY2UsIGFyZ3MpO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJQbHVnaW5zKC4uLmFyZ3MpIHtcbiAgICBhc3NlcnQoRmVkZXJhdGlvbkluc3RhbmNlLCAnUGxlYXNlIGNhbGwgaW5pdCBmaXJzdCcpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG4gICAgcmV0dXJuIEZlZGVyYXRpb25JbnN0YW5jZS5yZWdpc3RlclBsdWdpbnMuYXBwbHkoRmVkZXJhdGlvbkluc3RhbmNlLCBhcmdzKTtcbn1cbmZ1bmN0aW9uIGdldEluc3RhbmNlKCkge1xuICAgIHJldHVybiBGZWRlcmF0aW9uSW5zdGFuY2U7XG59XG4vLyBJbmplY3QgZm9yIGRlYnVnXG5zZXRHbG9iYWxGZWRlcmF0aW9uQ29uc3RydWN0b3IoRmVkZXJhdGlvbkhvc3QpO1xuXG5leHBvcnQgeyBGZWRlcmF0aW9uSG9zdCwgTW9kdWxlLCBnZXRJbnN0YW5jZSwgZ2V0UmVtb3RlRW50cnksIGdldFJlbW90ZUluZm8sIGluaXQsIGxvYWRSZW1vdGUsIGxvYWRTaGFyZSwgbG9hZFNoYXJlU3luYywgcHJlbG9hZFJlbW90ZSwgcmVnaXN0ZXJQbHVnaW5zLCByZWdpc3RlclJlbW90ZXMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/index.esm.mjs\n");

/***/ }),

/***/ "../node_modules/.pnpm/@module-federation+error-codes@0.7.3/node_modules/@module-federation/error-codes/dist/index.esm.mjs":
/*!*********************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+error-codes@0.7.3/node_modules/@module-federation/error-codes/dist/index.esm.mjs ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RUNTIME_001: () => (/* binding */ RUNTIME_001),\n/* harmony export */   RUNTIME_002: () => (/* binding */ RUNTIME_002),\n/* harmony export */   RUNTIME_003: () => (/* binding */ RUNTIME_003),\n/* harmony export */   RUNTIME_004: () => (/* binding */ RUNTIME_004),\n/* harmony export */   RUNTIME_005: () => (/* binding */ RUNTIME_005),\n/* harmony export */   RUNTIME_006: () => (/* binding */ RUNTIME_006),\n/* harmony export */   RUNTIME_007: () => (/* binding */ RUNTIME_007),\n/* harmony export */   TYPE_001: () => (/* binding */ TYPE_001),\n/* harmony export */   errorDescMap: () => (/* binding */ errorDescMap),\n/* harmony export */   getShortErrorMsg: () => (/* binding */ getShortErrorMsg),\n/* harmony export */   runtimeDescMap: () => (/* binding */ runtimeDescMap),\n/* harmony export */   typeDescMap: () => (/* binding */ typeDescMap)\n/* harmony export */ });\nconst RUNTIME_001 = 'RUNTIME-001';\nconst RUNTIME_002 = 'RUNTIME-002';\nconst RUNTIME_003 = 'RUNTIME-003';\nconst RUNTIME_004 = 'RUNTIME-004';\nconst RUNTIME_005 = 'RUNTIME-005';\nconst RUNTIME_006 = 'RUNTIME-006';\nconst RUNTIME_007 = 'RUNTIME-007';\nconst TYPE_001 = 'TYPE-001';\n\nconst getDocsUrl = (errorCode)=>{\n    const type = errorCode.split('-')[0].toLowerCase();\n    return `https://module-federation.io/guide/troubleshooting/${type}/${errorCode}`;\n};\nconst getShortErrorMsg = (errorCode, errorDescMap, args, originalErrorMsg)=>{\n    const msg = [\n        `${[\n            errorDescMap[errorCode]\n        ]} #${errorCode}`\n    ];\n    args && msg.push(`args: ${JSON.stringify(args)}`);\n    msg.push(getDocsUrl(errorCode));\n    originalErrorMsg && msg.push(`Original Error Message:\\n ${originalErrorMsg}`);\n    return msg.join('\\n');\n};\n\nfunction _extends() {\n    _extends = Object.assign || function assign(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n\nconst runtimeDescMap = {\n    [RUNTIME_001]: 'Failed to get remoteEntry exports.',\n    [RUNTIME_002]: 'The remote entry interface does not contain \"init\"',\n    [RUNTIME_003]: 'Failed to get manifest.',\n    [RUNTIME_004]: 'Failed to locate remote.',\n    [RUNTIME_005]: 'Invalid loadShareSync function call from bundler runtime',\n    [RUNTIME_006]: 'Invalid loadShareSync function call from runtime',\n    [RUNTIME_007]: 'Failed to get remote snapshot.'\n};\nconst typeDescMap = {\n    [TYPE_001]: 'Failed to generate type declaration.'\n};\nconst errorDescMap = _extends({}, runtimeDescMap, typeDescMap);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Btb2R1bGUtZmVkZXJhdGlvbitlcnJvci1jb2Rlc0AwLjcuMy9ub2RlX21vZHVsZXMvQG1vZHVsZS1mZWRlcmF0aW9uL2Vycm9yLWNvZGVzL2Rpc3QvaW5kZXguZXNtLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpRUFBaUUsS0FBSyxHQUFHLFVBQVU7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVyxHQUFHLFVBQVU7QUFDeEI7QUFDQSw4QkFBOEIscUJBQXFCO0FBQ25EO0FBQ0EsOERBQThELGlCQUFpQjtBQUMvRTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQzs7QUFFNEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob21lLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AbW9kdWxlLWZlZGVyYXRpb24rZXJyb3ItY29kZXNAMC43LjMvbm9kZV9tb2R1bGVzL0Btb2R1bGUtZmVkZXJhdGlvbi9lcnJvci1jb2Rlcy9kaXN0L2luZGV4LmVzbS5tanM/OGNmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSVU5USU1FXzAwMSA9ICdSVU5USU1FLTAwMSc7XG5jb25zdCBSVU5USU1FXzAwMiA9ICdSVU5USU1FLTAwMic7XG5jb25zdCBSVU5USU1FXzAwMyA9ICdSVU5USU1FLTAwMyc7XG5jb25zdCBSVU5USU1FXzAwNCA9ICdSVU5USU1FLTAwNCc7XG5jb25zdCBSVU5USU1FXzAwNSA9ICdSVU5USU1FLTAwNSc7XG5jb25zdCBSVU5USU1FXzAwNiA9ICdSVU5USU1FLTAwNic7XG5jb25zdCBSVU5USU1FXzAwNyA9ICdSVU5USU1FLTAwNyc7XG5jb25zdCBUWVBFXzAwMSA9ICdUWVBFLTAwMSc7XG5cbmNvbnN0IGdldERvY3NVcmwgPSAoZXJyb3JDb2RlKT0+e1xuICAgIGNvbnN0IHR5cGUgPSBlcnJvckNvZGUuc3BsaXQoJy0nKVswXS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBgaHR0cHM6Ly9tb2R1bGUtZmVkZXJhdGlvbi5pby9ndWlkZS90cm91Ymxlc2hvb3RpbmcvJHt0eXBlfS8ke2Vycm9yQ29kZX1gO1xufTtcbmNvbnN0IGdldFNob3J0RXJyb3JNc2cgPSAoZXJyb3JDb2RlLCBlcnJvckRlc2NNYXAsIGFyZ3MsIG9yaWdpbmFsRXJyb3JNc2cpPT57XG4gICAgY29uc3QgbXNnID0gW1xuICAgICAgICBgJHtbXG4gICAgICAgICAgICBlcnJvckRlc2NNYXBbZXJyb3JDb2RlXVxuICAgICAgICBdfSAjJHtlcnJvckNvZGV9YFxuICAgIF07XG4gICAgYXJncyAmJiBtc2cucHVzaChgYXJnczogJHtKU09OLnN0cmluZ2lmeShhcmdzKX1gKTtcbiAgICBtc2cucHVzaChnZXREb2NzVXJsKGVycm9yQ29kZSkpO1xuICAgIG9yaWdpbmFsRXJyb3JNc2cgJiYgbXNnLnB1c2goYE9yaWdpbmFsIEVycm9yIE1lc3NhZ2U6XFxuICR7b3JpZ2luYWxFcnJvck1zZ31gKTtcbiAgICByZXR1cm4gbXNnLmpvaW4oJ1xcbicpO1xufTtcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gICAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHtcbiAgICAgICAgZm9yKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gc291cmNlKWlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuY29uc3QgcnVudGltZURlc2NNYXAgPSB7XG4gICAgW1JVTlRJTUVfMDAxXTogJ0ZhaWxlZCB0byBnZXQgcmVtb3RlRW50cnkgZXhwb3J0cy4nLFxuICAgIFtSVU5USU1FXzAwMl06ICdUaGUgcmVtb3RlIGVudHJ5IGludGVyZmFjZSBkb2VzIG5vdCBjb250YWluIFwiaW5pdFwiJyxcbiAgICBbUlVOVElNRV8wMDNdOiAnRmFpbGVkIHRvIGdldCBtYW5pZmVzdC4nLFxuICAgIFtSVU5USU1FXzAwNF06ICdGYWlsZWQgdG8gbG9jYXRlIHJlbW90ZS4nLFxuICAgIFtSVU5USU1FXzAwNV06ICdJbnZhbGlkIGxvYWRTaGFyZVN5bmMgZnVuY3Rpb24gY2FsbCBmcm9tIGJ1bmRsZXIgcnVudGltZScsXG4gICAgW1JVTlRJTUVfMDA2XTogJ0ludmFsaWQgbG9hZFNoYXJlU3luYyBmdW5jdGlvbiBjYWxsIGZyb20gcnVudGltZScsXG4gICAgW1JVTlRJTUVfMDA3XTogJ0ZhaWxlZCB0byBnZXQgcmVtb3RlIHNuYXBzaG90Lidcbn07XG5jb25zdCB0eXBlRGVzY01hcCA9IHtcbiAgICBbVFlQRV8wMDFdOiAnRmFpbGVkIHRvIGdlbmVyYXRlIHR5cGUgZGVjbGFyYXRpb24uJ1xufTtcbmNvbnN0IGVycm9yRGVzY01hcCA9IF9leHRlbmRzKHt9LCBydW50aW1lRGVzY01hcCwgdHlwZURlc2NNYXApO1xuXG5leHBvcnQgeyBSVU5USU1FXzAwMSwgUlVOVElNRV8wMDIsIFJVTlRJTUVfMDAzLCBSVU5USU1FXzAwNCwgUlVOVElNRV8wMDUsIFJVTlRJTUVfMDA2LCBSVU5USU1FXzAwNywgVFlQRV8wMDEsIGVycm9yRGVzY01hcCwgZ2V0U2hvcnRFcnJvck1zZywgcnVudGltZURlc2NNYXAsIHR5cGVEZXNjTWFwIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+error-codes@0.7.3/node_modules/@module-federation/error-codes/dist/index.esm.mjs\n");

/***/ }),

/***/ "../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/polyfills.esm.mjs":
/*!*****************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/polyfills.esm.mjs ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _object_without_properties_loose),\n/* harmony export */   a: () => (/* binding */ _extends)\n/* harmony export */ });\nfunction _extends() {\n    _extends = Object.assign || function assign(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n\nfunction _object_without_properties_loose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Btb2R1bGUtZmVkZXJhdGlvbitydW50aW1lQDAuNy4zL25vZGVfbW9kdWxlcy9AbW9kdWxlLWZlZGVyYXRpb24vcnVudGltZS9kaXN0L3BvbHlmaWxscy5lc20ubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsdUJBQXVCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZ0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob21lLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AbW9kdWxlLWZlZGVyYXRpb24rcnVudGltZUAwLjcuMy9ub2RlX21vZHVsZXMvQG1vZHVsZS1mZWRlcmF0aW9uL3J1bnRpbWUvZGlzdC9wb2x5ZmlsbHMuZXNtLm1qcz9kOTBlIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICAgIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0KSB7XG4gICAgICAgIGZvcih2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvcih2YXIga2V5IGluIHNvdXJjZSlpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG4gICAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzX2xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgICB2YXIgdGFyZ2V0ID0ge307XG4gICAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgIHZhciBrZXksIGk7XG4gICAgZm9yKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbmV4cG9ydCB7IF9vYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzX2xvb3NlIGFzIF8sIF9leHRlbmRzIGFzIGEgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/polyfills.esm.mjs\n");

/***/ }),

/***/ "../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/share.esm.mjs":
/*!*************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/share.esm.mjs ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ isPlainObject),\n/* harmony export */   B: () => (/* binding */ isRemoteInfoWithEntry),\n/* harmony export */   C: () => (/* binding */ isPureRemoteEntry),\n/* harmony export */   D: () => (/* binding */ DEFAULT_REMOTE_TYPE),\n/* harmony export */   E: () => (/* binding */ getRemoteEntryInfoFromSnapshot),\n/* harmony export */   F: () => (/* binding */ arrayOptions),\n/* harmony export */   G: () => (/* binding */ Global),\n/* harmony export */   H: () => (/* binding */ formatShareConfigs),\n/* harmony export */   I: () => (/* binding */ getTargetSharedOptions),\n/* harmony export */   J: () => (/* binding */ addUniqueItem),\n/* harmony export */   K: () => (/* binding */ CurrentGlobal),\n/* harmony export */   L: () => (/* binding */ logger),\n/* harmony export */   M: () => (/* binding */ getBuilderId),\n/* harmony export */   a: () => (/* binding */ getGlobalShareScope),\n/* harmony export */   b: () => (/* binding */ getGlobalFederationInstance),\n/* harmony export */   c: () => (/* binding */ getGlobalFederationConstructor),\n/* harmony export */   d: () => (/* binding */ setGlobalFederationConstructor),\n/* harmony export */   e: () => (/* binding */ getInfoWithoutType),\n/* harmony export */   f: () => (/* binding */ getGlobalSnapshot),\n/* harmony export */   g: () => (/* binding */ getRegisteredShare),\n/* harmony export */   h: () => (/* binding */ getTargetSnapshotInfoByModuleInfo),\n/* harmony export */   i: () => (/* binding */ getGlobalSnapshotInfoByModuleInfo),\n/* harmony export */   j: () => (/* binding */ setGlobalSnapshotInfoByModuleInfo),\n/* harmony export */   k: () => (/* binding */ addGlobalSnapshot),\n/* harmony export */   l: () => (/* binding */ getRemoteEntryExports),\n/* harmony export */   m: () => (/* binding */ registerGlobalPlugins),\n/* harmony export */   n: () => (/* binding */ nativeGlobal),\n/* harmony export */   o: () => (/* binding */ getGlobalHostPlugins),\n/* harmony export */   p: () => (/* binding */ getPreloaded),\n/* harmony export */   q: () => (/* binding */ setPreloaded),\n/* harmony export */   r: () => (/* binding */ resetFederationGlobalInfo),\n/* harmony export */   s: () => (/* binding */ setGlobalFederationInstance),\n/* harmony export */   t: () => (/* binding */ globalLoading),\n/* harmony export */   u: () => (/* binding */ DEFAULT_SCOPE),\n/* harmony export */   v: () => (/* binding */ assert),\n/* harmony export */   w: () => (/* binding */ error),\n/* harmony export */   x: () => (/* binding */ getFMId),\n/* harmony export */   y: () => (/* binding */ isObject),\n/* harmony export */   z: () => (/* binding */ warn)\n/* harmony export */ });\n/* harmony import */ var _polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfills.esm.mjs */ \"../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/polyfills.esm.mjs\");\n/* harmony import */ var _module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @module-federation/sdk */ \"../node_modules/.pnpm/@module-federation+sdk@0.7.3/node_modules/@module-federation/sdk/dist/index.esm.mjs\");\n\n\n\nfunction getBuilderId() {\n    //@ts-ignore\n    return  true ? \"home:0.1.0\" : 0;\n}\n\nconst LOG_CATEGORY = '[ Federation Runtime ]';\n// FIXME: pre-bundle ?\nconst logger = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createLogger)(LOG_CATEGORY);\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction assert(condition, msg) {\n    if (!condition) {\n        error(msg);\n    }\n}\nfunction error(msg) {\n    if (msg instanceof Error) {\n        msg.message = `${LOG_CATEGORY}: ${msg.message}`;\n        throw msg;\n    }\n    throw new Error(`${LOG_CATEGORY}: ${msg}`);\n}\nfunction warn(msg) {\n    if (msg instanceof Error) {\n        msg.message = `${LOG_CATEGORY}: ${msg.message}`;\n        logger.warn(msg);\n    } else {\n        logger.warn(msg);\n    }\n}\n\nfunction addUniqueItem(arr, item) {\n    if (arr.findIndex((name)=>name === item) === -1) {\n        arr.push(item);\n    }\n    return arr;\n}\nfunction getFMId(remoteInfo) {\n    if ('version' in remoteInfo && remoteInfo.version) {\n        return `${remoteInfo.name}:${remoteInfo.version}`;\n    } else if ('entry' in remoteInfo && remoteInfo.entry) {\n        return `${remoteInfo.name}:${remoteInfo.entry}`;\n    } else {\n        return `${remoteInfo.name}`;\n    }\n}\nfunction isRemoteInfoWithEntry(remote) {\n    return typeof remote.entry !== 'undefined';\n}\nfunction isPureRemoteEntry(remote) {\n    return !remote.entry.includes('.json') && remote.entry.includes('.js');\n}\nfunction isObject(val) {\n    return val && typeof val === 'object';\n}\nconst objectToString = Object.prototype.toString;\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isPlainObject(val) {\n    return objectToString.call(val) === '[object Object]';\n}\nfunction arrayOptions(options) {\n    return Array.isArray(options) ? options : [\n        options\n    ];\n}\nfunction getRemoteEntryInfoFromSnapshot(snapshot) {\n    const defaultRemoteEntryInfo = {\n        url: '',\n        type: 'global',\n        globalName: ''\n    };\n    if ((0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)()) {\n        return 'remoteEntry' in snapshot ? {\n            url: snapshot.remoteEntry,\n            type: snapshot.remoteEntryType,\n            globalName: snapshot.globalName\n        } : defaultRemoteEntryInfo;\n    }\n    if ('ssrRemoteEntry' in snapshot) {\n        return {\n            url: snapshot.ssrRemoteEntry || defaultRemoteEntryInfo.url,\n            type: snapshot.ssrRemoteEntryType || defaultRemoteEntryInfo.type,\n            globalName: snapshot.globalName\n        };\n    }\n    return defaultRemoteEntryInfo;\n}\n\nconst CurrentGlobal = typeof globalThis === 'object' ? globalThis : window;\nconst nativeGlobal = (()=>{\n    try {\n        // get real window (incase of sandbox)\n        return document.defaultView;\n    } catch (e) {\n        // node env\n        return CurrentGlobal;\n    }\n})();\nconst Global = nativeGlobal;\nfunction definePropertyGlobalVal(target, key, val) {\n    Object.defineProperty(target, key, {\n        value: val,\n        configurable: false,\n        writable: true\n    });\n}\nfunction includeOwnProperty(target, key) {\n    return Object.hasOwnProperty.call(target, key);\n}\n// This section is to prevent encapsulation by certain microfrontend frameworks. Due to reuse policies, sandbox escapes.\n// The sandbox in the microfrontend does not replicate the value of 'configurable'.\n// If there is no loading content on the global object, this section defines the loading object.\nif (!includeOwnProperty(CurrentGlobal, '__GLOBAL_LOADING_REMOTE_ENTRY__')) {\n    definePropertyGlobalVal(CurrentGlobal, '__GLOBAL_LOADING_REMOTE_ENTRY__', {});\n}\nconst globalLoading = CurrentGlobal.__GLOBAL_LOADING_REMOTE_ENTRY__;\nfunction setGlobalDefaultVal(target) {\n    var _target___FEDERATION__, _target___FEDERATION__1, _target___FEDERATION__2, _target___FEDERATION__3, _target___FEDERATION__4, _target___FEDERATION__5;\n    if (includeOwnProperty(target, '__VMOK__') && !includeOwnProperty(target, '__FEDERATION__')) {\n        definePropertyGlobalVal(target, '__FEDERATION__', target.__VMOK__);\n    }\n    if (!includeOwnProperty(target, '__FEDERATION__')) {\n        definePropertyGlobalVal(target, '__FEDERATION__', {\n            __GLOBAL_PLUGIN__: [],\n            __INSTANCES__: [],\n            moduleInfo: {},\n            __SHARE__: {},\n            __MANIFEST_LOADING__: {},\n            __PRELOADED_MAP__: new Map()\n        });\n        definePropertyGlobalVal(target, '__VMOK__', target.__FEDERATION__);\n    }\n    var ___GLOBAL_PLUGIN__;\n    (___GLOBAL_PLUGIN__ = (_target___FEDERATION__ = target.__FEDERATION__).__GLOBAL_PLUGIN__) != null ? ___GLOBAL_PLUGIN__ : _target___FEDERATION__.__GLOBAL_PLUGIN__ = [];\n    var ___INSTANCES__;\n    (___INSTANCES__ = (_target___FEDERATION__1 = target.__FEDERATION__).__INSTANCES__) != null ? ___INSTANCES__ : _target___FEDERATION__1.__INSTANCES__ = [];\n    var _moduleInfo;\n    (_moduleInfo = (_target___FEDERATION__2 = target.__FEDERATION__).moduleInfo) != null ? _moduleInfo : _target___FEDERATION__2.moduleInfo = {};\n    var ___SHARE__;\n    (___SHARE__ = (_target___FEDERATION__3 = target.__FEDERATION__).__SHARE__) != null ? ___SHARE__ : _target___FEDERATION__3.__SHARE__ = {};\n    var ___MANIFEST_LOADING__;\n    (___MANIFEST_LOADING__ = (_target___FEDERATION__4 = target.__FEDERATION__).__MANIFEST_LOADING__) != null ? ___MANIFEST_LOADING__ : _target___FEDERATION__4.__MANIFEST_LOADING__ = {};\n    var ___PRELOADED_MAP__;\n    (___PRELOADED_MAP__ = (_target___FEDERATION__5 = target.__FEDERATION__).__PRELOADED_MAP__) != null ? ___PRELOADED_MAP__ : _target___FEDERATION__5.__PRELOADED_MAP__ = new Map();\n}\nsetGlobalDefaultVal(CurrentGlobal);\nsetGlobalDefaultVal(nativeGlobal);\nfunction resetFederationGlobalInfo() {\n    CurrentGlobal.__FEDERATION__.__GLOBAL_PLUGIN__ = [];\n    CurrentGlobal.__FEDERATION__.__INSTANCES__ = [];\n    CurrentGlobal.__FEDERATION__.moduleInfo = {};\n    CurrentGlobal.__FEDERATION__.__SHARE__ = {};\n    CurrentGlobal.__FEDERATION__.__MANIFEST_LOADING__ = {};\n    Object.keys(globalLoading).forEach((key)=>{\n        delete globalLoading[key];\n    });\n}\nfunction getGlobalFederationInstance(name, version) {\n    const buildId = getBuilderId();\n    return CurrentGlobal.__FEDERATION__.__INSTANCES__.find((GMInstance)=>{\n        if (buildId && GMInstance.options.id === getBuilderId()) {\n            return true;\n        }\n        if (GMInstance.options.name === name && !GMInstance.options.version && !version) {\n            return true;\n        }\n        if (GMInstance.options.name === name && version && GMInstance.options.version === version) {\n            return true;\n        }\n        return false;\n    });\n}\nfunction setGlobalFederationInstance(FederationInstance) {\n    CurrentGlobal.__FEDERATION__.__INSTANCES__.push(FederationInstance);\n}\nfunction getGlobalFederationConstructor() {\n    return CurrentGlobal.__FEDERATION__.__DEBUG_CONSTRUCTOR__;\n}\nfunction setGlobalFederationConstructor(FederationConstructor, isDebug = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isDebugMode)()) {\n    if (isDebug) {\n        CurrentGlobal.__FEDERATION__.__DEBUG_CONSTRUCTOR__ = FederationConstructor;\n        CurrentGlobal.__FEDERATION__.__DEBUG_CONSTRUCTOR_VERSION__ = \"0.7.3\";\n    }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getInfoWithoutType(target, key) {\n    if (typeof key === 'string') {\n        const keyRes = target[key];\n        if (keyRes) {\n            return {\n                value: target[key],\n                key: key\n            };\n        } else {\n            const targetKeys = Object.keys(target);\n            for (const targetKey of targetKeys){\n                const [targetTypeOrName, _] = targetKey.split(':');\n                const nKey = `${targetTypeOrName}:${key}`;\n                const typeWithKeyRes = target[nKey];\n                if (typeWithKeyRes) {\n                    return {\n                        value: typeWithKeyRes,\n                        key: nKey\n                    };\n                }\n            }\n            return {\n                value: undefined,\n                key: key\n            };\n        }\n    } else {\n        throw new Error('key must be string');\n    }\n}\nconst getGlobalSnapshot = ()=>nativeGlobal.__FEDERATION__.moduleInfo;\nconst getTargetSnapshotInfoByModuleInfo = (moduleInfo, snapshot)=>{\n    // Check if the remote is included in the hostSnapshot\n    const moduleKey = getFMId(moduleInfo);\n    const getModuleInfo = getInfoWithoutType(snapshot, moduleKey).value;\n    // The remoteSnapshot might not include a version\n    if (getModuleInfo && !getModuleInfo.version && 'version' in moduleInfo && moduleInfo['version']) {\n        getModuleInfo.version = moduleInfo['version'];\n    }\n    if (getModuleInfo) {\n        return getModuleInfo;\n    }\n    // If the remote is not included in the hostSnapshot, deploy a micro app snapshot\n    if ('version' in moduleInfo && moduleInfo['version']) {\n        const { version } = moduleInfo, resModuleInfo = (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__._)(moduleInfo, [\n            \"version\"\n        ]);\n        const moduleKeyWithoutVersion = getFMId(resModuleInfo);\n        const getModuleInfoWithoutVersion = getInfoWithoutType(nativeGlobal.__FEDERATION__.moduleInfo, moduleKeyWithoutVersion).value;\n        if ((getModuleInfoWithoutVersion == null ? void 0 : getModuleInfoWithoutVersion.version) === version) {\n            return getModuleInfoWithoutVersion;\n        }\n    }\n    return;\n};\nconst getGlobalSnapshotInfoByModuleInfo = (moduleInfo)=>getTargetSnapshotInfoByModuleInfo(moduleInfo, nativeGlobal.__FEDERATION__.moduleInfo);\nconst setGlobalSnapshotInfoByModuleInfo = (remoteInfo, moduleDetailInfo)=>{\n    const moduleKey = getFMId(remoteInfo);\n    nativeGlobal.__FEDERATION__.moduleInfo[moduleKey] = moduleDetailInfo;\n    return nativeGlobal.__FEDERATION__.moduleInfo;\n};\nconst addGlobalSnapshot = (moduleInfos)=>{\n    nativeGlobal.__FEDERATION__.moduleInfo = (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({}, nativeGlobal.__FEDERATION__.moduleInfo, moduleInfos);\n    return ()=>{\n        const keys = Object.keys(moduleInfos);\n        for (const key of keys){\n            delete nativeGlobal.__FEDERATION__.moduleInfo[key];\n        }\n    };\n};\nconst getRemoteEntryExports = (name, globalName)=>{\n    const remoteEntryKey = globalName || `__FEDERATION_${name}:custom__`;\n    const entryExports = CurrentGlobal[remoteEntryKey];\n    return {\n        remoteEntryKey,\n        entryExports\n    };\n};\n// This function is used to register global plugins.\n// It iterates over the provided plugins and checks if they are already registered.\n// If a plugin is not registered, it is added to the global plugins.\n// If a plugin is already registered, a warning message is logged.\nconst registerGlobalPlugins = (plugins)=>{\n    const { __GLOBAL_PLUGIN__ } = nativeGlobal.__FEDERATION__;\n    plugins.forEach((plugin)=>{\n        if (__GLOBAL_PLUGIN__.findIndex((p)=>p.name === plugin.name) === -1) {\n            __GLOBAL_PLUGIN__.push(plugin);\n        } else {\n            warn(`The plugin ${plugin.name} has been registered.`);\n        }\n    });\n};\nconst getGlobalHostPlugins = ()=>nativeGlobal.__FEDERATION__.__GLOBAL_PLUGIN__;\nconst getPreloaded = (id)=>CurrentGlobal.__FEDERATION__.__PRELOADED_MAP__.get(id);\nconst setPreloaded = (id)=>CurrentGlobal.__FEDERATION__.__PRELOADED_MAP__.set(id, true);\n\nconst DEFAULT_SCOPE = 'default';\nconst DEFAULT_REMOTE_TYPE = 'global';\n\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\n// those constants are based on https://www.rubydoc.info/gems/semantic_range/3.0.0/SemanticRange#BUILDIDENTIFIER-constant\n// Copyright (c)\n// vite-plugin-federation is licensed under Mulan PSL v2.\n// You can use this software according to the terms and conditions of the Mulan PSL v2.\n// You may obtain a copy of Mulan PSL v2 at:\n//      http://license.coscl.org.cn/MulanPSL2\n// THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.\n// See the Mulan PSL v2 for more details.\nconst buildIdentifier = '[0-9A-Za-z-]+';\nconst build = `(?:\\\\+(${buildIdentifier}(?:\\\\.${buildIdentifier})*))`;\nconst numericIdentifier = '0|[1-9]\\\\d*';\nconst numericIdentifierLoose = '[0-9]+';\nconst nonNumericIdentifier = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\nconst preReleaseIdentifierLoose = `(?:${numericIdentifierLoose}|${nonNumericIdentifier})`;\nconst preReleaseLoose = `(?:-?(${preReleaseIdentifierLoose}(?:\\\\.${preReleaseIdentifierLoose})*))`;\nconst preReleaseIdentifier = `(?:${numericIdentifier}|${nonNumericIdentifier})`;\nconst preRelease = `(?:-(${preReleaseIdentifier}(?:\\\\.${preReleaseIdentifier})*))`;\nconst xRangeIdentifier = `${numericIdentifier}|x|X|\\\\*`;\nconst xRangePlain = `[v=\\\\s]*(${xRangeIdentifier})(?:\\\\.(${xRangeIdentifier})(?:\\\\.(${xRangeIdentifier})(?:${preRelease})?${build}?)?)?`;\nconst hyphenRange = `^\\\\s*(${xRangePlain})\\\\s+-\\\\s+(${xRangePlain})\\\\s*$`;\nconst mainVersionLoose = `(${numericIdentifierLoose})\\\\.(${numericIdentifierLoose})\\\\.(${numericIdentifierLoose})`;\nconst loosePlain = `[v=\\\\s]*${mainVersionLoose}${preReleaseLoose}?${build}?`;\nconst gtlt = '((?:<|>)?=?)';\nconst comparatorTrim = `(\\\\s*)${gtlt}\\\\s*(${loosePlain}|${xRangePlain})`;\nconst loneTilde = '(?:~>?)';\nconst tildeTrim = `(\\\\s*)${loneTilde}\\\\s+`;\nconst loneCaret = '(?:\\\\^)';\nconst caretTrim = `(\\\\s*)${loneCaret}\\\\s+`;\nconst star = '(<|>)?=?\\\\s*\\\\*';\nconst caret = `^${loneCaret}${xRangePlain}$`;\nconst mainVersion = `(${numericIdentifier})\\\\.(${numericIdentifier})\\\\.(${numericIdentifier})`;\nconst fullPlain = `v?${mainVersion}${preRelease}?${build}?`;\nconst tilde = `^${loneTilde}${xRangePlain}$`;\nconst xRange = `^${gtlt}\\\\s*${xRangePlain}$`;\nconst comparator = `^${gtlt}\\\\s*(${fullPlain})$|^$`;\n// copy from semver package\nconst gte0 = '^\\\\s*>=\\\\s*0.0.0\\\\s*$';\n\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\n// Copyright (c)\n// vite-plugin-federation is licensed under Mulan PSL v2.\n// You can use this software according to the terms and conditions of the Mulan PSL v2.\n// You may obtain a copy of Mulan PSL v2 at:\n//      http://license.coscl.org.cn/MulanPSL2\n// THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.\n// See the Mulan PSL v2 for more details.\nfunction parseRegex(source) {\n    return new RegExp(source);\n}\nfunction isXVersion(version) {\n    return !version || version.toLowerCase() === 'x' || version === '*';\n}\nfunction pipe(...fns) {\n    return (x)=>fns.reduce((v, f)=>f(v), x);\n}\nfunction extractComparator(comparatorString) {\n    return comparatorString.match(parseRegex(comparator));\n}\nfunction combineVersion(major, minor, patch, preRelease) {\n    const mainVersion = `${major}.${minor}.${patch}`;\n    if (preRelease) {\n        return `${mainVersion}-${preRelease}`;\n    }\n    return mainVersion;\n}\n\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\n// Copyright (c)\n// vite-plugin-federation is licensed under Mulan PSL v2.\n// You can use this software according to the terms and conditions of the Mulan PSL v2.\n// You may obtain a copy of Mulan PSL v2 at:\n//      http://license.coscl.org.cn/MulanPSL2\n// THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.\n// See the Mulan PSL v2 for more details.\nfunction parseHyphen(range) {\n    return range.replace(parseRegex(hyphenRange), (_range, from, fromMajor, fromMinor, fromPatch, _fromPreRelease, _fromBuild, to, toMajor, toMinor, toPatch, toPreRelease)=>{\n        if (isXVersion(fromMajor)) {\n            from = '';\n        } else if (isXVersion(fromMinor)) {\n            from = `>=${fromMajor}.0.0`;\n        } else if (isXVersion(fromPatch)) {\n            from = `>=${fromMajor}.${fromMinor}.0`;\n        } else {\n            from = `>=${from}`;\n        }\n        if (isXVersion(toMajor)) {\n            to = '';\n        } else if (isXVersion(toMinor)) {\n            to = `<${Number(toMajor) + 1}.0.0-0`;\n        } else if (isXVersion(toPatch)) {\n            to = `<${toMajor}.${Number(toMinor) + 1}.0-0`;\n        } else if (toPreRelease) {\n            to = `<=${toMajor}.${toMinor}.${toPatch}-${toPreRelease}`;\n        } else {\n            to = `<=${to}`;\n        }\n        return `${from} ${to}`.trim();\n    });\n}\nfunction parseComparatorTrim(range) {\n    return range.replace(parseRegex(comparatorTrim), '$1$2$3');\n}\nfunction parseTildeTrim(range) {\n    return range.replace(parseRegex(tildeTrim), '$1~');\n}\nfunction parseCaretTrim(range) {\n    return range.replace(parseRegex(caretTrim), '$1^');\n}\nfunction parseCarets(range) {\n    return range.trim().split(/\\s+/).map((rangeVersion)=>rangeVersion.replace(parseRegex(caret), (_, major, minor, patch, preRelease)=>{\n            if (isXVersion(major)) {\n                return '';\n            } else if (isXVersion(minor)) {\n                return `>=${major}.0.0 <${Number(major) + 1}.0.0-0`;\n            } else if (isXVersion(patch)) {\n                if (major === '0') {\n                    return `>=${major}.${minor}.0 <${major}.${Number(minor) + 1}.0-0`;\n                } else {\n                    return `>=${major}.${minor}.0 <${Number(major) + 1}.0.0-0`;\n                }\n            } else if (preRelease) {\n                if (major === '0') {\n                    if (minor === '0') {\n                        return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${minor}.${Number(patch) + 1}-0`;\n                    } else {\n                        return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${Number(minor) + 1}.0-0`;\n                    }\n                } else {\n                    return `>=${major}.${minor}.${patch}-${preRelease} <${Number(major) + 1}.0.0-0`;\n                }\n            } else {\n                if (major === '0') {\n                    if (minor === '0') {\n                        return `>=${major}.${minor}.${patch} <${major}.${minor}.${Number(patch) + 1}-0`;\n                    } else {\n                        return `>=${major}.${minor}.${patch} <${major}.${Number(minor) + 1}.0-0`;\n                    }\n                }\n                return `>=${major}.${minor}.${patch} <${Number(major) + 1}.0.0-0`;\n            }\n        })).join(' ');\n}\nfunction parseTildes(range) {\n    return range.trim().split(/\\s+/).map((rangeVersion)=>rangeVersion.replace(parseRegex(tilde), (_, major, minor, patch, preRelease)=>{\n            if (isXVersion(major)) {\n                return '';\n            } else if (isXVersion(minor)) {\n                return `>=${major}.0.0 <${Number(major) + 1}.0.0-0`;\n            } else if (isXVersion(patch)) {\n                return `>=${major}.${minor}.0 <${major}.${Number(minor) + 1}.0-0`;\n            } else if (preRelease) {\n                return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${Number(minor) + 1}.0-0`;\n            }\n            return `>=${major}.${minor}.${patch} <${major}.${Number(minor) + 1}.0-0`;\n        })).join(' ');\n}\nfunction parseXRanges(range) {\n    return range.split(/\\s+/).map((rangeVersion)=>rangeVersion.trim().replace(parseRegex(xRange), (ret, gtlt, major, minor, patch, preRelease)=>{\n            const isXMajor = isXVersion(major);\n            const isXMinor = isXMajor || isXVersion(minor);\n            const isXPatch = isXMinor || isXVersion(patch);\n            if (gtlt === '=' && isXPatch) {\n                gtlt = '';\n            }\n            preRelease = '';\n            if (isXMajor) {\n                if (gtlt === '>' || gtlt === '<') {\n                    // nothing is allowed\n                    return '<0.0.0-0';\n                } else {\n                    // nothing is forbidden\n                    return '*';\n                }\n            } else if (gtlt && isXPatch) {\n                // replace X with 0\n                if (isXMinor) {\n                    minor = 0;\n                }\n                patch = 0;\n                if (gtlt === '>') {\n                    // >1 => >=2.0.0\n                    // >1.2 => >=1.3.0\n                    gtlt = '>=';\n                    if (isXMinor) {\n                        major = Number(major) + 1;\n                        minor = 0;\n                        patch = 0;\n                    } else {\n                        minor = Number(minor) + 1;\n                        patch = 0;\n                    }\n                } else if (gtlt === '<=') {\n                    // <=0.7.x is actually <0.8.0, since any 0.7.x should pass\n                    // Similarly, <=7.x is actually <8.0.0, etc.\n                    gtlt = '<';\n                    if (isXMinor) {\n                        major = Number(major) + 1;\n                    } else {\n                        minor = Number(minor) + 1;\n                    }\n                }\n                if (gtlt === '<') {\n                    preRelease = '-0';\n                }\n                return `${gtlt + major}.${minor}.${patch}${preRelease}`;\n            } else if (isXMinor) {\n                return `>=${major}.0.0${preRelease} <${Number(major) + 1}.0.0-0`;\n            } else if (isXPatch) {\n                return `>=${major}.${minor}.0${preRelease} <${major}.${Number(minor) + 1}.0-0`;\n            }\n            return ret;\n        })).join(' ');\n}\nfunction parseStar(range) {\n    return range.trim().replace(parseRegex(star), '');\n}\nfunction parseGTE0(comparatorString) {\n    return comparatorString.trim().replace(parseRegex(gte0), '');\n}\n\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\n// Copyright (c)\n// vite-plugin-federation is licensed under Mulan PSL v2.\n// You can use this software according to the terms and conditions of the Mulan PSL v2.\n// You may obtain a copy of Mulan PSL v2 at:\n//      http://license.coscl.org.cn/MulanPSL2\n// THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.\n// See the Mulan PSL v2 for more details.\nfunction compareAtom(rangeAtom, versionAtom) {\n    rangeAtom = Number(rangeAtom) || rangeAtom;\n    versionAtom = Number(versionAtom) || versionAtom;\n    if (rangeAtom > versionAtom) {\n        return 1;\n    }\n    if (rangeAtom === versionAtom) {\n        return 0;\n    }\n    return -1;\n}\nfunction comparePreRelease(rangeAtom, versionAtom) {\n    const { preRelease: rangePreRelease } = rangeAtom;\n    const { preRelease: versionPreRelease } = versionAtom;\n    if (rangePreRelease === undefined && Boolean(versionPreRelease)) {\n        return 1;\n    }\n    if (Boolean(rangePreRelease) && versionPreRelease === undefined) {\n        return -1;\n    }\n    if (rangePreRelease === undefined && versionPreRelease === undefined) {\n        return 0;\n    }\n    for(let i = 0, n = rangePreRelease.length; i <= n; i++){\n        const rangeElement = rangePreRelease[i];\n        const versionElement = versionPreRelease[i];\n        if (rangeElement === versionElement) {\n            continue;\n        }\n        if (rangeElement === undefined && versionElement === undefined) {\n            return 0;\n        }\n        if (!rangeElement) {\n            return 1;\n        }\n        if (!versionElement) {\n            return -1;\n        }\n        return compareAtom(rangeElement, versionElement);\n    }\n    return 0;\n}\nfunction compareVersion(rangeAtom, versionAtom) {\n    return compareAtom(rangeAtom.major, versionAtom.major) || compareAtom(rangeAtom.minor, versionAtom.minor) || compareAtom(rangeAtom.patch, versionAtom.patch) || comparePreRelease(rangeAtom, versionAtom);\n}\nfunction eq(rangeAtom, versionAtom) {\n    return rangeAtom.version === versionAtom.version;\n}\nfunction compare(rangeAtom, versionAtom) {\n    switch(rangeAtom.operator){\n        case '':\n        case '=':\n            return eq(rangeAtom, versionAtom);\n        case '>':\n            return compareVersion(rangeAtom, versionAtom) < 0;\n        case '>=':\n            return eq(rangeAtom, versionAtom) || compareVersion(rangeAtom, versionAtom) < 0;\n        case '<':\n            return compareVersion(rangeAtom, versionAtom) > 0;\n        case '<=':\n            return eq(rangeAtom, versionAtom) || compareVersion(rangeAtom, versionAtom) > 0;\n        case undefined:\n            {\n                // mean * or x -> all versions\n                return true;\n            }\n        default:\n            return false;\n    }\n}\n\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\n// Copyright (c)\n// vite-plugin-federation is licensed under Mulan PSL v2.\n// You can use this software according to the terms and conditions of the Mulan PSL v2.\n// You may obtain a copy of Mulan PSL v2 at:\n//      http://license.coscl.org.cn/MulanPSL2\n// THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.\n// See the Mulan PSL v2 for more details.\nfunction parseComparatorString(range) {\n    return pipe(// handle caret\n    // ^ --> * (any, kinda silly)\n    // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n    // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n    // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n    // ^1.2.3 --> >=1.2.3 <2.0.0-0\n    // ^1.2.0 --> >=1.2.0 <2.0.0-0\n    parseCarets, // handle tilde\n    // ~, ~> --> * (any, kinda silly)\n    // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n    // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n    // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n    // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n    // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n    parseTildes, parseXRanges, parseStar)(range);\n}\nfunction parseRange(range) {\n    return pipe(// handle hyphenRange\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    parseHyphen, // handle trim comparator\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    parseComparatorTrim, // handle trim tilde\n    // `~ 1.2.3` => `~1.2.3`\n    parseTildeTrim, // handle trim caret\n    // `^ 1.2.3` => `^1.2.3`\n    parseCaretTrim)(range.trim()).split(/\\s+/).join(' ');\n}\nfunction satisfy(version, range) {\n    if (!version) {\n        return false;\n    }\n    const parsedRange = parseRange(range);\n    const parsedComparator = parsedRange.split(' ').map((rangeVersion)=>parseComparatorString(rangeVersion)).join(' ');\n    const comparators = parsedComparator.split(/\\s+/).map((comparator)=>parseGTE0(comparator));\n    const extractedVersion = extractComparator(version);\n    if (!extractedVersion) {\n        return false;\n    }\n    const [, versionOperator, , versionMajor, versionMinor, versionPatch, versionPreRelease] = extractedVersion;\n    const versionAtom = {\n        operator: versionOperator,\n        version: combineVersion(versionMajor, versionMinor, versionPatch, versionPreRelease),\n        major: versionMajor,\n        minor: versionMinor,\n        patch: versionPatch,\n        preRelease: versionPreRelease == null ? void 0 : versionPreRelease.split('.')\n    };\n    for (const comparator of comparators){\n        const extractedComparator = extractComparator(comparator);\n        if (!extractedComparator) {\n            return false;\n        }\n        const [, rangeOperator, , rangeMajor, rangeMinor, rangePatch, rangePreRelease] = extractedComparator;\n        const rangeAtom = {\n            operator: rangeOperator,\n            version: combineVersion(rangeMajor, rangeMinor, rangePatch, rangePreRelease),\n            major: rangeMajor,\n            minor: rangeMinor,\n            patch: rangePatch,\n            preRelease: rangePreRelease == null ? void 0 : rangePreRelease.split('.')\n        };\n        if (!compare(rangeAtom, versionAtom)) {\n            return false; // early return\n        }\n    }\n    return true;\n}\n\nfunction formatShare(shareArgs, from, name, shareStrategy) {\n    let get;\n    if ('get' in shareArgs) {\n        // eslint-disable-next-line prefer-destructuring\n        get = shareArgs.get;\n    } else if ('lib' in shareArgs) {\n        get = ()=>Promise.resolve(shareArgs.lib);\n    } else {\n        get = ()=>Promise.resolve(()=>{\n                throw new Error(`Can not get shared '${name}'!`);\n            });\n    }\n    if (shareArgs.strategy) {\n        warn(`\"shared.strategy is deprecated, please set in initOptions.shareStrategy instead!\"`);\n    }\n    var _shareArgs_version, _shareArgs_scope, _shareArgs_strategy;\n    return (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({\n        deps: [],\n        useIn: [],\n        from,\n        loading: null\n    }, shareArgs, {\n        shareConfig: (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({\n            requiredVersion: `^${shareArgs.version}`,\n            singleton: false,\n            eager: false,\n            strictVersion: false\n        }, shareArgs.shareConfig),\n        get,\n        loaded: (shareArgs == null ? void 0 : shareArgs.loaded) || 'lib' in shareArgs ? true : undefined,\n        version: (_shareArgs_version = shareArgs.version) != null ? _shareArgs_version : '0',\n        scope: Array.isArray(shareArgs.scope) ? shareArgs.scope : [\n            (_shareArgs_scope = shareArgs.scope) != null ? _shareArgs_scope : 'default'\n        ],\n        strategy: ((_shareArgs_strategy = shareArgs.strategy) != null ? _shareArgs_strategy : shareStrategy) || 'version-first'\n    });\n}\nfunction formatShareConfigs(globalOptions, userOptions) {\n    const shareArgs = userOptions.shared || {};\n    const from = userOptions.name;\n    const shareInfos = Object.keys(shareArgs).reduce((res, pkgName)=>{\n        const arrayShareArgs = arrayOptions(shareArgs[pkgName]);\n        res[pkgName] = res[pkgName] || [];\n        arrayShareArgs.forEach((shareConfig)=>{\n            res[pkgName].push(formatShare(shareConfig, from, pkgName, userOptions.shareStrategy));\n        });\n        return res;\n    }, {});\n    const shared = (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)({}, globalOptions.shared);\n    Object.keys(shareInfos).forEach((shareKey)=>{\n        if (!shared[shareKey]) {\n            shared[shareKey] = shareInfos[shareKey];\n        } else {\n            shareInfos[shareKey].forEach((newUserSharedOptions)=>{\n                const isSameVersion = shared[shareKey].find((sharedVal)=>sharedVal.version === newUserSharedOptions.version);\n                if (!isSameVersion) {\n                    shared[shareKey].push(newUserSharedOptions);\n                }\n            });\n        }\n    });\n    return {\n        shared,\n        shareInfos\n    };\n}\nfunction versionLt(a, b) {\n    const transformInvalidVersion = (version)=>{\n        const isNumberVersion = !Number.isNaN(Number(version));\n        if (isNumberVersion) {\n            const splitArr = version.split('.');\n            let validVersion = version;\n            for(let i = 0; i < 3 - splitArr.length; i++){\n                validVersion += '.0';\n            }\n            return validVersion;\n        }\n        return version;\n    };\n    if (satisfy(transformInvalidVersion(a), `<=${transformInvalidVersion(b)}`)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconst findVersion = (shareVersionMap, cb)=>{\n    const callback = cb || function(prev, cur) {\n        return versionLt(prev, cur);\n    };\n    return Object.keys(shareVersionMap).reduce((prev, cur)=>{\n        if (!prev) {\n            return cur;\n        }\n        if (callback(prev, cur)) {\n            return cur;\n        }\n        // default version is '0' https://github.com/webpack/webpack/blob/main/lib/sharing/ProvideSharedModule.js#L136\n        if (prev === '0') {\n            return cur;\n        }\n        return prev;\n    }, 0);\n};\nconst isLoaded = (shared)=>{\n    return Boolean(shared.loaded) || typeof shared.lib === 'function';\n};\nconst isLoading = (shared)=>{\n    return Boolean(shared.loading);\n};\nfunction findSingletonVersionOrderByVersion(shareScopeMap, scope, pkgName) {\n    const versions = shareScopeMap[scope][pkgName];\n    const callback = function(prev, cur) {\n        return !isLoaded(versions[prev]) && versionLt(prev, cur);\n    };\n    return findVersion(shareScopeMap[scope][pkgName], callback);\n}\nfunction findSingletonVersionOrderByLoaded(shareScopeMap, scope, pkgName) {\n    const versions = shareScopeMap[scope][pkgName];\n    const callback = function(prev, cur) {\n        const isLoadingOrLoaded = (shared)=>{\n            return isLoaded(shared) || isLoading(shared);\n        };\n        if (isLoadingOrLoaded(versions[cur])) {\n            if (isLoadingOrLoaded(versions[prev])) {\n                return Boolean(versionLt(prev, cur));\n            } else {\n                return true;\n            }\n        }\n        if (isLoadingOrLoaded(versions[prev])) {\n            return false;\n        }\n        return versionLt(prev, cur);\n    };\n    return findVersion(shareScopeMap[scope][pkgName], callback);\n}\nfunction getFindShareFunction(strategy) {\n    if (strategy === 'loaded-first') {\n        return findSingletonVersionOrderByLoaded;\n    }\n    return findSingletonVersionOrderByVersion;\n}\nfunction getRegisteredShare(localShareScopeMap, pkgName, shareInfo, resolveShare) {\n    if (!localShareScopeMap) {\n        return;\n    }\n    const { shareConfig, scope = DEFAULT_SCOPE, strategy } = shareInfo;\n    const scopes = Array.isArray(scope) ? scope : [\n        scope\n    ];\n    for (const sc of scopes){\n        if (shareConfig && localShareScopeMap[sc] && localShareScopeMap[sc][pkgName]) {\n            const { requiredVersion } = shareConfig;\n            const findShareFunction = getFindShareFunction(strategy);\n            const maxOrSingletonVersion = findShareFunction(localShareScopeMap, sc, pkgName);\n            //@ts-ignore\n            const defaultResolver = ()=>{\n                if (shareConfig.singleton) {\n                    if (typeof requiredVersion === 'string' && !satisfy(maxOrSingletonVersion, requiredVersion)) {\n                        const msg = `Version ${maxOrSingletonVersion} from ${maxOrSingletonVersion && localShareScopeMap[sc][pkgName][maxOrSingletonVersion].from} of shared singleton module ${pkgName} does not satisfy the requirement of ${shareInfo.from} which needs ${requiredVersion})`;\n                        if (shareConfig.strictVersion) {\n                            error(msg);\n                        } else {\n                            warn(msg);\n                        }\n                    }\n                    return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];\n                } else {\n                    if (requiredVersion === false || requiredVersion === '*') {\n                        return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];\n                    }\n                    if (satisfy(maxOrSingletonVersion, requiredVersion)) {\n                        return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];\n                    }\n                    for (const [versionKey, versionValue] of Object.entries(localShareScopeMap[sc][pkgName])){\n                        if (satisfy(versionKey, requiredVersion)) {\n                            return versionValue;\n                        }\n                    }\n                }\n            };\n            const params = {\n                shareScopeMap: localShareScopeMap,\n                scope: sc,\n                pkgName,\n                version: maxOrSingletonVersion,\n                GlobalFederation: Global.__FEDERATION__,\n                resolver: defaultResolver\n            };\n            const resolveShared = resolveShare.emit(params) || params;\n            return resolveShared.resolver();\n        }\n    }\n}\nfunction getGlobalShareScope() {\n    return Global.__FEDERATION__.__SHARE__;\n}\nfunction getTargetSharedOptions(options) {\n    const { pkgName, extraOptions, shareInfos } = options;\n    const defaultResolver = (sharedOptions)=>{\n        if (!sharedOptions) {\n            return undefined;\n        }\n        const shareVersionMap = {};\n        sharedOptions.forEach((shared)=>{\n            shareVersionMap[shared.version] = shared;\n        });\n        const callback = function(prev, cur) {\n            return !isLoaded(shareVersionMap[prev]) && versionLt(prev, cur);\n        };\n        const maxVersion = findVersion(shareVersionMap, callback);\n        return shareVersionMap[maxVersion];\n    };\n    var _extraOptions_resolver;\n    const resolver = (_extraOptions_resolver = extraOptions == null ? void 0 : extraOptions.resolver) != null ? _extraOptions_resolver : defaultResolver;\n    return Object.assign({}, resolver(shareInfos[pkgName]), extraOptions == null ? void 0 : extraOptions.customShareInfo);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Btb2R1bGUtZmVkZXJhdGlvbitydW50aW1lQDAuNy4zL25vZGVfbW9kdWxlcy9AbW9kdWxlLWZlZGVyYXRpb24vcnVudGltZS9kaXN0L3NoYXJlLmVzbS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMkY7QUFDVjs7QUFFakY7QUFDQTtBQUNBLFdBQVcsS0FBa0QsR0FBRyxZQUEyQixHQUFHLENBQUU7QUFDaEc7O0FBRUE7QUFDQTtBQUNBLGVBQWUsb0VBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixhQUFhLElBQUksWUFBWTtBQUN0RDtBQUNBO0FBQ0EsdUJBQXVCLGFBQWEsSUFBSSxJQUFJO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixhQUFhLElBQUksWUFBWTtBQUN0RDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0IsR0FBRyxtQkFBbUI7QUFDeEQsTUFBTTtBQUNOLGtCQUFrQixnQkFBZ0IsR0FBRyxpQkFBaUI7QUFDdEQsTUFBTTtBQUNOLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxvRUFBWTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLENB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrQ0FBK0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLHVCQUF1QixPQUFPLHNGQUFzRiw2QkFBNkIsU0FBUyxzQ0FBc0MsZ0JBQWdCLGNBQWMsZ0JBQWdCO0FBQzdSO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvQ0FBb0M7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjs7QUFFczhCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9tZS8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG1vZHVsZS1mZWRlcmF0aW9uK3J1bnRpbWVAMC43LjMvbm9kZV9tb2R1bGVzL0Btb2R1bGUtZmVkZXJhdGlvbi9ydW50aW1lL2Rpc3Qvc2hhcmUuZXNtLm1qcz80MGJhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF8gYXMgX29iamVjdF93aXRob3V0X3Byb3BlcnRpZXNfbG9vc2UsIGEgYXMgX2V4dGVuZHMgfSBmcm9tICcuL3BvbHlmaWxscy5lc20ubWpzJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciwgaXNCcm93c2VyRW52LCBpc0RlYnVnTW9kZSB9IGZyb20gJ0Btb2R1bGUtZmVkZXJhdGlvbi9zZGsnO1xuXG5mdW5jdGlvbiBnZXRCdWlsZGVySWQoKSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgcmV0dXJuIHR5cGVvZiBGRURFUkFUSU9OX0JVSUxEX0lERU5USUZJRVIgIT09ICd1bmRlZmluZWQnID8gRkVERVJBVElPTl9CVUlMRF9JREVOVElGSUVSIDogJyc7XG59XG5cbmNvbnN0IExPR19DQVRFR09SWSA9ICdbIEZlZGVyYXRpb24gUnVudGltZSBdJztcbi8vIEZJWE1FOiBwcmUtYnVuZGxlID9cbmNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcihMT0dfQ0FURUdPUlkpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbmZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIG1zZykge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIGVycm9yKG1zZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZXJyb3IobXNnKSB7XG4gICAgaWYgKG1zZyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIG1zZy5tZXNzYWdlID0gYCR7TE9HX0NBVEVHT1JZfTogJHttc2cubWVzc2FnZX1gO1xuICAgICAgICB0aHJvdyBtc2c7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgJHtMT0dfQ0FURUdPUll9OiAke21zZ31gKTtcbn1cbmZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgaWYgKG1zZyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIG1zZy5tZXNzYWdlID0gYCR7TE9HX0NBVEVHT1JZfTogJHttc2cubWVzc2FnZX1gO1xuICAgICAgICBsb2dnZXIud2Fybihtc2cpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlci53YXJuKG1zZyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRVbmlxdWVJdGVtKGFyciwgaXRlbSkge1xuICAgIGlmIChhcnIuZmluZEluZGV4KChuYW1lKT0+bmFtZSA9PT0gaXRlbSkgPT09IC0xKSB7XG4gICAgICAgIGFyci5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuZnVuY3Rpb24gZ2V0Rk1JZChyZW1vdGVJbmZvKSB7XG4gICAgaWYgKCd2ZXJzaW9uJyBpbiByZW1vdGVJbmZvICYmIHJlbW90ZUluZm8udmVyc2lvbikge1xuICAgICAgICByZXR1cm4gYCR7cmVtb3RlSW5mby5uYW1lfToke3JlbW90ZUluZm8udmVyc2lvbn1gO1xuICAgIH0gZWxzZSBpZiAoJ2VudHJ5JyBpbiByZW1vdGVJbmZvICYmIHJlbW90ZUluZm8uZW50cnkpIHtcbiAgICAgICAgcmV0dXJuIGAke3JlbW90ZUluZm8ubmFtZX06JHtyZW1vdGVJbmZvLmVudHJ5fWA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGAke3JlbW90ZUluZm8ubmFtZX1gO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzUmVtb3RlSW5mb1dpdGhFbnRyeShyZW1vdGUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHJlbW90ZS5lbnRyeSAhPT0gJ3VuZGVmaW5lZCc7XG59XG5mdW5jdGlvbiBpc1B1cmVSZW1vdGVFbnRyeShyZW1vdGUpIHtcbiAgICByZXR1cm4gIXJlbW90ZS5lbnRyeS5pbmNsdWRlcygnLmpzb24nKSAmJiByZW1vdGUuZW50cnkuaW5jbHVkZXMoJy5qcycpO1xufVxuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gICAgcmV0dXJuIHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cbmNvbnN0IG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCkge1xuICAgIHJldHVybiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuZnVuY3Rpb24gYXJyYXlPcHRpb25zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShvcHRpb25zKSA/IG9wdGlvbnMgOiBbXG4gICAgICAgIG9wdGlvbnNcbiAgICBdO1xufVxuZnVuY3Rpb24gZ2V0UmVtb3RlRW50cnlJbmZvRnJvbVNuYXBzaG90KHNuYXBzaG90KSB7XG4gICAgY29uc3QgZGVmYXVsdFJlbW90ZUVudHJ5SW5mbyA9IHtcbiAgICAgICAgdXJsOiAnJyxcbiAgICAgICAgdHlwZTogJ2dsb2JhbCcsXG4gICAgICAgIGdsb2JhbE5hbWU6ICcnXG4gICAgfTtcbiAgICBpZiAoaXNCcm93c2VyRW52KCkpIHtcbiAgICAgICAgcmV0dXJuICdyZW1vdGVFbnRyeScgaW4gc25hcHNob3QgPyB7XG4gICAgICAgICAgICB1cmw6IHNuYXBzaG90LnJlbW90ZUVudHJ5LFxuICAgICAgICAgICAgdHlwZTogc25hcHNob3QucmVtb3RlRW50cnlUeXBlLFxuICAgICAgICAgICAgZ2xvYmFsTmFtZTogc25hcHNob3QuZ2xvYmFsTmFtZVxuICAgICAgICB9IDogZGVmYXVsdFJlbW90ZUVudHJ5SW5mbztcbiAgICB9XG4gICAgaWYgKCdzc3JSZW1vdGVFbnRyeScgaW4gc25hcHNob3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVybDogc25hcHNob3Quc3NyUmVtb3RlRW50cnkgfHwgZGVmYXVsdFJlbW90ZUVudHJ5SW5mby51cmwsXG4gICAgICAgICAgICB0eXBlOiBzbmFwc2hvdC5zc3JSZW1vdGVFbnRyeVR5cGUgfHwgZGVmYXVsdFJlbW90ZUVudHJ5SW5mby50eXBlLFxuICAgICAgICAgICAgZ2xvYmFsTmFtZTogc25hcHNob3QuZ2xvYmFsTmFtZVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFJlbW90ZUVudHJ5SW5mbztcbn1cblxuY29uc3QgQ3VycmVudEdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JyA/IGdsb2JhbFRoaXMgOiB3aW5kb3c7XG5jb25zdCBuYXRpdmVHbG9iYWwgPSAoKCk9PntcbiAgICB0cnkge1xuICAgICAgICAvLyBnZXQgcmVhbCB3aW5kb3cgKGluY2FzZSBvZiBzYW5kYm94KVxuICAgICAgICByZXR1cm4gZG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBub2RlIGVudlxuICAgICAgICByZXR1cm4gQ3VycmVudEdsb2JhbDtcbiAgICB9XG59KSgpO1xuY29uc3QgR2xvYmFsID0gbmF0aXZlR2xvYmFsO1xuZnVuY3Rpb24gZGVmaW5lUHJvcGVydHlHbG9iYWxWYWwodGFyZ2V0LCBrZXksIHZhbCkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xuICAgICAgICB2YWx1ZTogdmFsLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xufVxuZnVuY3Rpb24gaW5jbHVkZU93blByb3BlcnR5KHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KTtcbn1cbi8vIFRoaXMgc2VjdGlvbiBpcyB0byBwcmV2ZW50IGVuY2Fwc3VsYXRpb24gYnkgY2VydGFpbiBtaWNyb2Zyb250ZW5kIGZyYW1ld29ya3MuIER1ZSB0byByZXVzZSBwb2xpY2llcywgc2FuZGJveCBlc2NhcGVzLlxuLy8gVGhlIHNhbmRib3ggaW4gdGhlIG1pY3JvZnJvbnRlbmQgZG9lcyBub3QgcmVwbGljYXRlIHRoZSB2YWx1ZSBvZiAnY29uZmlndXJhYmxlJy5cbi8vIElmIHRoZXJlIGlzIG5vIGxvYWRpbmcgY29udGVudCBvbiB0aGUgZ2xvYmFsIG9iamVjdCwgdGhpcyBzZWN0aW9uIGRlZmluZXMgdGhlIGxvYWRpbmcgb2JqZWN0LlxuaWYgKCFpbmNsdWRlT3duUHJvcGVydHkoQ3VycmVudEdsb2JhbCwgJ19fR0xPQkFMX0xPQURJTkdfUkVNT1RFX0VOVFJZX18nKSkge1xuICAgIGRlZmluZVByb3BlcnR5R2xvYmFsVmFsKEN1cnJlbnRHbG9iYWwsICdfX0dMT0JBTF9MT0FESU5HX1JFTU9URV9FTlRSWV9fJywge30pO1xufVxuY29uc3QgZ2xvYmFsTG9hZGluZyA9IEN1cnJlbnRHbG9iYWwuX19HTE9CQUxfTE9BRElOR19SRU1PVEVfRU5UUllfXztcbmZ1bmN0aW9uIHNldEdsb2JhbERlZmF1bHRWYWwodGFyZ2V0KSB7XG4gICAgdmFyIF90YXJnZXRfX19GRURFUkFUSU9OX18sIF90YXJnZXRfX19GRURFUkFUSU9OX18xLCBfdGFyZ2V0X19fRkVERVJBVElPTl9fMiwgX3RhcmdldF9fX0ZFREVSQVRJT05fXzMsIF90YXJnZXRfX19GRURFUkFUSU9OX180LCBfdGFyZ2V0X19fRkVERVJBVElPTl9fNTtcbiAgICBpZiAoaW5jbHVkZU93blByb3BlcnR5KHRhcmdldCwgJ19fVk1PS19fJykgJiYgIWluY2x1ZGVPd25Qcm9wZXJ0eSh0YXJnZXQsICdfX0ZFREVSQVRJT05fXycpKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5R2xvYmFsVmFsKHRhcmdldCwgJ19fRkVERVJBVElPTl9fJywgdGFyZ2V0Ll9fVk1PS19fKTtcbiAgICB9XG4gICAgaWYgKCFpbmNsdWRlT3duUHJvcGVydHkodGFyZ2V0LCAnX19GRURFUkFUSU9OX18nKSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eUdsb2JhbFZhbCh0YXJnZXQsICdfX0ZFREVSQVRJT05fXycsIHtcbiAgICAgICAgICAgIF9fR0xPQkFMX1BMVUdJTl9fOiBbXSxcbiAgICAgICAgICAgIF9fSU5TVEFOQ0VTX186IFtdLFxuICAgICAgICAgICAgbW9kdWxlSW5mbzoge30sXG4gICAgICAgICAgICBfX1NIQVJFX186IHt9LFxuICAgICAgICAgICAgX19NQU5JRkVTVF9MT0FESU5HX186IHt9LFxuICAgICAgICAgICAgX19QUkVMT0FERURfTUFQX186IG5ldyBNYXAoKVxuICAgICAgICB9KTtcbiAgICAgICAgZGVmaW5lUHJvcGVydHlHbG9iYWxWYWwodGFyZ2V0LCAnX19WTU9LX18nLCB0YXJnZXQuX19GRURFUkFUSU9OX18pO1xuICAgIH1cbiAgICB2YXIgX19fR0xPQkFMX1BMVUdJTl9fO1xuICAgIChfX19HTE9CQUxfUExVR0lOX18gPSAoX3RhcmdldF9fX0ZFREVSQVRJT05fXyA9IHRhcmdldC5fX0ZFREVSQVRJT05fXykuX19HTE9CQUxfUExVR0lOX18pICE9IG51bGwgPyBfX19HTE9CQUxfUExVR0lOX18gOiBfdGFyZ2V0X19fRkVERVJBVElPTl9fLl9fR0xPQkFMX1BMVUdJTl9fID0gW107XG4gICAgdmFyIF9fX0lOU1RBTkNFU19fO1xuICAgIChfX19JTlNUQU5DRVNfXyA9IChfdGFyZ2V0X19fRkVERVJBVElPTl9fMSA9IHRhcmdldC5fX0ZFREVSQVRJT05fXykuX19JTlNUQU5DRVNfXykgIT0gbnVsbCA/IF9fX0lOU1RBTkNFU19fIDogX3RhcmdldF9fX0ZFREVSQVRJT05fXzEuX19JTlNUQU5DRVNfXyA9IFtdO1xuICAgIHZhciBfbW9kdWxlSW5mbztcbiAgICAoX21vZHVsZUluZm8gPSAoX3RhcmdldF9fX0ZFREVSQVRJT05fXzIgPSB0YXJnZXQuX19GRURFUkFUSU9OX18pLm1vZHVsZUluZm8pICE9IG51bGwgPyBfbW9kdWxlSW5mbyA6IF90YXJnZXRfX19GRURFUkFUSU9OX18yLm1vZHVsZUluZm8gPSB7fTtcbiAgICB2YXIgX19fU0hBUkVfXztcbiAgICAoX19fU0hBUkVfXyA9IChfdGFyZ2V0X19fRkVERVJBVElPTl9fMyA9IHRhcmdldC5fX0ZFREVSQVRJT05fXykuX19TSEFSRV9fKSAhPSBudWxsID8gX19fU0hBUkVfXyA6IF90YXJnZXRfX19GRURFUkFUSU9OX18zLl9fU0hBUkVfXyA9IHt9O1xuICAgIHZhciBfX19NQU5JRkVTVF9MT0FESU5HX187XG4gICAgKF9fX01BTklGRVNUX0xPQURJTkdfXyA9IChfdGFyZ2V0X19fRkVERVJBVElPTl9fNCA9IHRhcmdldC5fX0ZFREVSQVRJT05fXykuX19NQU5JRkVTVF9MT0FESU5HX18pICE9IG51bGwgPyBfX19NQU5JRkVTVF9MT0FESU5HX18gOiBfdGFyZ2V0X19fRkVERVJBVElPTl9fNC5fX01BTklGRVNUX0xPQURJTkdfXyA9IHt9O1xuICAgIHZhciBfX19QUkVMT0FERURfTUFQX187XG4gICAgKF9fX1BSRUxPQURFRF9NQVBfXyA9IChfdGFyZ2V0X19fRkVERVJBVElPTl9fNSA9IHRhcmdldC5fX0ZFREVSQVRJT05fXykuX19QUkVMT0FERURfTUFQX18pICE9IG51bGwgPyBfX19QUkVMT0FERURfTUFQX18gOiBfdGFyZ2V0X19fRkVERVJBVElPTl9fNS5fX1BSRUxPQURFRF9NQVBfXyA9IG5ldyBNYXAoKTtcbn1cbnNldEdsb2JhbERlZmF1bHRWYWwoQ3VycmVudEdsb2JhbCk7XG5zZXRHbG9iYWxEZWZhdWx0VmFsKG5hdGl2ZUdsb2JhbCk7XG5mdW5jdGlvbiByZXNldEZlZGVyYXRpb25HbG9iYWxJbmZvKCkge1xuICAgIEN1cnJlbnRHbG9iYWwuX19GRURFUkFUSU9OX18uX19HTE9CQUxfUExVR0lOX18gPSBbXTtcbiAgICBDdXJyZW50R2xvYmFsLl9fRkVERVJBVElPTl9fLl9fSU5TVEFOQ0VTX18gPSBbXTtcbiAgICBDdXJyZW50R2xvYmFsLl9fRkVERVJBVElPTl9fLm1vZHVsZUluZm8gPSB7fTtcbiAgICBDdXJyZW50R2xvYmFsLl9fRkVERVJBVElPTl9fLl9fU0hBUkVfXyA9IHt9O1xuICAgIEN1cnJlbnRHbG9iYWwuX19GRURFUkFUSU9OX18uX19NQU5JRkVTVF9MT0FESU5HX18gPSB7fTtcbiAgICBPYmplY3Qua2V5cyhnbG9iYWxMb2FkaW5nKS5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgIGRlbGV0ZSBnbG9iYWxMb2FkaW5nW2tleV07XG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZXRHbG9iYWxGZWRlcmF0aW9uSW5zdGFuY2UobmFtZSwgdmVyc2lvbikge1xuICAgIGNvbnN0IGJ1aWxkSWQgPSBnZXRCdWlsZGVySWQoKTtcbiAgICByZXR1cm4gQ3VycmVudEdsb2JhbC5fX0ZFREVSQVRJT05fXy5fX0lOU1RBTkNFU19fLmZpbmQoKEdNSW5zdGFuY2UpPT57XG4gICAgICAgIGlmIChidWlsZElkICYmIEdNSW5zdGFuY2Uub3B0aW9ucy5pZCA9PT0gZ2V0QnVpbGRlcklkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChHTUluc3RhbmNlLm9wdGlvbnMubmFtZSA9PT0gbmFtZSAmJiAhR01JbnN0YW5jZS5vcHRpb25zLnZlcnNpb24gJiYgIXZlcnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChHTUluc3RhbmNlLm9wdGlvbnMubmFtZSA9PT0gbmFtZSAmJiB2ZXJzaW9uICYmIEdNSW5zdGFuY2Uub3B0aW9ucy52ZXJzaW9uID09PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzZXRHbG9iYWxGZWRlcmF0aW9uSW5zdGFuY2UoRmVkZXJhdGlvbkluc3RhbmNlKSB7XG4gICAgQ3VycmVudEdsb2JhbC5fX0ZFREVSQVRJT05fXy5fX0lOU1RBTkNFU19fLnB1c2goRmVkZXJhdGlvbkluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIGdldEdsb2JhbEZlZGVyYXRpb25Db25zdHJ1Y3RvcigpIHtcbiAgICByZXR1cm4gQ3VycmVudEdsb2JhbC5fX0ZFREVSQVRJT05fXy5fX0RFQlVHX0NPTlNUUlVDVE9SX187XG59XG5mdW5jdGlvbiBzZXRHbG9iYWxGZWRlcmF0aW9uQ29uc3RydWN0b3IoRmVkZXJhdGlvbkNvbnN0cnVjdG9yLCBpc0RlYnVnID0gaXNEZWJ1Z01vZGUoKSkge1xuICAgIGlmIChpc0RlYnVnKSB7XG4gICAgICAgIEN1cnJlbnRHbG9iYWwuX19GRURFUkFUSU9OX18uX19ERUJVR19DT05TVFJVQ1RPUl9fID0gRmVkZXJhdGlvbkNvbnN0cnVjdG9yO1xuICAgICAgICBDdXJyZW50R2xvYmFsLl9fRkVERVJBVElPTl9fLl9fREVCVUdfQ09OU1RSVUNUT1JfVkVSU0lPTl9fID0gXCIwLjcuM1wiO1xuICAgIH1cbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG5mdW5jdGlvbiBnZXRJbmZvV2l0aG91dFR5cGUodGFyZ2V0LCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3Qga2V5UmVzID0gdGFyZ2V0W2tleV07XG4gICAgICAgIGlmIChrZXlSZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHRhcmdldFtrZXldLFxuICAgICAgICAgICAgICAgIGtleToga2V5XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0S2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRhcmdldEtleSBvZiB0YXJnZXRLZXlzKXtcbiAgICAgICAgICAgICAgICBjb25zdCBbdGFyZ2V0VHlwZU9yTmFtZSwgX10gPSB0YXJnZXRLZXkuc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuS2V5ID0gYCR7dGFyZ2V0VHlwZU9yTmFtZX06JHtrZXl9YDtcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlV2l0aEtleVJlcyA9IHRhcmdldFtuS2V5XTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZVdpdGhLZXlSZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0eXBlV2l0aEtleVJlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogbktleVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBrZXk6IGtleVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigna2V5IG11c3QgYmUgc3RyaW5nJyk7XG4gICAgfVxufVxuY29uc3QgZ2V0R2xvYmFsU25hcHNob3QgPSAoKT0+bmF0aXZlR2xvYmFsLl9fRkVERVJBVElPTl9fLm1vZHVsZUluZm87XG5jb25zdCBnZXRUYXJnZXRTbmFwc2hvdEluZm9CeU1vZHVsZUluZm8gPSAobW9kdWxlSW5mbywgc25hcHNob3QpPT57XG4gICAgLy8gQ2hlY2sgaWYgdGhlIHJlbW90ZSBpcyBpbmNsdWRlZCBpbiB0aGUgaG9zdFNuYXBzaG90XG4gICAgY29uc3QgbW9kdWxlS2V5ID0gZ2V0Rk1JZChtb2R1bGVJbmZvKTtcbiAgICBjb25zdCBnZXRNb2R1bGVJbmZvID0gZ2V0SW5mb1dpdGhvdXRUeXBlKHNuYXBzaG90LCBtb2R1bGVLZXkpLnZhbHVlO1xuICAgIC8vIFRoZSByZW1vdGVTbmFwc2hvdCBtaWdodCBub3QgaW5jbHVkZSBhIHZlcnNpb25cbiAgICBpZiAoZ2V0TW9kdWxlSW5mbyAmJiAhZ2V0TW9kdWxlSW5mby52ZXJzaW9uICYmICd2ZXJzaW9uJyBpbiBtb2R1bGVJbmZvICYmIG1vZHVsZUluZm9bJ3ZlcnNpb24nXSkge1xuICAgICAgICBnZXRNb2R1bGVJbmZvLnZlcnNpb24gPSBtb2R1bGVJbmZvWyd2ZXJzaW9uJ107XG4gICAgfVxuICAgIGlmIChnZXRNb2R1bGVJbmZvKSB7XG4gICAgICAgIHJldHVybiBnZXRNb2R1bGVJbmZvO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgcmVtb3RlIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgaG9zdFNuYXBzaG90LCBkZXBsb3kgYSBtaWNybyBhcHAgc25hcHNob3RcbiAgICBpZiAoJ3ZlcnNpb24nIGluIG1vZHVsZUluZm8gJiYgbW9kdWxlSW5mb1sndmVyc2lvbiddKSB7XG4gICAgICAgIGNvbnN0IHsgdmVyc2lvbiB9ID0gbW9kdWxlSW5mbywgcmVzTW9kdWxlSW5mbyA9IF9vYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzX2xvb3NlKG1vZHVsZUluZm8sIFtcbiAgICAgICAgICAgIFwidmVyc2lvblwiXG4gICAgICAgIF0pO1xuICAgICAgICBjb25zdCBtb2R1bGVLZXlXaXRob3V0VmVyc2lvbiA9IGdldEZNSWQocmVzTW9kdWxlSW5mbyk7XG4gICAgICAgIGNvbnN0IGdldE1vZHVsZUluZm9XaXRob3V0VmVyc2lvbiA9IGdldEluZm9XaXRob3V0VHlwZShuYXRpdmVHbG9iYWwuX19GRURFUkFUSU9OX18ubW9kdWxlSW5mbywgbW9kdWxlS2V5V2l0aG91dFZlcnNpb24pLnZhbHVlO1xuICAgICAgICBpZiAoKGdldE1vZHVsZUluZm9XaXRob3V0VmVyc2lvbiA9PSBudWxsID8gdm9pZCAwIDogZ2V0TW9kdWxlSW5mb1dpdGhvdXRWZXJzaW9uLnZlcnNpb24pID09PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TW9kdWxlSW5mb1dpdGhvdXRWZXJzaW9uO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbn07XG5jb25zdCBnZXRHbG9iYWxTbmFwc2hvdEluZm9CeU1vZHVsZUluZm8gPSAobW9kdWxlSW5mbyk9PmdldFRhcmdldFNuYXBzaG90SW5mb0J5TW9kdWxlSW5mbyhtb2R1bGVJbmZvLCBuYXRpdmVHbG9iYWwuX19GRURFUkFUSU9OX18ubW9kdWxlSW5mbyk7XG5jb25zdCBzZXRHbG9iYWxTbmFwc2hvdEluZm9CeU1vZHVsZUluZm8gPSAocmVtb3RlSW5mbywgbW9kdWxlRGV0YWlsSW5mbyk9PntcbiAgICBjb25zdCBtb2R1bGVLZXkgPSBnZXRGTUlkKHJlbW90ZUluZm8pO1xuICAgIG5hdGl2ZUdsb2JhbC5fX0ZFREVSQVRJT05fXy5tb2R1bGVJbmZvW21vZHVsZUtleV0gPSBtb2R1bGVEZXRhaWxJbmZvO1xuICAgIHJldHVybiBuYXRpdmVHbG9iYWwuX19GRURFUkFUSU9OX18ubW9kdWxlSW5mbztcbn07XG5jb25zdCBhZGRHbG9iYWxTbmFwc2hvdCA9IChtb2R1bGVJbmZvcyk9PntcbiAgICBuYXRpdmVHbG9iYWwuX19GRURFUkFUSU9OX18ubW9kdWxlSW5mbyA9IF9leHRlbmRzKHt9LCBuYXRpdmVHbG9iYWwuX19GRURFUkFUSU9OX18ubW9kdWxlSW5mbywgbW9kdWxlSW5mb3MpO1xuICAgIHJldHVybiAoKT0+e1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobW9kdWxlSW5mb3MpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKXtcbiAgICAgICAgICAgIGRlbGV0ZSBuYXRpdmVHbG9iYWwuX19GRURFUkFUSU9OX18ubW9kdWxlSW5mb1trZXldO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5jb25zdCBnZXRSZW1vdGVFbnRyeUV4cG9ydHMgPSAobmFtZSwgZ2xvYmFsTmFtZSk9PntcbiAgICBjb25zdCByZW1vdGVFbnRyeUtleSA9IGdsb2JhbE5hbWUgfHwgYF9fRkVERVJBVElPTl8ke25hbWV9OmN1c3RvbV9fYDtcbiAgICBjb25zdCBlbnRyeUV4cG9ydHMgPSBDdXJyZW50R2xvYmFsW3JlbW90ZUVudHJ5S2V5XTtcbiAgICByZXR1cm4ge1xuICAgICAgICByZW1vdGVFbnRyeUtleSxcbiAgICAgICAgZW50cnlFeHBvcnRzXG4gICAgfTtcbn07XG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gcmVnaXN0ZXIgZ2xvYmFsIHBsdWdpbnMuXG4vLyBJdCBpdGVyYXRlcyBvdmVyIHRoZSBwcm92aWRlZCBwbHVnaW5zIGFuZCBjaGVja3MgaWYgdGhleSBhcmUgYWxyZWFkeSByZWdpc3RlcmVkLlxuLy8gSWYgYSBwbHVnaW4gaXMgbm90IHJlZ2lzdGVyZWQsIGl0IGlzIGFkZGVkIHRvIHRoZSBnbG9iYWwgcGx1Z2lucy5cbi8vIElmIGEgcGx1Z2luIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCwgYSB3YXJuaW5nIG1lc3NhZ2UgaXMgbG9nZ2VkLlxuY29uc3QgcmVnaXN0ZXJHbG9iYWxQbHVnaW5zID0gKHBsdWdpbnMpPT57XG4gICAgY29uc3QgeyBfX0dMT0JBTF9QTFVHSU5fXyB9ID0gbmF0aXZlR2xvYmFsLl9fRkVERVJBVElPTl9fO1xuICAgIHBsdWdpbnMuZm9yRWFjaCgocGx1Z2luKT0+e1xuICAgICAgICBpZiAoX19HTE9CQUxfUExVR0lOX18uZmluZEluZGV4KChwKT0+cC5uYW1lID09PSBwbHVnaW4ubmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICBfX0dMT0JBTF9QTFVHSU5fXy5wdXNoKHBsdWdpbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3YXJuKGBUaGUgcGx1Z2luICR7cGx1Z2luLm5hbWV9IGhhcyBiZWVuIHJlZ2lzdGVyZWQuYCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5jb25zdCBnZXRHbG9iYWxIb3N0UGx1Z2lucyA9ICgpPT5uYXRpdmVHbG9iYWwuX19GRURFUkFUSU9OX18uX19HTE9CQUxfUExVR0lOX187XG5jb25zdCBnZXRQcmVsb2FkZWQgPSAoaWQpPT5DdXJyZW50R2xvYmFsLl9fRkVERVJBVElPTl9fLl9fUFJFTE9BREVEX01BUF9fLmdldChpZCk7XG5jb25zdCBzZXRQcmVsb2FkZWQgPSAoaWQpPT5DdXJyZW50R2xvYmFsLl9fRkVERVJBVElPTl9fLl9fUFJFTE9BREVEX01BUF9fLnNldChpZCwgdHJ1ZSk7XG5cbmNvbnN0IERFRkFVTFRfU0NPUEUgPSAnZGVmYXVsdCc7XG5jb25zdCBERUZBVUxUX1JFTU9URV9UWVBFID0gJ2dsb2JhbCc7XG5cbi8vIGZvcmsgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vb3JpZ2luanMvdml0ZS1wbHVnaW4tZmVkZXJhdGlvbi9ibG9iL3YxLjEuMTIvcGFja2FnZXMvbGliL3NyYy91dGlscy9zZW12ZXIvaW5kZXgudHNcbi8vIHRob3NlIGNvbnN0YW50cyBhcmUgYmFzZWQgb24gaHR0cHM6Ly93d3cucnVieWRvYy5pbmZvL2dlbXMvc2VtYW50aWNfcmFuZ2UvMy4wLjAvU2VtYW50aWNSYW5nZSNCVUlMRElERU5USUZJRVItY29uc3RhbnRcbi8vIENvcHlyaWdodCAoYylcbi8vIHZpdGUtcGx1Z2luLWZlZGVyYXRpb24gaXMgbGljZW5zZWQgdW5kZXIgTXVsYW4gUFNMIHYyLlxuLy8gWW91IGNhbiB1c2UgdGhpcyBzb2Z0d2FyZSBhY2NvcmRpbmcgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoZSBNdWxhbiBQU0wgdjIuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgTXVsYW4gUFNMIHYyIGF0OlxuLy8gICAgICBodHRwOi8vbGljZW5zZS5jb3NjbC5vcmcuY24vTXVsYW5QU0wyXG4vLyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIE9OIEFOIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9GIEFOWSBLSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIE5PTi1JTkZSSU5HRU1FTlQsIE1FUkNIQU5UQUJJTElUWSBPUiBGSVQgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLlxuLy8gU2VlIHRoZSBNdWxhbiBQU0wgdjIgZm9yIG1vcmUgZGV0YWlscy5cbmNvbnN0IGJ1aWxkSWRlbnRpZmllciA9ICdbMC05QS1aYS16LV0rJztcbmNvbnN0IGJ1aWxkID0gYCg/OlxcXFwrKCR7YnVpbGRJZGVudGlmaWVyfSg/OlxcXFwuJHtidWlsZElkZW50aWZpZXJ9KSopKWA7XG5jb25zdCBudW1lcmljSWRlbnRpZmllciA9ICcwfFsxLTldXFxcXGQqJztcbmNvbnN0IG51bWVyaWNJZGVudGlmaWVyTG9vc2UgPSAnWzAtOV0rJztcbmNvbnN0IG5vbk51bWVyaWNJZGVudGlmaWVyID0gJ1xcXFxkKlthLXpBLVotXVthLXpBLVowLTktXSonO1xuY29uc3QgcHJlUmVsZWFzZUlkZW50aWZpZXJMb29zZSA9IGAoPzoke251bWVyaWNJZGVudGlmaWVyTG9vc2V9fCR7bm9uTnVtZXJpY0lkZW50aWZpZXJ9KWA7XG5jb25zdCBwcmVSZWxlYXNlTG9vc2UgPSBgKD86LT8oJHtwcmVSZWxlYXNlSWRlbnRpZmllckxvb3NlfSg/OlxcXFwuJHtwcmVSZWxlYXNlSWRlbnRpZmllckxvb3NlfSkqKSlgO1xuY29uc3QgcHJlUmVsZWFzZUlkZW50aWZpZXIgPSBgKD86JHtudW1lcmljSWRlbnRpZmllcn18JHtub25OdW1lcmljSWRlbnRpZmllcn0pYDtcbmNvbnN0IHByZVJlbGVhc2UgPSBgKD86LSgke3ByZVJlbGVhc2VJZGVudGlmaWVyfSg/OlxcXFwuJHtwcmVSZWxlYXNlSWRlbnRpZmllcn0pKikpYDtcbmNvbnN0IHhSYW5nZUlkZW50aWZpZXIgPSBgJHtudW1lcmljSWRlbnRpZmllcn18eHxYfFxcXFwqYDtcbmNvbnN0IHhSYW5nZVBsYWluID0gYFt2PVxcXFxzXSooJHt4UmFuZ2VJZGVudGlmaWVyfSkoPzpcXFxcLigke3hSYW5nZUlkZW50aWZpZXJ9KSg/OlxcXFwuKCR7eFJhbmdlSWRlbnRpZmllcn0pKD86JHtwcmVSZWxlYXNlfSk/JHtidWlsZH0/KT8pP2A7XG5jb25zdCBoeXBoZW5SYW5nZSA9IGBeXFxcXHMqKCR7eFJhbmdlUGxhaW59KVxcXFxzKy1cXFxccysoJHt4UmFuZ2VQbGFpbn0pXFxcXHMqJGA7XG5jb25zdCBtYWluVmVyc2lvbkxvb3NlID0gYCgke251bWVyaWNJZGVudGlmaWVyTG9vc2V9KVxcXFwuKCR7bnVtZXJpY0lkZW50aWZpZXJMb29zZX0pXFxcXC4oJHtudW1lcmljSWRlbnRpZmllckxvb3NlfSlgO1xuY29uc3QgbG9vc2VQbGFpbiA9IGBbdj1cXFxcc10qJHttYWluVmVyc2lvbkxvb3NlfSR7cHJlUmVsZWFzZUxvb3NlfT8ke2J1aWxkfT9gO1xuY29uc3QgZ3RsdCA9ICcoKD86PHw+KT89PyknO1xuY29uc3QgY29tcGFyYXRvclRyaW0gPSBgKFxcXFxzKikke2d0bHR9XFxcXHMqKCR7bG9vc2VQbGFpbn18JHt4UmFuZ2VQbGFpbn0pYDtcbmNvbnN0IGxvbmVUaWxkZSA9ICcoPzp+Pj8pJztcbmNvbnN0IHRpbGRlVHJpbSA9IGAoXFxcXHMqKSR7bG9uZVRpbGRlfVxcXFxzK2A7XG5jb25zdCBsb25lQ2FyZXQgPSAnKD86XFxcXF4pJztcbmNvbnN0IGNhcmV0VHJpbSA9IGAoXFxcXHMqKSR7bG9uZUNhcmV0fVxcXFxzK2A7XG5jb25zdCBzdGFyID0gJyg8fD4pPz0/XFxcXHMqXFxcXConO1xuY29uc3QgY2FyZXQgPSBgXiR7bG9uZUNhcmV0fSR7eFJhbmdlUGxhaW59JGA7XG5jb25zdCBtYWluVmVyc2lvbiA9IGAoJHtudW1lcmljSWRlbnRpZmllcn0pXFxcXC4oJHtudW1lcmljSWRlbnRpZmllcn0pXFxcXC4oJHtudW1lcmljSWRlbnRpZmllcn0pYDtcbmNvbnN0IGZ1bGxQbGFpbiA9IGB2PyR7bWFpblZlcnNpb259JHtwcmVSZWxlYXNlfT8ke2J1aWxkfT9gO1xuY29uc3QgdGlsZGUgPSBgXiR7bG9uZVRpbGRlfSR7eFJhbmdlUGxhaW59JGA7XG5jb25zdCB4UmFuZ2UgPSBgXiR7Z3RsdH1cXFxccyoke3hSYW5nZVBsYWlufSRgO1xuY29uc3QgY29tcGFyYXRvciA9IGBeJHtndGx0fVxcXFxzKigke2Z1bGxQbGFpbn0pJHxeJGA7XG4vLyBjb3B5IGZyb20gc2VtdmVyIHBhY2thZ2VcbmNvbnN0IGd0ZTAgPSAnXlxcXFxzKj49XFxcXHMqMC4wLjBcXFxccyokJztcblxuLy8gZm9yayBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9vcmlnaW5qcy92aXRlLXBsdWdpbi1mZWRlcmF0aW9uL2Jsb2IvdjEuMS4xMi9wYWNrYWdlcy9saWIvc3JjL3V0aWxzL3NlbXZlci9pbmRleC50c1xuLy8gQ29weXJpZ2h0IChjKVxuLy8gdml0ZS1wbHVnaW4tZmVkZXJhdGlvbiBpcyBsaWNlbnNlZCB1bmRlciBNdWxhbiBQU0wgdjIuXG4vLyBZb3UgY2FuIHVzZSB0aGlzIHNvZnR3YXJlIGFjY29yZGluZyB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhlIE11bGFuIFBTTCB2Mi5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiBNdWxhbiBQU0wgdjIgYXQ6XG4vLyAgICAgIGh0dHA6Ly9saWNlbnNlLmNvc2NsLm9yZy5jbi9NdWxhblBTTDJcbi8vIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgT04gQU4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT0YgQU5ZIEtJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gTk9OLUlORlJJTkdFTUVOVCwgTUVSQ0hBTlRBQklMSVRZIE9SIEZJVCBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuXG4vLyBTZWUgdGhlIE11bGFuIFBTTCB2MiBmb3IgbW9yZSBkZXRhaWxzLlxuZnVuY3Rpb24gcGFyc2VSZWdleChzb3VyY2UpIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChzb3VyY2UpO1xufVxuZnVuY3Rpb24gaXNYVmVyc2lvbih2ZXJzaW9uKSB7XG4gICAgcmV0dXJuICF2ZXJzaW9uIHx8IHZlcnNpb24udG9Mb3dlckNhc2UoKSA9PT0gJ3gnIHx8IHZlcnNpb24gPT09ICcqJztcbn1cbmZ1bmN0aW9uIHBpcGUoLi4uZm5zKSB7XG4gICAgcmV0dXJuICh4KT0+Zm5zLnJlZHVjZSgodiwgZik9PmYodiksIHgpO1xufVxuZnVuY3Rpb24gZXh0cmFjdENvbXBhcmF0b3IoY29tcGFyYXRvclN0cmluZykge1xuICAgIHJldHVybiBjb21wYXJhdG9yU3RyaW5nLm1hdGNoKHBhcnNlUmVnZXgoY29tcGFyYXRvcikpO1xufVxuZnVuY3Rpb24gY29tYmluZVZlcnNpb24obWFqb3IsIG1pbm9yLCBwYXRjaCwgcHJlUmVsZWFzZSkge1xuICAgIGNvbnN0IG1haW5WZXJzaW9uID0gYCR7bWFqb3J9LiR7bWlub3J9LiR7cGF0Y2h9YDtcbiAgICBpZiAocHJlUmVsZWFzZSkge1xuICAgICAgICByZXR1cm4gYCR7bWFpblZlcnNpb259LSR7cHJlUmVsZWFzZX1gO1xuICAgIH1cbiAgICByZXR1cm4gbWFpblZlcnNpb247XG59XG5cbi8vIGZvcmsgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vb3JpZ2luanMvdml0ZS1wbHVnaW4tZmVkZXJhdGlvbi9ibG9iL3YxLjEuMTIvcGFja2FnZXMvbGliL3NyYy91dGlscy9zZW12ZXIvaW5kZXgudHNcbi8vIENvcHlyaWdodCAoYylcbi8vIHZpdGUtcGx1Z2luLWZlZGVyYXRpb24gaXMgbGljZW5zZWQgdW5kZXIgTXVsYW4gUFNMIHYyLlxuLy8gWW91IGNhbiB1c2UgdGhpcyBzb2Z0d2FyZSBhY2NvcmRpbmcgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoZSBNdWxhbiBQU0wgdjIuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgTXVsYW4gUFNMIHYyIGF0OlxuLy8gICAgICBodHRwOi8vbGljZW5zZS5jb3NjbC5vcmcuY24vTXVsYW5QU0wyXG4vLyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIE9OIEFOIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9GIEFOWSBLSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIE5PTi1JTkZSSU5HRU1FTlQsIE1FUkNIQU5UQUJJTElUWSBPUiBGSVQgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLlxuLy8gU2VlIHRoZSBNdWxhbiBQU0wgdjIgZm9yIG1vcmUgZGV0YWlscy5cbmZ1bmN0aW9uIHBhcnNlSHlwaGVuKHJhbmdlKSB7XG4gICAgcmV0dXJuIHJhbmdlLnJlcGxhY2UocGFyc2VSZWdleChoeXBoZW5SYW5nZSksIChfcmFuZ2UsIGZyb20sIGZyb21NYWpvciwgZnJvbU1pbm9yLCBmcm9tUGF0Y2gsIF9mcm9tUHJlUmVsZWFzZSwgX2Zyb21CdWlsZCwgdG8sIHRvTWFqb3IsIHRvTWlub3IsIHRvUGF0Y2gsIHRvUHJlUmVsZWFzZSk9PntcbiAgICAgICAgaWYgKGlzWFZlcnNpb24oZnJvbU1ham9yKSkge1xuICAgICAgICAgICAgZnJvbSA9ICcnO1xuICAgICAgICB9IGVsc2UgaWYgKGlzWFZlcnNpb24oZnJvbU1pbm9yKSkge1xuICAgICAgICAgICAgZnJvbSA9IGA+PSR7ZnJvbU1ham9yfS4wLjBgO1xuICAgICAgICB9IGVsc2UgaWYgKGlzWFZlcnNpb24oZnJvbVBhdGNoKSkge1xuICAgICAgICAgICAgZnJvbSA9IGA+PSR7ZnJvbU1ham9yfS4ke2Zyb21NaW5vcn0uMGA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcm9tID0gYD49JHtmcm9tfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzWFZlcnNpb24odG9NYWpvcikpIHtcbiAgICAgICAgICAgIHRvID0gJyc7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNYVmVyc2lvbih0b01pbm9yKSkge1xuICAgICAgICAgICAgdG8gPSBgPCR7TnVtYmVyKHRvTWFqb3IpICsgMX0uMC4wLTBgO1xuICAgICAgICB9IGVsc2UgaWYgKGlzWFZlcnNpb24odG9QYXRjaCkpIHtcbiAgICAgICAgICAgIHRvID0gYDwke3RvTWFqb3J9LiR7TnVtYmVyKHRvTWlub3IpICsgMX0uMC0wYDtcbiAgICAgICAgfSBlbHNlIGlmICh0b1ByZVJlbGVhc2UpIHtcbiAgICAgICAgICAgIHRvID0gYDw9JHt0b01ham9yfS4ke3RvTWlub3J9LiR7dG9QYXRjaH0tJHt0b1ByZVJlbGVhc2V9YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvID0gYDw9JHt0b31gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtmcm9tfSAke3RvfWAudHJpbSgpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gcGFyc2VDb21wYXJhdG9yVHJpbShyYW5nZSkge1xuICAgIHJldHVybiByYW5nZS5yZXBsYWNlKHBhcnNlUmVnZXgoY29tcGFyYXRvclRyaW0pLCAnJDEkMiQzJyk7XG59XG5mdW5jdGlvbiBwYXJzZVRpbGRlVHJpbShyYW5nZSkge1xuICAgIHJldHVybiByYW5nZS5yZXBsYWNlKHBhcnNlUmVnZXgodGlsZGVUcmltKSwgJyQxficpO1xufVxuZnVuY3Rpb24gcGFyc2VDYXJldFRyaW0ocmFuZ2UpIHtcbiAgICByZXR1cm4gcmFuZ2UucmVwbGFjZShwYXJzZVJlZ2V4KGNhcmV0VHJpbSksICckMV4nKTtcbn1cbmZ1bmN0aW9uIHBhcnNlQ2FyZXRzKHJhbmdlKSB7XG4gICAgcmV0dXJuIHJhbmdlLnRyaW0oKS5zcGxpdCgvXFxzKy8pLm1hcCgocmFuZ2VWZXJzaW9uKT0+cmFuZ2VWZXJzaW9uLnJlcGxhY2UocGFyc2VSZWdleChjYXJldCksIChfLCBtYWpvciwgbWlub3IsIHBhdGNoLCBwcmVSZWxlYXNlKT0+e1xuICAgICAgICAgICAgaWYgKGlzWFZlcnNpb24obWFqb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1hWZXJzaW9uKG1pbm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgPj0ke21ham9yfS4wLjAgPCR7TnVtYmVyKG1ham9yKSArIDF9LjAuMC0wYDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNYVmVyc2lvbihwYXRjaCkpIHtcbiAgICAgICAgICAgICAgICBpZiAobWFqb3IgPT09ICcwJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYD49JHttYWpvcn0uJHttaW5vcn0uMCA8JHttYWpvcn0uJHtOdW1iZXIobWlub3IpICsgMX0uMC0wYDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYD49JHttYWpvcn0uJHttaW5vcn0uMCA8JHtOdW1iZXIobWFqb3IpICsgMX0uMC4wLTBgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJlUmVsZWFzZSkge1xuICAgICAgICAgICAgICAgIGlmIChtYWpvciA9PT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtaW5vciA9PT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYD49JHttYWpvcn0uJHttaW5vcn0uJHtwYXRjaH0tJHtwcmVSZWxlYXNlfSA8JHttYWpvcn0uJHttaW5vcn0uJHtOdW1iZXIocGF0Y2gpICsgMX0tMGA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYD49JHttYWpvcn0uJHttaW5vcn0uJHtwYXRjaH0tJHtwcmVSZWxlYXNlfSA8JHttYWpvcn0uJHtOdW1iZXIobWlub3IpICsgMX0uMC0wYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgPj0ke21ham9yfS4ke21pbm9yfS4ke3BhdGNofS0ke3ByZVJlbGVhc2V9IDwke051bWJlcihtYWpvcikgKyAxfS4wLjAtMGA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobWFqb3IgPT09ICcwJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWlub3IgPT09ICcwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA+PSR7bWFqb3J9LiR7bWlub3J9LiR7cGF0Y2h9IDwke21ham9yfS4ke21pbm9yfS4ke051bWJlcihwYXRjaCkgKyAxfS0wYDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgPj0ke21ham9yfS4ke21pbm9yfS4ke3BhdGNofSA8JHttYWpvcn0uJHtOdW1iZXIobWlub3IpICsgMX0uMC0wYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYD49JHttYWpvcn0uJHttaW5vcn0uJHtwYXRjaH0gPCR7TnVtYmVyKG1ham9yKSArIDF9LjAuMC0wYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpLmpvaW4oJyAnKTtcbn1cbmZ1bmN0aW9uIHBhcnNlVGlsZGVzKHJhbmdlKSB7XG4gICAgcmV0dXJuIHJhbmdlLnRyaW0oKS5zcGxpdCgvXFxzKy8pLm1hcCgocmFuZ2VWZXJzaW9uKT0+cmFuZ2VWZXJzaW9uLnJlcGxhY2UocGFyc2VSZWdleCh0aWxkZSksIChfLCBtYWpvciwgbWlub3IsIHBhdGNoLCBwcmVSZWxlYXNlKT0+e1xuICAgICAgICAgICAgaWYgKGlzWFZlcnNpb24obWFqb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1hWZXJzaW9uKG1pbm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgPj0ke21ham9yfS4wLjAgPCR7TnVtYmVyKG1ham9yKSArIDF9LjAuMC0wYDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNYVmVyc2lvbihwYXRjaCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYD49JHttYWpvcn0uJHttaW5vcn0uMCA8JHttYWpvcn0uJHtOdW1iZXIobWlub3IpICsgMX0uMC0wYDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJlUmVsZWFzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgPj0ke21ham9yfS4ke21pbm9yfS4ke3BhdGNofS0ke3ByZVJlbGVhc2V9IDwke21ham9yfS4ke051bWJlcihtaW5vcikgKyAxfS4wLTBgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGA+PSR7bWFqb3J9LiR7bWlub3J9LiR7cGF0Y2h9IDwke21ham9yfS4ke051bWJlcihtaW5vcikgKyAxfS4wLTBgO1xuICAgICAgICB9KSkuam9pbignICcpO1xufVxuZnVuY3Rpb24gcGFyc2VYUmFuZ2VzKHJhbmdlKSB7XG4gICAgcmV0dXJuIHJhbmdlLnNwbGl0KC9cXHMrLykubWFwKChyYW5nZVZlcnNpb24pPT5yYW5nZVZlcnNpb24udHJpbSgpLnJlcGxhY2UocGFyc2VSZWdleCh4UmFuZ2UpLCAocmV0LCBndGx0LCBtYWpvciwgbWlub3IsIHBhdGNoLCBwcmVSZWxlYXNlKT0+e1xuICAgICAgICAgICAgY29uc3QgaXNYTWFqb3IgPSBpc1hWZXJzaW9uKG1ham9yKTtcbiAgICAgICAgICAgIGNvbnN0IGlzWE1pbm9yID0gaXNYTWFqb3IgfHwgaXNYVmVyc2lvbihtaW5vcik7XG4gICAgICAgICAgICBjb25zdCBpc1hQYXRjaCA9IGlzWE1pbm9yIHx8IGlzWFZlcnNpb24ocGF0Y2gpO1xuICAgICAgICAgICAgaWYgKGd0bHQgPT09ICc9JyAmJiBpc1hQYXRjaCkge1xuICAgICAgICAgICAgICAgIGd0bHQgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZVJlbGVhc2UgPSAnJztcbiAgICAgICAgICAgIGlmIChpc1hNYWpvcikge1xuICAgICAgICAgICAgICAgIGlmIChndGx0ID09PSAnPicgfHwgZ3RsdCA9PT0gJzwnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdGhpbmcgaXMgYWxsb3dlZFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzwwLjAuMC0wJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBub3RoaW5nIGlzIGZvcmJpZGRlblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyonO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ3RsdCAmJiBpc1hQYXRjaCkge1xuICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgWCB3aXRoIDBcbiAgICAgICAgICAgICAgICBpZiAoaXNYTWlub3IpIHtcbiAgICAgICAgICAgICAgICAgICAgbWlub3IgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXRjaCA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKGd0bHQgPT09ICc+Jykge1xuICAgICAgICAgICAgICAgICAgICAvLyA+MSA9PiA+PTIuMC4wXG4gICAgICAgICAgICAgICAgICAgIC8vID4xLjIgPT4gPj0xLjMuMFxuICAgICAgICAgICAgICAgICAgICBndGx0ID0gJz49JztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzWE1pbm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYWpvciA9IE51bWJlcihtYWpvcikgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWlub3IgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2ggPSAwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWlub3IgPSBOdW1iZXIobWlub3IpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZ3RsdCA9PT0gJzw9Jykge1xuICAgICAgICAgICAgICAgICAgICAvLyA8PTAuNy54IGlzIGFjdHVhbGx5IDwwLjguMCwgc2luY2UgYW55IDAuNy54IHNob3VsZCBwYXNzXG4gICAgICAgICAgICAgICAgICAgIC8vIFNpbWlsYXJseSwgPD03LnggaXMgYWN0dWFsbHkgPDguMC4wLCBldGMuXG4gICAgICAgICAgICAgICAgICAgIGd0bHQgPSAnPCc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1hNaW5vcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFqb3IgPSBOdW1iZXIobWFqb3IpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbm9yID0gTnVtYmVyKG1pbm9yKSArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGd0bHQgPT09ICc8Jykge1xuICAgICAgICAgICAgICAgICAgICBwcmVSZWxlYXNlID0gJy0wJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2d0bHQgKyBtYWpvcn0uJHttaW5vcn0uJHtwYXRjaH0ke3ByZVJlbGVhc2V9YDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNYTWlub3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYD49JHttYWpvcn0uMC4wJHtwcmVSZWxlYXNlfSA8JHtOdW1iZXIobWFqb3IpICsgMX0uMC4wLTBgO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1hQYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgPj0ke21ham9yfS4ke21pbm9yfS4wJHtwcmVSZWxlYXNlfSA8JHttYWpvcn0uJHtOdW1iZXIobWlub3IpICsgMX0uMC0wYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH0pKS5qb2luKCcgJyk7XG59XG5mdW5jdGlvbiBwYXJzZVN0YXIocmFuZ2UpIHtcbiAgICByZXR1cm4gcmFuZ2UudHJpbSgpLnJlcGxhY2UocGFyc2VSZWdleChzdGFyKSwgJycpO1xufVxuZnVuY3Rpb24gcGFyc2VHVEUwKGNvbXBhcmF0b3JTdHJpbmcpIHtcbiAgICByZXR1cm4gY29tcGFyYXRvclN0cmluZy50cmltKCkucmVwbGFjZShwYXJzZVJlZ2V4KGd0ZTApLCAnJyk7XG59XG5cbi8vIGZvcmsgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vb3JpZ2luanMvdml0ZS1wbHVnaW4tZmVkZXJhdGlvbi9ibG9iL3YxLjEuMTIvcGFja2FnZXMvbGliL3NyYy91dGlscy9zZW12ZXIvaW5kZXgudHNcbi8vIENvcHlyaWdodCAoYylcbi8vIHZpdGUtcGx1Z2luLWZlZGVyYXRpb24gaXMgbGljZW5zZWQgdW5kZXIgTXVsYW4gUFNMIHYyLlxuLy8gWW91IGNhbiB1c2UgdGhpcyBzb2Z0d2FyZSBhY2NvcmRpbmcgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHRoZSBNdWxhbiBQU0wgdjIuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgTXVsYW4gUFNMIHYyIGF0OlxuLy8gICAgICBodHRwOi8vbGljZW5zZS5jb3NjbC5vcmcuY24vTXVsYW5QU0wyXG4vLyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIE9OIEFOIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9GIEFOWSBLSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIE5PTi1JTkZSSU5HRU1FTlQsIE1FUkNIQU5UQUJJTElUWSBPUiBGSVQgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLlxuLy8gU2VlIHRoZSBNdWxhbiBQU0wgdjIgZm9yIG1vcmUgZGV0YWlscy5cbmZ1bmN0aW9uIGNvbXBhcmVBdG9tKHJhbmdlQXRvbSwgdmVyc2lvbkF0b20pIHtcbiAgICByYW5nZUF0b20gPSBOdW1iZXIocmFuZ2VBdG9tKSB8fCByYW5nZUF0b207XG4gICAgdmVyc2lvbkF0b20gPSBOdW1iZXIodmVyc2lvbkF0b20pIHx8IHZlcnNpb25BdG9tO1xuICAgIGlmIChyYW5nZUF0b20gPiB2ZXJzaW9uQXRvbSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKHJhbmdlQXRvbSA9PT0gdmVyc2lvbkF0b20pIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmVQcmVSZWxlYXNlKHJhbmdlQXRvbSwgdmVyc2lvbkF0b20pIHtcbiAgICBjb25zdCB7IHByZVJlbGVhc2U6IHJhbmdlUHJlUmVsZWFzZSB9ID0gcmFuZ2VBdG9tO1xuICAgIGNvbnN0IHsgcHJlUmVsZWFzZTogdmVyc2lvblByZVJlbGVhc2UgfSA9IHZlcnNpb25BdG9tO1xuICAgIGlmIChyYW5nZVByZVJlbGVhc2UgPT09IHVuZGVmaW5lZCAmJiBCb29sZWFuKHZlcnNpb25QcmVSZWxlYXNlKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKEJvb2xlYW4ocmFuZ2VQcmVSZWxlYXNlKSAmJiB2ZXJzaW9uUHJlUmVsZWFzZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKHJhbmdlUHJlUmVsZWFzZSA9PT0gdW5kZWZpbmVkICYmIHZlcnNpb25QcmVSZWxlYXNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGZvcihsZXQgaSA9IDAsIG4gPSByYW5nZVByZVJlbGVhc2UubGVuZ3RoOyBpIDw9IG47IGkrKyl7XG4gICAgICAgIGNvbnN0IHJhbmdlRWxlbWVudCA9IHJhbmdlUHJlUmVsZWFzZVtpXTtcbiAgICAgICAgY29uc3QgdmVyc2lvbkVsZW1lbnQgPSB2ZXJzaW9uUHJlUmVsZWFzZVtpXTtcbiAgICAgICAgaWYgKHJhbmdlRWxlbWVudCA9PT0gdmVyc2lvbkVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyYW5nZUVsZW1lbnQgPT09IHVuZGVmaW5lZCAmJiB2ZXJzaW9uRWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJhbmdlRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2ZXJzaW9uRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21wYXJlQXRvbShyYW5nZUVsZW1lbnQsIHZlcnNpb25FbGVtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBjb21wYXJlVmVyc2lvbihyYW5nZUF0b20sIHZlcnNpb25BdG9tKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVBdG9tKHJhbmdlQXRvbS5tYWpvciwgdmVyc2lvbkF0b20ubWFqb3IpIHx8IGNvbXBhcmVBdG9tKHJhbmdlQXRvbS5taW5vciwgdmVyc2lvbkF0b20ubWlub3IpIHx8IGNvbXBhcmVBdG9tKHJhbmdlQXRvbS5wYXRjaCwgdmVyc2lvbkF0b20ucGF0Y2gpIHx8IGNvbXBhcmVQcmVSZWxlYXNlKHJhbmdlQXRvbSwgdmVyc2lvbkF0b20pO1xufVxuZnVuY3Rpb24gZXEocmFuZ2VBdG9tLCB2ZXJzaW9uQXRvbSkge1xuICAgIHJldHVybiByYW5nZUF0b20udmVyc2lvbiA9PT0gdmVyc2lvbkF0b20udmVyc2lvbjtcbn1cbmZ1bmN0aW9uIGNvbXBhcmUocmFuZ2VBdG9tLCB2ZXJzaW9uQXRvbSkge1xuICAgIHN3aXRjaChyYW5nZUF0b20ub3BlcmF0b3Ipe1xuICAgICAgICBjYXNlICcnOlxuICAgICAgICBjYXNlICc9JzpcbiAgICAgICAgICAgIHJldHVybiBlcShyYW5nZUF0b20sIHZlcnNpb25BdG9tKTtcbiAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICByZXR1cm4gY29tcGFyZVZlcnNpb24ocmFuZ2VBdG9tLCB2ZXJzaW9uQXRvbSkgPCAwO1xuICAgICAgICBjYXNlICc+PSc6XG4gICAgICAgICAgICByZXR1cm4gZXEocmFuZ2VBdG9tLCB2ZXJzaW9uQXRvbSkgfHwgY29tcGFyZVZlcnNpb24ocmFuZ2VBdG9tLCB2ZXJzaW9uQXRvbSkgPCAwO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICAgIHJldHVybiBjb21wYXJlVmVyc2lvbihyYW5nZUF0b20sIHZlcnNpb25BdG9tKSA+IDA7XG4gICAgICAgIGNhc2UgJzw9JzpcbiAgICAgICAgICAgIHJldHVybiBlcShyYW5nZUF0b20sIHZlcnNpb25BdG9tKSB8fCBjb21wYXJlVmVyc2lvbihyYW5nZUF0b20sIHZlcnNpb25BdG9tKSA+IDA7XG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIG1lYW4gKiBvciB4IC0+IGFsbCB2ZXJzaW9uc1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuLy8gZm9yayBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9vcmlnaW5qcy92aXRlLXBsdWdpbi1mZWRlcmF0aW9uL2Jsb2IvdjEuMS4xMi9wYWNrYWdlcy9saWIvc3JjL3V0aWxzL3NlbXZlci9pbmRleC50c1xuLy8gQ29weXJpZ2h0IChjKVxuLy8gdml0ZS1wbHVnaW4tZmVkZXJhdGlvbiBpcyBsaWNlbnNlZCB1bmRlciBNdWxhbiBQU0wgdjIuXG4vLyBZb3UgY2FuIHVzZSB0aGlzIHNvZnR3YXJlIGFjY29yZGluZyB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhlIE11bGFuIFBTTCB2Mi5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiBNdWxhbiBQU0wgdjIgYXQ6XG4vLyAgICAgIGh0dHA6Ly9saWNlbnNlLmNvc2NsLm9yZy5jbi9NdWxhblBTTDJcbi8vIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgT04gQU4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT0YgQU5ZIEtJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gTk9OLUlORlJJTkdFTUVOVCwgTUVSQ0hBTlRBQklMSVRZIE9SIEZJVCBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuXG4vLyBTZWUgdGhlIE11bGFuIFBTTCB2MiBmb3IgbW9yZSBkZXRhaWxzLlxuZnVuY3Rpb24gcGFyc2VDb21wYXJhdG9yU3RyaW5nKHJhbmdlKSB7XG4gICAgcmV0dXJuIHBpcGUoLy8gaGFuZGxlIGNhcmV0XG4gICAgLy8gXiAtLT4gKiAoYW55LCBraW5kYSBzaWxseSlcbiAgICAvLyBeMiwgXjIueCwgXjIueC54IC0tPiA+PTIuMC4wIDwzLjAuMC0wXG4gICAgLy8gXjIuMCwgXjIuMC54IC0tPiA+PTIuMC4wIDwzLjAuMC0wXG4gICAgLy8gXjEuMiwgXjEuMi54IC0tPiA+PTEuMi4wIDwyLjAuMC0wXG4gICAgLy8gXjEuMi4zIC0tPiA+PTEuMi4zIDwyLjAuMC0wXG4gICAgLy8gXjEuMi4wIC0tPiA+PTEuMi4wIDwyLjAuMC0wXG4gICAgcGFyc2VDYXJldHMsIC8vIGhhbmRsZSB0aWxkZVxuICAgIC8vIH4sIH4+IC0tPiAqIChhbnksIGtpbmRhIHNpbGx5KVxuICAgIC8vIH4yLCB+Mi54LCB+Mi54LngsIH4+Miwgfj4yLnggfj4yLngueCAtLT4gPj0yLjAuMCA8My4wLjAtMFxuICAgIC8vIH4yLjAsIH4yLjAueCwgfj4yLjAsIH4+Mi4wLnggLS0+ID49Mi4wLjAgPDIuMS4wLTBcbiAgICAvLyB+MS4yLCB+MS4yLngsIH4+MS4yLCB+PjEuMi54IC0tPiA+PTEuMi4wIDwxLjMuMC0wXG4gICAgLy8gfjEuMi4zLCB+PjEuMi4zIC0tPiA+PTEuMi4zIDwxLjMuMC0wXG4gICAgLy8gfjEuMi4wLCB+PjEuMi4wIC0tPiA+PTEuMi4wIDwxLjMuMC0wXG4gICAgcGFyc2VUaWxkZXMsIHBhcnNlWFJhbmdlcywgcGFyc2VTdGFyKShyYW5nZSk7XG59XG5mdW5jdGlvbiBwYXJzZVJhbmdlKHJhbmdlKSB7XG4gICAgcmV0dXJuIHBpcGUoLy8gaGFuZGxlIGh5cGhlblJhbmdlXG4gICAgLy8gYDEuMi4zIC0gMS4yLjRgID0+IGA+PTEuMi4zIDw9MS4yLjRgXG4gICAgcGFyc2VIeXBoZW4sIC8vIGhhbmRsZSB0cmltIGNvbXBhcmF0b3JcbiAgICAvLyBgPiAxLjIuMyA8IDEuMi41YCA9PiBgPjEuMi4zIDwxLjIuNWBcbiAgICBwYXJzZUNvbXBhcmF0b3JUcmltLCAvLyBoYW5kbGUgdHJpbSB0aWxkZVxuICAgIC8vIGB+IDEuMi4zYCA9PiBgfjEuMi4zYFxuICAgIHBhcnNlVGlsZGVUcmltLCAvLyBoYW5kbGUgdHJpbSBjYXJldFxuICAgIC8vIGBeIDEuMi4zYCA9PiBgXjEuMi4zYFxuICAgIHBhcnNlQ2FyZXRUcmltKShyYW5nZS50cmltKCkpLnNwbGl0KC9cXHMrLykuam9pbignICcpO1xufVxuZnVuY3Rpb24gc2F0aXNmeSh2ZXJzaW9uLCByYW5nZSkge1xuICAgIGlmICghdmVyc2lvbikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHBhcnNlZFJhbmdlID0gcGFyc2VSYW5nZShyYW5nZSk7XG4gICAgY29uc3QgcGFyc2VkQ29tcGFyYXRvciA9IHBhcnNlZFJhbmdlLnNwbGl0KCcgJykubWFwKChyYW5nZVZlcnNpb24pPT5wYXJzZUNvbXBhcmF0b3JTdHJpbmcocmFuZ2VWZXJzaW9uKSkuam9pbignICcpO1xuICAgIGNvbnN0IGNvbXBhcmF0b3JzID0gcGFyc2VkQ29tcGFyYXRvci5zcGxpdCgvXFxzKy8pLm1hcCgoY29tcGFyYXRvcik9PnBhcnNlR1RFMChjb21wYXJhdG9yKSk7XG4gICAgY29uc3QgZXh0cmFjdGVkVmVyc2lvbiA9IGV4dHJhY3RDb21wYXJhdG9yKHZlcnNpb24pO1xuICAgIGlmICghZXh0cmFjdGVkVmVyc2lvbikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IFssIHZlcnNpb25PcGVyYXRvciwgLCB2ZXJzaW9uTWFqb3IsIHZlcnNpb25NaW5vciwgdmVyc2lvblBhdGNoLCB2ZXJzaW9uUHJlUmVsZWFzZV0gPSBleHRyYWN0ZWRWZXJzaW9uO1xuICAgIGNvbnN0IHZlcnNpb25BdG9tID0ge1xuICAgICAgICBvcGVyYXRvcjogdmVyc2lvbk9wZXJhdG9yLFxuICAgICAgICB2ZXJzaW9uOiBjb21iaW5lVmVyc2lvbih2ZXJzaW9uTWFqb3IsIHZlcnNpb25NaW5vciwgdmVyc2lvblBhdGNoLCB2ZXJzaW9uUHJlUmVsZWFzZSksXG4gICAgICAgIG1ham9yOiB2ZXJzaW9uTWFqb3IsXG4gICAgICAgIG1pbm9yOiB2ZXJzaW9uTWlub3IsXG4gICAgICAgIHBhdGNoOiB2ZXJzaW9uUGF0Y2gsXG4gICAgICAgIHByZVJlbGVhc2U6IHZlcnNpb25QcmVSZWxlYXNlID09IG51bGwgPyB2b2lkIDAgOiB2ZXJzaW9uUHJlUmVsZWFzZS5zcGxpdCgnLicpXG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IGNvbXBhcmF0b3Igb2YgY29tcGFyYXRvcnMpe1xuICAgICAgICBjb25zdCBleHRyYWN0ZWRDb21wYXJhdG9yID0gZXh0cmFjdENvbXBhcmF0b3IoY29tcGFyYXRvcik7XG4gICAgICAgIGlmICghZXh0cmFjdGVkQ29tcGFyYXRvcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFssIHJhbmdlT3BlcmF0b3IsICwgcmFuZ2VNYWpvciwgcmFuZ2VNaW5vciwgcmFuZ2VQYXRjaCwgcmFuZ2VQcmVSZWxlYXNlXSA9IGV4dHJhY3RlZENvbXBhcmF0b3I7XG4gICAgICAgIGNvbnN0IHJhbmdlQXRvbSA9IHtcbiAgICAgICAgICAgIG9wZXJhdG9yOiByYW5nZU9wZXJhdG9yLFxuICAgICAgICAgICAgdmVyc2lvbjogY29tYmluZVZlcnNpb24ocmFuZ2VNYWpvciwgcmFuZ2VNaW5vciwgcmFuZ2VQYXRjaCwgcmFuZ2VQcmVSZWxlYXNlKSxcbiAgICAgICAgICAgIG1ham9yOiByYW5nZU1ham9yLFxuICAgICAgICAgICAgbWlub3I6IHJhbmdlTWlub3IsXG4gICAgICAgICAgICBwYXRjaDogcmFuZ2VQYXRjaCxcbiAgICAgICAgICAgIHByZVJlbGVhc2U6IHJhbmdlUHJlUmVsZWFzZSA9PSBudWxsID8gdm9pZCAwIDogcmFuZ2VQcmVSZWxlYXNlLnNwbGl0KCcuJylcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFjb21wYXJlKHJhbmdlQXRvbSwgdmVyc2lvbkF0b20pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGVhcmx5IHJldHVyblxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTaGFyZShzaGFyZUFyZ3MsIGZyb20sIG5hbWUsIHNoYXJlU3RyYXRlZ3kpIHtcbiAgICBsZXQgZ2V0O1xuICAgIGlmICgnZ2V0JyBpbiBzaGFyZUFyZ3MpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIGdldCA9IHNoYXJlQXJncy5nZXQ7XG4gICAgfSBlbHNlIGlmICgnbGliJyBpbiBzaGFyZUFyZ3MpIHtcbiAgICAgICAgZ2V0ID0gKCk9PlByb21pc2UucmVzb2x2ZShzaGFyZUFyZ3MubGliKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBnZXQgPSAoKT0+UHJvbWlzZS5yZXNvbHZlKCgpPT57XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4gbm90IGdldCBzaGFyZWQgJyR7bmFtZX0nIWApO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzaGFyZUFyZ3Muc3RyYXRlZ3kpIHtcbiAgICAgICAgd2FybihgXCJzaGFyZWQuc3RyYXRlZ3kgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHNldCBpbiBpbml0T3B0aW9ucy5zaGFyZVN0cmF0ZWd5IGluc3RlYWQhXCJgKTtcbiAgICB9XG4gICAgdmFyIF9zaGFyZUFyZ3NfdmVyc2lvbiwgX3NoYXJlQXJnc19zY29wZSwgX3NoYXJlQXJnc19zdHJhdGVneTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBkZXBzOiBbXSxcbiAgICAgICAgdXNlSW46IFtdLFxuICAgICAgICBmcm9tLFxuICAgICAgICBsb2FkaW5nOiBudWxsXG4gICAgfSwgc2hhcmVBcmdzLCB7XG4gICAgICAgIHNoYXJlQ29uZmlnOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgICByZXF1aXJlZFZlcnNpb246IGBeJHtzaGFyZUFyZ3MudmVyc2lvbn1gLFxuICAgICAgICAgICAgc2luZ2xldG9uOiBmYWxzZSxcbiAgICAgICAgICAgIGVhZ2VyOiBmYWxzZSxcbiAgICAgICAgICAgIHN0cmljdFZlcnNpb246IGZhbHNlXG4gICAgICAgIH0sIHNoYXJlQXJncy5zaGFyZUNvbmZpZyksXG4gICAgICAgIGdldCxcbiAgICAgICAgbG9hZGVkOiAoc2hhcmVBcmdzID09IG51bGwgPyB2b2lkIDAgOiBzaGFyZUFyZ3MubG9hZGVkKSB8fCAnbGliJyBpbiBzaGFyZUFyZ3MgPyB0cnVlIDogdW5kZWZpbmVkLFxuICAgICAgICB2ZXJzaW9uOiAoX3NoYXJlQXJnc192ZXJzaW9uID0gc2hhcmVBcmdzLnZlcnNpb24pICE9IG51bGwgPyBfc2hhcmVBcmdzX3ZlcnNpb24gOiAnMCcsXG4gICAgICAgIHNjb3BlOiBBcnJheS5pc0FycmF5KHNoYXJlQXJncy5zY29wZSkgPyBzaGFyZUFyZ3Muc2NvcGUgOiBbXG4gICAgICAgICAgICAoX3NoYXJlQXJnc19zY29wZSA9IHNoYXJlQXJncy5zY29wZSkgIT0gbnVsbCA/IF9zaGFyZUFyZ3Nfc2NvcGUgOiAnZGVmYXVsdCdcbiAgICAgICAgXSxcbiAgICAgICAgc3RyYXRlZ3k6ICgoX3NoYXJlQXJnc19zdHJhdGVneSA9IHNoYXJlQXJncy5zdHJhdGVneSkgIT0gbnVsbCA/IF9zaGFyZUFyZ3Nfc3RyYXRlZ3kgOiBzaGFyZVN0cmF0ZWd5KSB8fCAndmVyc2lvbi1maXJzdCdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFNoYXJlQ29uZmlncyhnbG9iYWxPcHRpb25zLCB1c2VyT3B0aW9ucykge1xuICAgIGNvbnN0IHNoYXJlQXJncyA9IHVzZXJPcHRpb25zLnNoYXJlZCB8fCB7fTtcbiAgICBjb25zdCBmcm9tID0gdXNlck9wdGlvbnMubmFtZTtcbiAgICBjb25zdCBzaGFyZUluZm9zID0gT2JqZWN0LmtleXMoc2hhcmVBcmdzKS5yZWR1Y2UoKHJlcywgcGtnTmFtZSk9PntcbiAgICAgICAgY29uc3QgYXJyYXlTaGFyZUFyZ3MgPSBhcnJheU9wdGlvbnMoc2hhcmVBcmdzW3BrZ05hbWVdKTtcbiAgICAgICAgcmVzW3BrZ05hbWVdID0gcmVzW3BrZ05hbWVdIHx8IFtdO1xuICAgICAgICBhcnJheVNoYXJlQXJncy5mb3JFYWNoKChzaGFyZUNvbmZpZyk9PntcbiAgICAgICAgICAgIHJlc1twa2dOYW1lXS5wdXNoKGZvcm1hdFNoYXJlKHNoYXJlQ29uZmlnLCBmcm9tLCBwa2dOYW1lLCB1c2VyT3B0aW9ucy5zaGFyZVN0cmF0ZWd5KSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH0sIHt9KTtcbiAgICBjb25zdCBzaGFyZWQgPSBfZXh0ZW5kcyh7fSwgZ2xvYmFsT3B0aW9ucy5zaGFyZWQpO1xuICAgIE9iamVjdC5rZXlzKHNoYXJlSW5mb3MpLmZvckVhY2goKHNoYXJlS2V5KT0+e1xuICAgICAgICBpZiAoIXNoYXJlZFtzaGFyZUtleV0pIHtcbiAgICAgICAgICAgIHNoYXJlZFtzaGFyZUtleV0gPSBzaGFyZUluZm9zW3NoYXJlS2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNoYXJlSW5mb3Nbc2hhcmVLZXldLmZvckVhY2goKG5ld1VzZXJTaGFyZWRPcHRpb25zKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzU2FtZVZlcnNpb24gPSBzaGFyZWRbc2hhcmVLZXldLmZpbmQoKHNoYXJlZFZhbCk9PnNoYXJlZFZhbC52ZXJzaW9uID09PSBuZXdVc2VyU2hhcmVkT3B0aW9ucy52ZXJzaW9uKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzU2FtZVZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhcmVkW3NoYXJlS2V5XS5wdXNoKG5ld1VzZXJTaGFyZWRPcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNoYXJlZCxcbiAgICAgICAgc2hhcmVJbmZvc1xuICAgIH07XG59XG5mdW5jdGlvbiB2ZXJzaW9uTHQoYSwgYikge1xuICAgIGNvbnN0IHRyYW5zZm9ybUludmFsaWRWZXJzaW9uID0gKHZlcnNpb24pPT57XG4gICAgICAgIGNvbnN0IGlzTnVtYmVyVmVyc2lvbiA9ICFOdW1iZXIuaXNOYU4oTnVtYmVyKHZlcnNpb24pKTtcbiAgICAgICAgaWYgKGlzTnVtYmVyVmVyc2lvbikge1xuICAgICAgICAgICAgY29uc3Qgc3BsaXRBcnIgPSB2ZXJzaW9uLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBsZXQgdmFsaWRWZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCAzIC0gc3BsaXRBcnIubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIHZhbGlkVmVyc2lvbiArPSAnLjAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkVmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmVyc2lvbjtcbiAgICB9O1xuICAgIGlmIChzYXRpc2Z5KHRyYW5zZm9ybUludmFsaWRWZXJzaW9uKGEpLCBgPD0ke3RyYW5zZm9ybUludmFsaWRWZXJzaW9uKGIpfWApKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5jb25zdCBmaW5kVmVyc2lvbiA9IChzaGFyZVZlcnNpb25NYXAsIGNiKT0+e1xuICAgIGNvbnN0IGNhbGxiYWNrID0gY2IgfHwgZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgICAgIHJldHVybiB2ZXJzaW9uTHQocHJldiwgY3VyKTtcbiAgICB9O1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzaGFyZVZlcnNpb25NYXApLnJlZHVjZSgocHJldiwgY3VyKT0+e1xuICAgICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxiYWNrKHByZXYsIGN1cikpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGVmYXVsdCB2ZXJzaW9uIGlzICcwJyBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrL2Jsb2IvbWFpbi9saWIvc2hhcmluZy9Qcm92aWRlU2hhcmVkTW9kdWxlLmpzI0wxMzZcbiAgICAgICAgaWYgKHByZXYgPT09ICcwJykge1xuICAgICAgICAgICAgcmV0dXJuIGN1cjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJldjtcbiAgICB9LCAwKTtcbn07XG5jb25zdCBpc0xvYWRlZCA9IChzaGFyZWQpPT57XG4gICAgcmV0dXJuIEJvb2xlYW4oc2hhcmVkLmxvYWRlZCkgfHwgdHlwZW9mIHNoYXJlZC5saWIgPT09ICdmdW5jdGlvbic7XG59O1xuY29uc3QgaXNMb2FkaW5nID0gKHNoYXJlZCk9PntcbiAgICByZXR1cm4gQm9vbGVhbihzaGFyZWQubG9hZGluZyk7XG59O1xuZnVuY3Rpb24gZmluZFNpbmdsZXRvblZlcnNpb25PcmRlckJ5VmVyc2lvbihzaGFyZVNjb3BlTWFwLCBzY29wZSwgcGtnTmFtZSkge1xuICAgIGNvbnN0IHZlcnNpb25zID0gc2hhcmVTY29wZU1hcFtzY29wZV1bcGtnTmFtZV07XG4gICAgY29uc3QgY2FsbGJhY2sgPSBmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICAgICAgcmV0dXJuICFpc0xvYWRlZCh2ZXJzaW9uc1twcmV2XSkgJiYgdmVyc2lvbkx0KHByZXYsIGN1cik7XG4gICAgfTtcbiAgICByZXR1cm4gZmluZFZlcnNpb24oc2hhcmVTY29wZU1hcFtzY29wZV1bcGtnTmFtZV0sIGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGZpbmRTaW5nbGV0b25WZXJzaW9uT3JkZXJCeUxvYWRlZChzaGFyZVNjb3BlTWFwLCBzY29wZSwgcGtnTmFtZSkge1xuICAgIGNvbnN0IHZlcnNpb25zID0gc2hhcmVTY29wZU1hcFtzY29wZV1bcGtnTmFtZV07XG4gICAgY29uc3QgY2FsbGJhY2sgPSBmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICAgICAgY29uc3QgaXNMb2FkaW5nT3JMb2FkZWQgPSAoc2hhcmVkKT0+e1xuICAgICAgICAgICAgcmV0dXJuIGlzTG9hZGVkKHNoYXJlZCkgfHwgaXNMb2FkaW5nKHNoYXJlZCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChpc0xvYWRpbmdPckxvYWRlZCh2ZXJzaW9uc1tjdXJdKSkge1xuICAgICAgICAgICAgaWYgKGlzTG9hZGluZ09yTG9hZGVkKHZlcnNpb25zW3ByZXZdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBCb29sZWFuKHZlcnNpb25MdChwcmV2LCBjdXIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTG9hZGluZ09yTG9hZGVkKHZlcnNpb25zW3ByZXZdKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2ZXJzaW9uTHQocHJldiwgY3VyKTtcbiAgICB9O1xuICAgIHJldHVybiBmaW5kVmVyc2lvbihzaGFyZVNjb3BlTWFwW3Njb3BlXVtwa2dOYW1lXSwgY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gZ2V0RmluZFNoYXJlRnVuY3Rpb24oc3RyYXRlZ3kpIHtcbiAgICBpZiAoc3RyYXRlZ3kgPT09ICdsb2FkZWQtZmlyc3QnKSB7XG4gICAgICAgIHJldHVybiBmaW5kU2luZ2xldG9uVmVyc2lvbk9yZGVyQnlMb2FkZWQ7XG4gICAgfVxuICAgIHJldHVybiBmaW5kU2luZ2xldG9uVmVyc2lvbk9yZGVyQnlWZXJzaW9uO1xufVxuZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZFNoYXJlKGxvY2FsU2hhcmVTY29wZU1hcCwgcGtnTmFtZSwgc2hhcmVJbmZvLCByZXNvbHZlU2hhcmUpIHtcbiAgICBpZiAoIWxvY2FsU2hhcmVTY29wZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgc2hhcmVDb25maWcsIHNjb3BlID0gREVGQVVMVF9TQ09QRSwgc3RyYXRlZ3kgfSA9IHNoYXJlSW5mbztcbiAgICBjb25zdCBzY29wZXMgPSBBcnJheS5pc0FycmF5KHNjb3BlKSA/IHNjb3BlIDogW1xuICAgICAgICBzY29wZVxuICAgIF07XG4gICAgZm9yIChjb25zdCBzYyBvZiBzY29wZXMpe1xuICAgICAgICBpZiAoc2hhcmVDb25maWcgJiYgbG9jYWxTaGFyZVNjb3BlTWFwW3NjXSAmJiBsb2NhbFNoYXJlU2NvcGVNYXBbc2NdW3BrZ05hbWVdKSB7XG4gICAgICAgICAgICBjb25zdCB7IHJlcXVpcmVkVmVyc2lvbiB9ID0gc2hhcmVDb25maWc7XG4gICAgICAgICAgICBjb25zdCBmaW5kU2hhcmVGdW5jdGlvbiA9IGdldEZpbmRTaGFyZUZ1bmN0aW9uKHN0cmF0ZWd5KTtcbiAgICAgICAgICAgIGNvbnN0IG1heE9yU2luZ2xldG9uVmVyc2lvbiA9IGZpbmRTaGFyZUZ1bmN0aW9uKGxvY2FsU2hhcmVTY29wZU1hcCwgc2MsIHBrZ05hbWUpO1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0UmVzb2x2ZXIgPSAoKT0+e1xuICAgICAgICAgICAgICAgIGlmIChzaGFyZUNvbmZpZy5zaW5nbGV0b24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXF1aXJlZFZlcnNpb24gPT09ICdzdHJpbmcnICYmICFzYXRpc2Z5KG1heE9yU2luZ2xldG9uVmVyc2lvbiwgcmVxdWlyZWRWZXJzaW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnID0gYFZlcnNpb24gJHttYXhPclNpbmdsZXRvblZlcnNpb259IGZyb20gJHttYXhPclNpbmdsZXRvblZlcnNpb24gJiYgbG9jYWxTaGFyZVNjb3BlTWFwW3NjXVtwa2dOYW1lXVttYXhPclNpbmdsZXRvblZlcnNpb25dLmZyb219IG9mIHNoYXJlZCBzaW5nbGV0b24gbW9kdWxlICR7cGtnTmFtZX0gZG9lcyBub3Qgc2F0aXNmeSB0aGUgcmVxdWlyZW1lbnQgb2YgJHtzaGFyZUluZm8uZnJvbX0gd2hpY2ggbmVlZHMgJHtyZXF1aXJlZFZlcnNpb259KWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcmVDb25maWcuc3RyaWN0VmVyc2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKG1zZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxTaGFyZVNjb3BlTWFwW3NjXVtwa2dOYW1lXVttYXhPclNpbmdsZXRvblZlcnNpb25dO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXF1aXJlZFZlcnNpb24gPT09IGZhbHNlIHx8IHJlcXVpcmVkVmVyc2lvbiA9PT0gJyonKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxTaGFyZVNjb3BlTWFwW3NjXVtwa2dOYW1lXVttYXhPclNpbmdsZXRvblZlcnNpb25dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzYXRpc2Z5KG1heE9yU2luZ2xldG9uVmVyc2lvbiwgcmVxdWlyZWRWZXJzaW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsU2hhcmVTY29wZU1hcFtzY11bcGtnTmFtZV1bbWF4T3JTaW5nbGV0b25WZXJzaW9uXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFt2ZXJzaW9uS2V5LCB2ZXJzaW9uVmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGxvY2FsU2hhcmVTY29wZU1hcFtzY11bcGtnTmFtZV0pKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzYXRpc2Z5KHZlcnNpb25LZXksIHJlcXVpcmVkVmVyc2lvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmVyc2lvblZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBzaGFyZVNjb3BlTWFwOiBsb2NhbFNoYXJlU2NvcGVNYXAsXG4gICAgICAgICAgICAgICAgc2NvcGU6IHNjLFxuICAgICAgICAgICAgICAgIHBrZ05hbWUsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogbWF4T3JTaW5nbGV0b25WZXJzaW9uLFxuICAgICAgICAgICAgICAgIEdsb2JhbEZlZGVyYXRpb246IEdsb2JhbC5fX0ZFREVSQVRJT05fXyxcbiAgICAgICAgICAgICAgICByZXNvbHZlcjogZGVmYXVsdFJlc29sdmVyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZVNoYXJlZCA9IHJlc29sdmVTaGFyZS5lbWl0KHBhcmFtcykgfHwgcGFyYW1zO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVTaGFyZWQucmVzb2x2ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEdsb2JhbFNoYXJlU2NvcGUoKSB7XG4gICAgcmV0dXJuIEdsb2JhbC5fX0ZFREVSQVRJT05fXy5fX1NIQVJFX187XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRTaGFyZWRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IHBrZ05hbWUsIGV4dHJhT3B0aW9ucywgc2hhcmVJbmZvcyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBkZWZhdWx0UmVzb2x2ZXIgPSAoc2hhcmVkT3B0aW9ucyk9PntcbiAgICAgICAgaWYgKCFzaGFyZWRPcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNoYXJlVmVyc2lvbk1hcCA9IHt9O1xuICAgICAgICBzaGFyZWRPcHRpb25zLmZvckVhY2goKHNoYXJlZCk9PntcbiAgICAgICAgICAgIHNoYXJlVmVyc2lvbk1hcFtzaGFyZWQudmVyc2lvbl0gPSBzaGFyZWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjYWxsYmFjayA9IGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgICAgICAgICAgcmV0dXJuICFpc0xvYWRlZChzaGFyZVZlcnNpb25NYXBbcHJldl0pICYmIHZlcnNpb25MdChwcmV2LCBjdXIpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBtYXhWZXJzaW9uID0gZmluZFZlcnNpb24oc2hhcmVWZXJzaW9uTWFwLCBjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBzaGFyZVZlcnNpb25NYXBbbWF4VmVyc2lvbl07XG4gICAgfTtcbiAgICB2YXIgX2V4dHJhT3B0aW9uc19yZXNvbHZlcjtcbiAgICBjb25zdCByZXNvbHZlciA9IChfZXh0cmFPcHRpb25zX3Jlc29sdmVyID0gZXh0cmFPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBleHRyYU9wdGlvbnMucmVzb2x2ZXIpICE9IG51bGwgPyBfZXh0cmFPcHRpb25zX3Jlc29sdmVyIDogZGVmYXVsdFJlc29sdmVyO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZXNvbHZlcihzaGFyZUluZm9zW3BrZ05hbWVdKSwgZXh0cmFPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBleHRyYU9wdGlvbnMuY3VzdG9tU2hhcmVJbmZvKTtcbn1cblxuZXhwb3J0IHsgaXNQbGFpbk9iamVjdCBhcyBBLCBpc1JlbW90ZUluZm9XaXRoRW50cnkgYXMgQiwgaXNQdXJlUmVtb3RlRW50cnkgYXMgQywgREVGQVVMVF9SRU1PVEVfVFlQRSBhcyBELCBnZXRSZW1vdGVFbnRyeUluZm9Gcm9tU25hcHNob3QgYXMgRSwgYXJyYXlPcHRpb25zIGFzIEYsIEdsb2JhbCBhcyBHLCBmb3JtYXRTaGFyZUNvbmZpZ3MgYXMgSCwgZ2V0VGFyZ2V0U2hhcmVkT3B0aW9ucyBhcyBJLCBhZGRVbmlxdWVJdGVtIGFzIEosIEN1cnJlbnRHbG9iYWwgYXMgSywgbG9nZ2VyIGFzIEwsIGdldEJ1aWxkZXJJZCBhcyBNLCBnZXRHbG9iYWxTaGFyZVNjb3BlIGFzIGEsIGdldEdsb2JhbEZlZGVyYXRpb25JbnN0YW5jZSBhcyBiLCBnZXRHbG9iYWxGZWRlcmF0aW9uQ29uc3RydWN0b3IgYXMgYywgc2V0R2xvYmFsRmVkZXJhdGlvbkNvbnN0cnVjdG9yIGFzIGQsIGdldEluZm9XaXRob3V0VHlwZSBhcyBlLCBnZXRHbG9iYWxTbmFwc2hvdCBhcyBmLCBnZXRSZWdpc3RlcmVkU2hhcmUgYXMgZywgZ2V0VGFyZ2V0U25hcHNob3RJbmZvQnlNb2R1bGVJbmZvIGFzIGgsIGdldEdsb2JhbFNuYXBzaG90SW5mb0J5TW9kdWxlSW5mbyBhcyBpLCBzZXRHbG9iYWxTbmFwc2hvdEluZm9CeU1vZHVsZUluZm8gYXMgaiwgYWRkR2xvYmFsU25hcHNob3QgYXMgaywgZ2V0UmVtb3RlRW50cnlFeHBvcnRzIGFzIGwsIHJlZ2lzdGVyR2xvYmFsUGx1Z2lucyBhcyBtLCBuYXRpdmVHbG9iYWwgYXMgbiwgZ2V0R2xvYmFsSG9zdFBsdWdpbnMgYXMgbywgZ2V0UHJlbG9hZGVkIGFzIHAsIHNldFByZWxvYWRlZCBhcyBxLCByZXNldEZlZGVyYXRpb25HbG9iYWxJbmZvIGFzIHIsIHNldEdsb2JhbEZlZGVyYXRpb25JbnN0YW5jZSBhcyBzLCBnbG9iYWxMb2FkaW5nIGFzIHQsIERFRkFVTFRfU0NPUEUgYXMgdSwgYXNzZXJ0IGFzIHYsIGVycm9yIGFzIHcsIGdldEZNSWQgYXMgeCwgaXNPYmplY3QgYXMgeSwgd2FybiBhcyB6IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/share.esm.mjs\n");

/***/ }),

/***/ "../node_modules/.pnpm/@module-federation+sdk@0.7.3/node_modules/@module-federation/sdk/dist/index.esm.mjs":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+sdk@0.7.3/node_modules/@module-federation/sdk/dist/index.esm.mjs ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BROWSER_LOG_KEY: () => (/* binding */ BROWSER_LOG_KEY),\n/* harmony export */   BROWSER_LOG_VALUE: () => (/* binding */ BROWSER_LOG_VALUE),\n/* harmony export */   ENCODE_NAME_PREFIX: () => (/* binding */ ENCODE_NAME_PREFIX),\n/* harmony export */   EncodedNameTransformMap: () => (/* binding */ EncodedNameTransformMap),\n/* harmony export */   FederationModuleManifest: () => (/* binding */ FederationModuleManifest),\n/* harmony export */   MANIFEST_EXT: () => (/* binding */ MANIFEST_EXT),\n/* harmony export */   MFModuleType: () => (/* binding */ MFModuleType),\n/* harmony export */   MFPrefetchCommon: () => (/* binding */ MFPrefetchCommon),\n/* harmony export */   MODULE_DEVTOOL_IDENTIFIER: () => (/* binding */ MODULE_DEVTOOL_IDENTIFIER),\n/* harmony export */   ManifestFileName: () => (/* binding */ ManifestFileName),\n/* harmony export */   NameTransformMap: () => (/* binding */ NameTransformMap),\n/* harmony export */   NameTransformSymbol: () => (/* binding */ NameTransformSymbol),\n/* harmony export */   SEPARATOR: () => (/* binding */ SEPARATOR),\n/* harmony export */   StatsFileName: () => (/* binding */ StatsFileName),\n/* harmony export */   TEMP_DIR: () => (/* binding */ TEMP_DIR),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   composeKeyWithSeparator: () => (/* binding */ composeKeyWithSeparator),\n/* harmony export */   containerPlugin: () => (/* binding */ ContainerPlugin),\n/* harmony export */   containerReferencePlugin: () => (/* binding */ ContainerReferencePlugin),\n/* harmony export */   createLink: () => (/* binding */ createLink),\n/* harmony export */   createLogger: () => (/* binding */ createLogger),\n/* harmony export */   createScript: () => (/* binding */ createScript),\n/* harmony export */   createScriptNode: () => (/* binding */ createScriptNode),\n/* harmony export */   decodeName: () => (/* binding */ decodeName),\n/* harmony export */   encodeName: () => (/* binding */ encodeName),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   generateExposeFilename: () => (/* binding */ generateExposeFilename),\n/* harmony export */   generateShareFilename: () => (/* binding */ generateShareFilename),\n/* harmony export */   generateSnapshotFromManifest: () => (/* binding */ generateSnapshotFromManifest),\n/* harmony export */   getProcessEnv: () => (/* binding */ getProcessEnv),\n/* harmony export */   getResourceUrl: () => (/* binding */ getResourceUrl),\n/* harmony export */   inferAutoPublicPath: () => (/* binding */ inferAutoPublicPath),\n/* harmony export */   isBrowserEnv: () => (/* binding */ isBrowserEnv),\n/* harmony export */   isDebugMode: () => (/* binding */ isDebugMode),\n/* harmony export */   isManifestProvider: () => (/* binding */ isManifestProvider),\n/* harmony export */   isRequiredVersion: () => (/* binding */ isRequiredVersion),\n/* harmony export */   isStaticResourcesEqual: () => (/* binding */ isStaticResourcesEqual),\n/* harmony export */   loadScript: () => (/* binding */ loadScript),\n/* harmony export */   loadScriptNode: () => (/* binding */ loadScriptNode),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   moduleFederationPlugin: () => (/* binding */ ModuleFederationPlugin),\n/* harmony export */   normalizeOptions: () => (/* binding */ normalizeOptions),\n/* harmony export */   parseEntry: () => (/* binding */ parseEntry),\n/* harmony export */   safeToString: () => (/* binding */ safeToString),\n/* harmony export */   safeWrapper: () => (/* binding */ safeWrapper),\n/* harmony export */   sharePlugin: () => (/* binding */ SharePlugin),\n/* harmony export */   simpleJoinRemoteEntry: () => (/* binding */ simpleJoinRemoteEntry),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n/* harmony import */ var isomorphic_rslog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! isomorphic-rslog */ \"../node_modules/.pnpm/isomorphic-rslog@0.0.6/node_modules/isomorphic-rslog/dist/node/index.cjs\");\n/* harmony import */ var _polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./polyfills.esm.mjs */ \"../node_modules/.pnpm/@module-federation+sdk@0.7.3/node_modules/@module-federation/sdk/dist/polyfills.esm.mjs\");\n\n\n\nconst FederationModuleManifest = 'federation-manifest.json';\nconst MANIFEST_EXT = '.json';\nconst BROWSER_LOG_KEY = 'FEDERATION_DEBUG';\nconst BROWSER_LOG_VALUE = '1';\nconst NameTransformSymbol = {\n    AT: '@',\n    HYPHEN: '-',\n    SLASH: '/'\n};\nconst NameTransformMap = {\n    [NameTransformSymbol.AT]: 'scope_',\n    [NameTransformSymbol.HYPHEN]: '_',\n    [NameTransformSymbol.SLASH]: '__'\n};\nconst EncodedNameTransformMap = {\n    [NameTransformMap[NameTransformSymbol.AT]]: NameTransformSymbol.AT,\n    [NameTransformMap[NameTransformSymbol.HYPHEN]]: NameTransformSymbol.HYPHEN,\n    [NameTransformMap[NameTransformSymbol.SLASH]]: NameTransformSymbol.SLASH\n};\nconst SEPARATOR = ':';\nconst ManifestFileName = 'mf-manifest.json';\nconst StatsFileName = 'mf-stats.json';\nconst MFModuleType = {\n    NPM: 'npm',\n    APP: 'app'\n};\nconst MODULE_DEVTOOL_IDENTIFIER = '__MF_DEVTOOLS_MODULE_INFO__';\nconst ENCODE_NAME_PREFIX = 'ENCODE_NAME_PREFIX';\nconst TEMP_DIR = '.federation';\nconst MFPrefetchCommon = {\n    identifier: 'MFDataPrefetch',\n    globalKey: '__PREFETCH__',\n    library: 'mf-data-prefetch',\n    exportsKey: '__PREFETCH_EXPORTS__',\n    fileName: 'bootstrap.js'\n};\n\nvar ContainerPlugin = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\n\nvar ContainerReferencePlugin = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\n\nvar ModuleFederationPlugin = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\n\nvar SharePlugin = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\n\nfunction isBrowserEnv() {\n    return typeof window !== 'undefined';\n}\nfunction isBrowserDebug() {\n    try {\n        if (isBrowserEnv() && window.localStorage) {\n            return localStorage.getItem(BROWSER_LOG_KEY) === BROWSER_LOG_VALUE;\n        }\n    } catch (error) {\n        return false;\n    }\n    return false;\n}\nfunction isDebugMode() {\n    if (typeof process !== 'undefined' && process.env && process.env['FEDERATION_DEBUG']) {\n        return Boolean(process.env['FEDERATION_DEBUG']);\n    }\n    if (typeof FEDERATION_DEBUG !== 'undefined' && Boolean(FEDERATION_DEBUG)) {\n        return true;\n    }\n    return isBrowserDebug();\n}\nconst getProcessEnv = function() {\n    return typeof process !== 'undefined' && process.env ? process.env : {};\n};\n\nconst PREFIX = '[ Module Federation ]';\nfunction setDebug(loggerInstance) {\n    if (isDebugMode()) {\n        loggerInstance.level = 'verbose';\n    }\n}\nfunction setPrefix(loggerInstance, prefix) {\n    loggerInstance.labels = {\n        warn: `${prefix} Warn`,\n        error: `${prefix} Error`,\n        success: `${prefix} Success`,\n        info: `${prefix} Info`,\n        ready: `${prefix} Ready`,\n        debug: `${prefix} Debug`\n    };\n}\nfunction createLogger(prefix) {\n    const loggerInstance = (0,isomorphic_rslog__WEBPACK_IMPORTED_MODULE_0__.createLogger)({\n        labels: {\n            warn: `${PREFIX} Warn`,\n            error: `${PREFIX} Error`,\n            success: `${PREFIX} Success`,\n            info: `${PREFIX} Info`,\n            ready: `${PREFIX} Ready`,\n            debug: `${PREFIX} Debug`\n        }\n    });\n    setDebug(loggerInstance);\n    setPrefix(loggerInstance, prefix);\n    return loggerInstance;\n}\nconst logger = createLogger(PREFIX);\n\nconst LOG_CATEGORY = '[ Federation Runtime ]';\n// entry: name:version   version : 1.0.0 | ^1.2.3\n// entry: name:entry  entry:  https://localhost:9000/federation-manifest.json\nconst parseEntry = (str, devVerOrUrl, separator = SEPARATOR)=>{\n    const strSplit = str.split(separator);\n    const devVersionOrUrl = getProcessEnv()['NODE_ENV'] === 'development' && devVerOrUrl;\n    const defaultVersion = '*';\n    const isEntry = (s)=>s.startsWith('http') || s.includes(MANIFEST_EXT);\n    // Check if the string starts with a type\n    if (strSplit.length >= 2) {\n        let [name, ...versionOrEntryArr] = strSplit;\n        if (str.startsWith(separator)) {\n            versionOrEntryArr = [\n                devVersionOrUrl || strSplit.slice(-1)[0]\n            ];\n            name = strSplit.slice(0, -1).join(separator);\n        }\n        let versionOrEntry = devVersionOrUrl || versionOrEntryArr.join(separator);\n        if (isEntry(versionOrEntry)) {\n            return {\n                name,\n                entry: versionOrEntry\n            };\n        } else {\n            // Apply version rule\n            // devVersionOrUrl => inputVersion => defaultVersion\n            return {\n                name,\n                version: versionOrEntry || defaultVersion\n            };\n        }\n    } else if (strSplit.length === 1) {\n        const [name] = strSplit;\n        if (devVersionOrUrl && isEntry(devVersionOrUrl)) {\n            return {\n                name,\n                entry: devVersionOrUrl\n            };\n        }\n        return {\n            name,\n            version: devVersionOrUrl || defaultVersion\n        };\n    } else {\n        throw `Invalid entry value: ${str}`;\n    }\n};\nconst composeKeyWithSeparator = function(...args) {\n    if (!args.length) {\n        return '';\n    }\n    return args.reduce((sum, cur)=>{\n        if (!cur) {\n            return sum;\n        }\n        if (!sum) {\n            return cur;\n        }\n        return `${sum}${SEPARATOR}${cur}`;\n    }, '');\n};\nconst encodeName = function(name, prefix = '', withExt = false) {\n    try {\n        const ext = withExt ? '.js' : '';\n        return `${prefix}${name.replace(new RegExp(`${NameTransformSymbol.AT}`, 'g'), NameTransformMap[NameTransformSymbol.AT]).replace(new RegExp(`${NameTransformSymbol.HYPHEN}`, 'g'), NameTransformMap[NameTransformSymbol.HYPHEN]).replace(new RegExp(`${NameTransformSymbol.SLASH}`, 'g'), NameTransformMap[NameTransformSymbol.SLASH])}${ext}`;\n    } catch (err) {\n        throw err;\n    }\n};\nconst decodeName = function(name, prefix, withExt) {\n    try {\n        let decodedName = name;\n        if (prefix) {\n            if (!decodedName.startsWith(prefix)) {\n                return decodedName;\n            }\n            decodedName = decodedName.replace(new RegExp(prefix, 'g'), '');\n        }\n        decodedName = decodedName.replace(new RegExp(`${NameTransformMap[NameTransformSymbol.AT]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.AT]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.SLASH]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.SLASH]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.HYPHEN]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.HYPHEN]]);\n        if (withExt) {\n            decodedName = decodedName.replace('.js', '');\n        }\n        return decodedName;\n    } catch (err) {\n        throw err;\n    }\n};\nconst generateExposeFilename = (exposeName, withExt)=>{\n    if (!exposeName) {\n        return '';\n    }\n    let expose = exposeName;\n    if (expose === '.') {\n        expose = 'default_export';\n    }\n    if (expose.startsWith('./')) {\n        expose = expose.replace('./', '');\n    }\n    return encodeName(expose, '__federation_expose_', withExt);\n};\nconst generateShareFilename = (pkgName, withExt)=>{\n    if (!pkgName) {\n        return '';\n    }\n    return encodeName(pkgName, '__federation_shared_', withExt);\n};\nconst getResourceUrl = (module, sourceUrl)=>{\n    if ('getPublicPath' in module) {\n        let publicPath;\n        if (!module.getPublicPath.startsWith('function')) {\n            publicPath = new Function(module.getPublicPath)();\n        } else {\n            publicPath = new Function('return ' + module.getPublicPath)()();\n        }\n        return `${publicPath}${sourceUrl}`;\n    } else if ('publicPath' in module) {\n        return `${module.publicPath}${sourceUrl}`;\n    } else {\n        console.warn('Cannot get resource URL. If in debug mode, please ignore.', module, sourceUrl);\n        return '';\n    }\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst assert = (condition, msg)=>{\n    if (!condition) {\n        error(msg);\n    }\n};\nconst error = (msg)=>{\n    throw new Error(`${LOG_CATEGORY}: ${msg}`);\n};\nconst warn = (msg)=>{\n    console.warn(`${LOG_CATEGORY}: ${msg}`);\n};\nfunction safeToString(info) {\n    try {\n        return JSON.stringify(info, null, 2);\n    } catch (e) {\n        return '';\n    }\n}\n// RegExp for version string\nconst VERSION_PATTERN_REGEXP = /^([\\d^=v<>~]|[*xX]$)/;\nfunction isRequiredVersion(str) {\n    return VERSION_PATTERN_REGEXP.test(str);\n}\n\nconst simpleJoinRemoteEntry = (rPath, rName)=>{\n    if (!rPath) {\n        return rName;\n    }\n    const transformPath = (str)=>{\n        if (str === '.') {\n            return '';\n        }\n        if (str.startsWith('./')) {\n            return str.replace('./', '');\n        }\n        if (str.startsWith('/')) {\n            const strWithoutSlash = str.slice(1);\n            if (strWithoutSlash.endsWith('/')) {\n                return strWithoutSlash.slice(0, -1);\n            }\n            return strWithoutSlash;\n        }\n        return str;\n    };\n    const transformedPath = transformPath(rPath);\n    if (!transformedPath) {\n        return rName;\n    }\n    if (transformedPath.endsWith('/')) {\n        return `${transformedPath}${rName}`;\n    }\n    return `${transformedPath}/${rName}`;\n};\nfunction inferAutoPublicPath(url) {\n    return url.replace(/#.*$/, '').replace(/\\?.*$/, '').replace(/\\/[^\\/]+$/, '/');\n}\n// Priority: overrides > remotes\n// eslint-disable-next-line max-lines-per-function\nfunction generateSnapshotFromManifest(manifest, options = {}) {\n    var _manifest_metaData, _manifest_metaData1;\n    const { remotes = {}, overrides = {}, version } = options;\n    let remoteSnapshot;\n    const getPublicPath = ()=>{\n        if ('publicPath' in manifest.metaData) {\n            if (manifest.metaData.publicPath === 'auto' && version) {\n                // use same implementation as publicPath auto runtime module implements\n                return inferAutoPublicPath(version);\n            }\n            return manifest.metaData.publicPath;\n        } else {\n            return manifest.metaData.getPublicPath;\n        }\n    };\n    const overridesKeys = Object.keys(overrides);\n    let remotesInfo = {};\n    // If remotes are not provided, only the remotes in the manifest will be read\n    if (!Object.keys(remotes).length) {\n        var _manifest_remotes;\n        remotesInfo = ((_manifest_remotes = manifest.remotes) == null ? void 0 : _manifest_remotes.reduce((res, next)=>{\n            let matchedVersion;\n            const name = next.federationContainerName;\n            // overrides have higher priority\n            if (overridesKeys.includes(name)) {\n                matchedVersion = overrides[name];\n            } else {\n                if ('version' in next) {\n                    matchedVersion = next.version;\n                } else {\n                    matchedVersion = next.entry;\n                }\n            }\n            res[name] = {\n                matchedVersion\n            };\n            return res;\n        }, {})) || {};\n    }\n    // If remotes (deploy scenario) are specified, they need to be traversed again\n    Object.keys(remotes).forEach((key)=>remotesInfo[key] = {\n            // overrides will override dependencies\n            matchedVersion: overridesKeys.includes(key) ? overrides[key] : remotes[key]\n        });\n    const { remoteEntry: { path: remoteEntryPath, name: remoteEntryName, type: remoteEntryType }, types: remoteTypes, buildInfo: { buildVersion }, globalName, ssrRemoteEntry } = manifest.metaData;\n    const { exposes } = manifest;\n    let basicRemoteSnapshot = {\n        version: version ? version : '',\n        buildVersion,\n        globalName,\n        remoteEntry: simpleJoinRemoteEntry(remoteEntryPath, remoteEntryName),\n        remoteEntryType,\n        remoteTypes: simpleJoinRemoteEntry(remoteTypes.path, remoteTypes.name),\n        remoteTypesZip: remoteTypes.zip || '',\n        remoteTypesAPI: remoteTypes.api || '',\n        remotesInfo,\n        shared: manifest == null ? void 0 : manifest.shared.map((item)=>({\n                assets: item.assets,\n                sharedName: item.name,\n                version: item.version\n            })),\n        modules: exposes == null ? void 0 : exposes.map((expose)=>({\n                moduleName: expose.name,\n                modulePath: expose.path,\n                assets: expose.assets\n            }))\n    };\n    if ((_manifest_metaData = manifest.metaData) == null ? void 0 : _manifest_metaData.prefetchInterface) {\n        const prefetchInterface = manifest.metaData.prefetchInterface;\n        basicRemoteSnapshot = (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_1__._)({}, basicRemoteSnapshot, {\n            prefetchInterface\n        });\n    }\n    if ((_manifest_metaData1 = manifest.metaData) == null ? void 0 : _manifest_metaData1.prefetchEntry) {\n        const { path, name, type } = manifest.metaData.prefetchEntry;\n        basicRemoteSnapshot = (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_1__._)({}, basicRemoteSnapshot, {\n            prefetchEntry: simpleJoinRemoteEntry(path, name),\n            prefetchEntryType: type\n        });\n    }\n    if ('publicPath' in manifest.metaData) {\n        remoteSnapshot = (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_1__._)({}, basicRemoteSnapshot, {\n            publicPath: getPublicPath()\n        });\n    } else {\n        remoteSnapshot = (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_1__._)({}, basicRemoteSnapshot, {\n            getPublicPath: getPublicPath()\n        });\n    }\n    if (ssrRemoteEntry) {\n        const fullSSRRemoteEntry = simpleJoinRemoteEntry(ssrRemoteEntry.path, ssrRemoteEntry.name);\n        remoteSnapshot.ssrRemoteEntry = fullSSRRemoteEntry;\n        remoteSnapshot.ssrRemoteEntryType = ssrRemoteEntry.type || 'commonjs-module';\n    }\n    return remoteSnapshot;\n}\nfunction isManifestProvider(moduleInfo) {\n    if ('remoteEntry' in moduleInfo && moduleInfo.remoteEntry.includes(MANIFEST_EXT)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function safeWrapper(callback, disableWarn) {\n    try {\n        const res = await callback();\n        return res;\n    } catch (e) {\n        !disableWarn && warn(e);\n        return;\n    }\n}\nfunction isStaticResourcesEqual(url1, url2) {\n    const REG_EXP = /^(https?:)?\\/\\//i;\n    // Transform url1 and url2 into relative paths\n    const relativeUrl1 = url1.replace(REG_EXP, '').replace(/\\/$/, '');\n    const relativeUrl2 = url2.replace(REG_EXP, '').replace(/\\/$/, '');\n    // Check if the relative paths are identical\n    return relativeUrl1 === relativeUrl2;\n}\nfunction createScript(info) {\n    // Retrieve the existing script element by its src attribute\n    let script = null;\n    let needAttach = true;\n    let timeout = 20000;\n    let timeoutId;\n    const scripts = document.getElementsByTagName('script');\n    for(let i = 0; i < scripts.length; i++){\n        const s = scripts[i];\n        const scriptSrc = s.getAttribute('src');\n        if (scriptSrc && isStaticResourcesEqual(scriptSrc, info.url)) {\n            script = s;\n            needAttach = false;\n            break;\n        }\n    }\n    if (!script) {\n        const attrs = info.attrs;\n        script = document.createElement('script');\n        script.type = (attrs == null ? void 0 : attrs['type']) === 'module' ? 'module' : 'text/javascript';\n        let createScriptRes = undefined;\n        if (info.createScriptHook) {\n            createScriptRes = info.createScriptHook(info.url, info.attrs);\n            if (createScriptRes instanceof HTMLScriptElement) {\n                script = createScriptRes;\n            } else if (typeof createScriptRes === 'object') {\n                if ('script' in createScriptRes && createScriptRes.script) {\n                    script = createScriptRes.script;\n                }\n                if ('timeout' in createScriptRes && createScriptRes.timeout) {\n                    timeout = createScriptRes.timeout;\n                }\n            }\n        }\n        if (!script.src) {\n            script.src = info.url;\n        }\n        if (attrs && !createScriptRes) {\n            Object.keys(attrs).forEach((name)=>{\n                if (script) {\n                    if (name === 'async' || name === 'defer') {\n                        script[name] = attrs[name];\n                    // Attributes that do not exist are considered overridden\n                    } else if (!script.getAttribute(name)) {\n                        script.setAttribute(name, attrs[name]);\n                    }\n                }\n            });\n        }\n    }\n    const onScriptComplete = async (prev, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    event)=>{\n        var _info_cb;\n        clearTimeout(timeoutId);\n        // Prevent memory leaks in IE.\n        if (script) {\n            script.onerror = null;\n            script.onload = null;\n            safeWrapper(()=>{\n                const { needDeleteScript = true } = info;\n                if (needDeleteScript) {\n                    (script == null ? void 0 : script.parentNode) && script.parentNode.removeChild(script);\n                }\n            });\n            if (prev && typeof prev === 'function') {\n                var _info_cb1;\n                const result = prev(event);\n                if (result instanceof Promise) {\n                    var _info_cb2;\n                    const res = await result;\n                    info == null ? void 0 : (_info_cb2 = info.cb) == null ? void 0 : _info_cb2.call(info);\n                    return res;\n                }\n                info == null ? void 0 : (_info_cb1 = info.cb) == null ? void 0 : _info_cb1.call(info);\n                return result;\n            }\n        }\n        info == null ? void 0 : (_info_cb = info.cb) == null ? void 0 : _info_cb.call(info);\n    };\n    script.onerror = onScriptComplete.bind(null, script.onerror);\n    script.onload = onScriptComplete.bind(null, script.onload);\n    timeoutId = setTimeout(()=>{\n        onScriptComplete(null, new Error(`Remote script \"${info.url}\" time-outed.`));\n    }, timeout);\n    return {\n        script,\n        needAttach\n    };\n}\nfunction createLink(info) {\n    // <link rel=\"preload\" href=\"script.js\" as=\"script\">\n    // Retrieve the existing script element by its src attribute\n    let link = null;\n    let needAttach = true;\n    const links = document.getElementsByTagName('link');\n    for(let i = 0; i < links.length; i++){\n        const l = links[i];\n        const linkHref = l.getAttribute('href');\n        const linkRef = l.getAttribute('ref');\n        if (linkHref && isStaticResourcesEqual(linkHref, info.url) && linkRef === info.attrs['ref']) {\n            link = l;\n            needAttach = false;\n            break;\n        }\n    }\n    if (!link) {\n        link = document.createElement('link');\n        link.setAttribute('href', info.url);\n        let createLinkRes = undefined;\n        const attrs = info.attrs;\n        if (info.createLinkHook) {\n            createLinkRes = info.createLinkHook(info.url, attrs);\n            if (createLinkRes instanceof HTMLLinkElement) {\n                link = createLinkRes;\n            }\n        }\n        if (attrs && !createLinkRes) {\n            Object.keys(attrs).forEach((name)=>{\n                if (link && !link.getAttribute(name)) {\n                    link.setAttribute(name, attrs[name]);\n                }\n            });\n        }\n    }\n    const onLinkComplete = (prev, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    event)=>{\n        // Prevent memory leaks in IE.\n        if (link) {\n            link.onerror = null;\n            link.onload = null;\n            safeWrapper(()=>{\n                const { needDeleteLink = true } = info;\n                if (needDeleteLink) {\n                    (link == null ? void 0 : link.parentNode) && link.parentNode.removeChild(link);\n                }\n            });\n            if (prev) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const res = prev(event);\n                info.cb();\n                return res;\n            }\n        }\n        info.cb();\n    };\n    link.onerror = onLinkComplete.bind(null, link.onerror);\n    link.onload = onLinkComplete.bind(null, link.onload);\n    return {\n        link,\n        needAttach\n    };\n}\nfunction loadScript(url, info) {\n    const { attrs = {}, createScriptHook } = info;\n    return new Promise((resolve, _reject)=>{\n        const { script, needAttach } = createScript({\n            url,\n            cb: resolve,\n            attrs: (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_1__._)({\n                fetchpriority: 'high'\n            }, attrs),\n            createScriptHook,\n            needDeleteScript: true\n        });\n        needAttach && document.head.appendChild(script);\n    });\n}\n\nfunction importNodeModule(name) {\n    if (!name) {\n        throw new Error('import specifier is required');\n    }\n    const importModule = new Function('name', `return import(name)`);\n    return importModule(name).then((res)=>res).catch((error)=>{\n        console.error(`Error importing module ${name}:`, error);\n        throw error;\n    });\n}\nconst loadNodeFetch = async ()=>{\n    const fetchModule = await importNodeModule('node-fetch');\n    return fetchModule.default || fetchModule;\n};\nconst lazyLoaderHookFetch = async (input, init, loaderHook)=>{\n    const hook = (url, init)=>{\n        return loaderHook.lifecycle.fetch.emit(url, init);\n    };\n    const res = await hook(input, init || {});\n    if (!res || !(res instanceof Response)) {\n        const fetchFunction = typeof fetch === 'undefined' ? await loadNodeFetch() : fetch;\n        return fetchFunction(input, init || {});\n    }\n    return res;\n};\nfunction createScriptNode(url, cb, attrs, loaderHook) {\n    if (loaderHook == null ? void 0 : loaderHook.createScriptHook) {\n        const hookResult = loaderHook.createScriptHook(url);\n        if (hookResult && typeof hookResult === 'object' && 'url' in hookResult) {\n            url = hookResult.url;\n        }\n    }\n    let urlObj;\n    try {\n        urlObj = new URL(url);\n    } catch (e) {\n        console.error('Error constructing URL:', e);\n        cb(new Error(`Invalid URL: ${e}`));\n        return;\n    }\n    const getFetch = async ()=>{\n        if (loaderHook == null ? void 0 : loaderHook.fetch) {\n            return (input, init)=>lazyLoaderHookFetch(input, init, loaderHook);\n        }\n        return typeof fetch === 'undefined' ? loadNodeFetch() : fetch;\n    };\n    const handleScriptFetch = async (f, urlObj)=>{\n        try {\n            var //@ts-ignore\n            _vm_constants;\n            const res = await f(urlObj.href);\n            const data = await res.text();\n            const [path, vm] = await Promise.all([\n                importNodeModule('path'),\n                importNodeModule('vm')\n            ]);\n            const scriptContext = {\n                exports: {},\n                module: {\n                    exports: {}\n                }\n            };\n            const urlDirname = urlObj.pathname.split('/').slice(0, -1).join('/');\n            const filename = path.basename(urlObj.pathname);\n            var _vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER;\n            const script = new vm.Script(`(function(exports, module, require, __dirname, __filename) {${data}\\n})`, {\n                filename,\n                importModuleDynamically: (_vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER = (_vm_constants = vm.constants) == null ? void 0 : _vm_constants.USE_MAIN_CONTEXT_DEFAULT_LOADER) != null ? _vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER : importNodeModule\n            });\n            script.runInThisContext()(scriptContext.exports, scriptContext.module, eval('require'), urlDirname, filename);\n            const exportedInterface = scriptContext.module.exports || scriptContext.exports;\n            if (attrs && exportedInterface && attrs['globalName']) {\n                const container = exportedInterface[attrs['globalName']] || exportedInterface;\n                cb(undefined, container);\n                return;\n            }\n            cb(undefined, exportedInterface);\n        } catch (e) {\n            cb(e instanceof Error ? e : new Error(`Script execution error: ${e}`));\n        }\n    };\n    getFetch().then(async (f)=>{\n        if ((attrs == null ? void 0 : attrs['type']) === 'esm' || (attrs == null ? void 0 : attrs['type']) === 'module') {\n            return loadModule(urlObj.href, {\n                fetch: f,\n                vm: await importNodeModule('vm')\n            }).then(async (module)=>{\n                await module.evaluate();\n                cb(undefined, module.namespace);\n            }).catch((e)=>{\n                cb(e instanceof Error ? e : new Error(`Script execution error: ${e}`));\n            });\n        }\n        handleScriptFetch(f, urlObj);\n    }).catch((err)=>{\n        cb(err);\n    });\n}\nfunction loadScriptNode(url, info) {\n    return new Promise((resolve, reject)=>{\n        createScriptNode(url, (error, scriptContext)=>{\n            if (error) {\n                reject(error);\n            } else {\n                var _info_attrs, _info_attrs1;\n                const remoteEntryKey = (info == null ? void 0 : (_info_attrs = info.attrs) == null ? void 0 : _info_attrs['globalName']) || `__FEDERATION_${info == null ? void 0 : (_info_attrs1 = info.attrs) == null ? void 0 : _info_attrs1['name']}:custom__`;\n                const entryExports = globalThis[remoteEntryKey] = scriptContext;\n                resolve(entryExports);\n            }\n        }, info.attrs, info.loaderHook);\n    });\n}\nasync function loadModule(url, options) {\n    const { fetch: fetch1, vm } = options;\n    const response = await fetch1(url);\n    const code = await response.text();\n    const module = new vm.SourceTextModule(code, {\n        // @ts-ignore\n        importModuleDynamically: async (specifier, script)=>{\n            const resolvedUrl = new URL(specifier, url).href;\n            return loadModule(resolvedUrl, options);\n        }\n    });\n    await module.link(async (specifier)=>{\n        const resolvedUrl = new URL(specifier, url).href;\n        const module = await loadModule(resolvedUrl, options);\n        return module;\n    });\n    return module;\n}\n\nfunction normalizeOptions(enableDefault, defaultOptions, key) {\n    return function(options) {\n        if (options === false) {\n            return false;\n        }\n        if (typeof options === 'undefined') {\n            if (enableDefault) {\n                return defaultOptions;\n            } else {\n                return false;\n            }\n        }\n        if (options === true) {\n            return defaultOptions;\n        }\n        if (options && typeof options === 'object') {\n            return (0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_1__._)({}, defaultOptions, options);\n        }\n        throw new Error(`Unexpected type for \\`${key}\\`, expect boolean/undefined/object, got: ${typeof options}`);\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+sdk@0.7.3/node_modules/@module-federation/sdk/dist/index.esm.mjs\n");

/***/ }),

/***/ "../node_modules/.pnpm/@module-federation+sdk@0.7.3/node_modules/@module-federation/sdk/dist/polyfills.esm.mjs":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+sdk@0.7.3/node_modules/@module-federation/sdk/dist/polyfills.esm.mjs ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _extends)\n/* harmony export */ });\nfunction _extends() {\n    _extends = Object.assign || function assign(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Btb2R1bGUtZmVkZXJhdGlvbitzZGtAMC43LjMvbm9kZV9tb2R1bGVzL0Btb2R1bGUtZmVkZXJhdGlvbi9zZGsvZGlzdC9wb2x5ZmlsbHMuZXNtLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9tZS8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG1vZHVsZS1mZWRlcmF0aW9uK3Nka0AwLjcuMy9ub2RlX21vZHVsZXMvQG1vZHVsZS1mZWRlcmF0aW9uL3Nkay9kaXN0L3BvbHlmaWxscy5lc20ubWpzPzFkZWYiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gICAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHtcbiAgICAgICAgZm9yKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gc291cmNlKWlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IHsgX2V4dGVuZHMgYXMgXyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+sdk@0.7.3/node_modules/@module-federation/sdk/dist/polyfills.esm.mjs\n");

/***/ }),

/***/ "../node_modules/.pnpm/@module-federation+webpack-bundler-runtime@0.7.3/node_modules/@module-federation/webpack-bundler-runtime/dist/constant.esm.mjs":
/*!************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+webpack-bundler-runtime@0.7.3/node_modules/@module-federation/webpack-bundler-runtime/dist/constant.esm.mjs ***!
  \************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ENCODE_NAME_PREFIX: () => (/* reexport safe */ _module_federation_sdk__WEBPACK_IMPORTED_MODULE_0__.ENCODE_NAME_PREFIX),\n/* harmony export */   FEDERATION_SUPPORTED_TYPES: () => (/* binding */ FEDERATION_SUPPORTED_TYPES)\n/* harmony export */ });\n/* harmony import */ var _module_federation_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @module-federation/sdk */ \"../node_modules/.pnpm/@module-federation+sdk@0.7.3/node_modules/@module-federation/sdk/dist/index.esm.mjs\");\n\n\nconst FEDERATION_SUPPORTED_TYPES = [\n    'script'\n];\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Btb2R1bGUtZmVkZXJhdGlvbit3ZWJwYWNrLWJ1bmRsZXItcnVudGltZUAwLjcuMy9ub2RlX21vZHVsZXMvQG1vZHVsZS1mZWRlcmF0aW9uL3dlYnBhY2stYnVuZGxlci1ydW50aW1lL2Rpc3QvY29uc3RhbnQuZXNtLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEQ7O0FBRTVEO0FBQ0E7QUFDQTs7QUFFc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob21lLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AbW9kdWxlLWZlZGVyYXRpb24rd2VicGFjay1idW5kbGVyLXJ1bnRpbWVAMC43LjMvbm9kZV9tb2R1bGVzL0Btb2R1bGUtZmVkZXJhdGlvbi93ZWJwYWNrLWJ1bmRsZXItcnVudGltZS9kaXN0L2NvbnN0YW50LmVzbS5tanM/ZjQ3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBFTkNPREVfTkFNRV9QUkVGSVggfSBmcm9tICdAbW9kdWxlLWZlZGVyYXRpb24vc2RrJztcblxuY29uc3QgRkVERVJBVElPTl9TVVBQT1JURURfVFlQRVMgPSBbXG4gICAgJ3NjcmlwdCdcbl07XG5cbmV4cG9ydCB7IEZFREVSQVRJT05fU1VQUE9SVEVEX1RZUEVTIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+webpack-bundler-runtime@0.7.3/node_modules/@module-federation/webpack-bundler-runtime/dist/constant.esm.mjs\n");

/***/ }),

/***/ "../node_modules/.pnpm/@module-federation+webpack-bundler-runtime@0.7.3/node_modules/@module-federation/webpack-bundler-runtime/dist/index.esm.mjs":
/*!*********************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+webpack-bundler-runtime@0.7.3/node_modules/@module-federation/webpack-bundler-runtime/dist/index.esm.mjs ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ federation)\n/* harmony export */ });\n/* harmony import */ var _module_federation_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @module-federation/runtime */ \"../node_modules/.pnpm/@module-federation+runtime@0.7.3/node_modules/@module-federation/runtime/dist/index.esm.mjs\");\n/* harmony import */ var _constant_esm_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constant.esm.mjs */ \"../node_modules/.pnpm/@module-federation+webpack-bundler-runtime@0.7.3/node_modules/@module-federation/webpack-bundler-runtime/dist/constant.esm.mjs\");\n/* harmony import */ var _module_federation_sdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @module-federation/sdk */ \"../node_modules/.pnpm/@module-federation+sdk@0.7.3/node_modules/@module-federation/sdk/dist/index.esm.mjs\");\n/* harmony import */ var _polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polyfills.esm.mjs */ \"../node_modules/.pnpm/@module-federation+webpack-bundler-runtime@0.7.3/node_modules/@module-federation/webpack-bundler-runtime/dist/polyfills.esm.mjs\");\n\n\n\n\n\nfunction attachShareScopeMap(webpackRequire) {\n    if (!webpackRequire.S || webpackRequire.federation.hasAttachShareScopeMap || !webpackRequire.federation.instance || !webpackRequire.federation.instance.shareScopeMap) {\n        return;\n    }\n    webpackRequire.S = webpackRequire.federation.instance.shareScopeMap;\n    webpackRequire.federation.hasAttachShareScopeMap = true;\n}\n\nfunction remotes(options) {\n    const { chunkId, promises, chunkMapping, idToExternalAndNameMapping, webpackRequire, idToRemoteMap } = options;\n    attachShareScopeMap(webpackRequire);\n    if (webpackRequire.o(chunkMapping, chunkId)) {\n        chunkMapping[chunkId].forEach((id)=>{\n            let getScope = webpackRequire.R;\n            if (!getScope) {\n                getScope = [];\n            }\n            const data = idToExternalAndNameMapping[id];\n            const remoteInfos = idToRemoteMap[id];\n            // @ts-ignore seems not work\n            if (getScope.indexOf(data) >= 0) {\n                return;\n            }\n            // @ts-ignore seems not work\n            getScope.push(data);\n            if (data.p) {\n                return promises.push(data.p);\n            }\n            const onError = (error)=>{\n                if (!error) {\n                    error = new Error('Container missing');\n                }\n                if (typeof error.message === 'string') {\n                    error.message += `\\nwhile loading \"${data[1]}\" from ${data[2]}`;\n                }\n                webpackRequire.m[id] = ()=>{\n                    throw error;\n                };\n                data.p = 0;\n            };\n            const handleFunction = (fn, arg1, arg2, d, next, first)=>{\n                try {\n                    const promise = fn(arg1, arg2);\n                    if (promise && promise.then) {\n                        const p = promise.then((result)=>next(result, d), onError);\n                        if (first) {\n                            promises.push(data.p = p);\n                        } else {\n                            return p;\n                        }\n                    } else {\n                        return next(promise, d, first);\n                    }\n                } catch (error) {\n                    onError(error);\n                }\n            };\n            const onExternal = (external, _, first)=>external ? handleFunction(webpackRequire.I, data[0], 0, external, onInitialized, first) : onError();\n            // eslint-disable-next-line no-var\n            var onInitialized = (_, external, first)=>handleFunction(external.get, data[1], getScope, 0, onFactory, first);\n            // eslint-disable-next-line no-var\n            var onFactory = (factory)=>{\n                data.p = 1;\n                webpackRequire.m[id] = (module)=>{\n                    module.exports = factory();\n                };\n            };\n            const onRemoteLoaded = ()=>{\n                try {\n                    const remoteName = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_3__.decodeName)(remoteInfos[0].name, _module_federation_sdk__WEBPACK_IMPORTED_MODULE_3__.ENCODE_NAME_PREFIX);\n                    const remoteModuleName = remoteName + data[1].slice(1);\n                    const instance = webpackRequire.federation.instance;\n                    const loadRemote = ()=>webpackRequire.federation.instance.loadRemote(remoteModuleName, {\n                            loadFactory: false,\n                            from: 'build'\n                        });\n                    if (instance.options.shareStrategy === 'version-first') {\n                        return Promise.all(instance.sharedHandler.initializeSharing(data[0])).then(()=>{\n                            return loadRemote();\n                        });\n                    }\n                    return loadRemote();\n                } catch (error) {\n                    onError(error);\n                }\n            };\n            const useRuntimeLoad = remoteInfos.length === 1 && _constant_esm_mjs__WEBPACK_IMPORTED_MODULE_1__.FEDERATION_SUPPORTED_TYPES.includes(remoteInfos[0].externalType) && remoteInfos[0].name;\n            if (useRuntimeLoad) {\n                handleFunction(onRemoteLoaded, data[2], 0, 0, onFactory, 1);\n            } else {\n                handleFunction(webpackRequire, data[2], 0, 0, onExternal, 1);\n            }\n        });\n    }\n}\n\nfunction consumes(options) {\n    const { chunkId, promises, chunkMapping, installedModules, moduleToHandlerMapping, webpackRequire } = options;\n    attachShareScopeMap(webpackRequire);\n    if (webpackRequire.o(chunkMapping, chunkId)) {\n        chunkMapping[chunkId].forEach((id)=>{\n            if (webpackRequire.o(installedModules, id)) {\n                return promises.push(installedModules[id]);\n            }\n            const onFactory = (factory)=>{\n                installedModules[id] = 0;\n                webpackRequire.m[id] = (module)=>{\n                    delete webpackRequire.c[id];\n                    module.exports = factory();\n                };\n            };\n            const onError = (error)=>{\n                delete installedModules[id];\n                webpackRequire.m[id] = (module)=>{\n                    delete webpackRequire.c[id];\n                    throw error;\n                };\n            };\n            try {\n                const federationInstance = webpackRequire.federation.instance;\n                if (!federationInstance) {\n                    throw new Error('Federation instance not found!');\n                }\n                const { shareKey, getter, shareInfo } = moduleToHandlerMapping[id];\n                const promise = federationInstance.loadShare(shareKey, {\n                    customShareInfo: shareInfo\n                }).then((factory)=>{\n                    if (factory === false) {\n                        return getter();\n                    }\n                    return factory;\n                });\n                if (promise.then) {\n                    promises.push(installedModules[id] = promise.then(onFactory).catch(onError));\n                } else {\n                    // @ts-ignore maintain previous logic\n                    onFactory(promise);\n                }\n            } catch (e) {\n                onError(e);\n            }\n        });\n    }\n}\n\nfunction initializeSharing({ shareScopeName, webpackRequire, initPromises, initTokens, initScope }) {\n    if (!initScope) initScope = [];\n    const mfInstance = webpackRequire.federation.instance;\n    // handling circular init calls\n    var initToken = initTokens[shareScopeName];\n    if (!initToken) initToken = initTokens[shareScopeName] = {\n        from: mfInstance.name\n    };\n    if (initScope.indexOf(initToken) >= 0) return;\n    initScope.push(initToken);\n    const promise = initPromises[shareScopeName];\n    if (promise) return promise;\n    var warn = (msg)=>typeof console !== 'undefined' && console.warn && console.warn(msg);\n    var initExternal = (id)=>{\n        var handleError = (err)=>warn('Initialization of sharing external failed: ' + err);\n        try {\n            var module = webpackRequire(id);\n            if (!module) return;\n            var initFn = (module)=>module && module.init && // @ts-ignore compat legacy mf shared behavior\n                module.init(webpackRequire.S[shareScopeName], initScope);\n            if (module.then) return promises.push(module.then(initFn, handleError));\n            var initResult = initFn(module);\n            // @ts-ignore\n            if (initResult && typeof initResult !== 'boolean' && initResult.then) // @ts-ignore\n            return promises.push(initResult['catch'](handleError));\n        } catch (err) {\n            handleError(err);\n        }\n    };\n    const promises = mfInstance.initializeSharing(shareScopeName, {\n        strategy: mfInstance.options.shareStrategy,\n        initScope,\n        from: 'build'\n    });\n    attachShareScopeMap(webpackRequire);\n    const bundlerRuntimeRemotesOptions = webpackRequire.federation.bundlerRuntimeOptions.remotes;\n    if (bundlerRuntimeRemotesOptions) {\n        Object.keys(bundlerRuntimeRemotesOptions.idToRemoteMap).forEach((moduleId)=>{\n            const info = bundlerRuntimeRemotesOptions.idToRemoteMap[moduleId];\n            const externalModuleId = bundlerRuntimeRemotesOptions.idToExternalAndNameMapping[moduleId][2];\n            if (info.length > 1) {\n                initExternal(externalModuleId);\n            } else if (info.length === 1) {\n                const remoteInfo = info[0];\n                if (!_constant_esm_mjs__WEBPACK_IMPORTED_MODULE_1__.FEDERATION_SUPPORTED_TYPES.includes(remoteInfo.externalType)) {\n                    initExternal(externalModuleId);\n                }\n            }\n        });\n    }\n    if (!promises.length) {\n        return initPromises[shareScopeName] = true;\n    }\n    return initPromises[shareScopeName] = Promise.all(promises).then(()=>initPromises[shareScopeName] = true);\n}\n\nfunction handleInitialConsumes(options) {\n    const { moduleId, moduleToHandlerMapping, webpackRequire } = options;\n    const federationInstance = webpackRequire.federation.instance;\n    if (!federationInstance) {\n        throw new Error('Federation instance not found!');\n    }\n    const { shareKey, shareInfo } = moduleToHandlerMapping[moduleId];\n    try {\n        return federationInstance.loadShareSync(shareKey, {\n            customShareInfo: shareInfo\n        });\n    } catch (err) {\n        console.error('loadShareSync failed! The function should not be called unless you set \"eager:true\". If you do not set it, and encounter this issue, you can check whether an async boundary is implemented.');\n        console.error('The original error message is as follows: ');\n        throw err;\n    }\n}\nfunction installInitialConsumes(options) {\n    const { moduleToHandlerMapping, webpackRequire, installedModules, initialConsumes } = options;\n    initialConsumes.forEach((id)=>{\n        webpackRequire.m[id] = (module)=>{\n            // Handle scenario when module is used synchronously\n            installedModules[id] = 0;\n            delete webpackRequire.c[id];\n            const factory = handleInitialConsumes({\n                moduleId: id,\n                moduleToHandlerMapping,\n                webpackRequire\n            });\n            if (typeof factory !== 'function') {\n                throw new Error(`Shared module is not available for eager consumption: ${id}`);\n            }\n            module.exports = factory();\n        };\n    });\n}\n\nfunction initContainerEntry(options) {\n    const { webpackRequire, shareScope, initScope, shareScopeKey, remoteEntryInitOptions } = options;\n    if (!webpackRequire.S) return;\n    if (!webpackRequire.federation || !webpackRequire.federation.instance || !webpackRequire.federation.initOptions) return;\n    const federationInstance = webpackRequire.federation.instance;\n    var name = shareScopeKey || 'default';\n    federationInstance.initOptions((0,_polyfills_esm_mjs__WEBPACK_IMPORTED_MODULE_2__._)({\n        name: webpackRequire.federation.initOptions.name,\n        remotes: []\n    }, remoteEntryInitOptions));\n    federationInstance.initShareScopeMap(name, shareScope, {\n        hostShareScopeMap: (remoteEntryInitOptions == null ? void 0 : remoteEntryInitOptions.shareScopeMap) || {}\n    });\n    if (webpackRequire.federation.attachShareScopeMap) {\n        webpackRequire.federation.attachShareScopeMap(webpackRequire);\n    }\n    if (typeof webpackRequire.federation.prefetch === 'function') {\n        webpackRequire.federation.prefetch();\n    }\n    // @ts-ignore\n    return webpackRequire.I(name, initScope);\n}\n\nconst federation = {\n    runtime: _module_federation_runtime__WEBPACK_IMPORTED_MODULE_0__,\n    instance: undefined,\n    initOptions: undefined,\n    bundlerRuntime: {\n        remotes,\n        consumes,\n        I: initializeSharing,\n        S: {},\n        installInitialConsumes,\n        initContainerEntry\n    },\n    attachShareScopeMap,\n    bundlerRuntimeOptions: {}\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+webpack-bundler-runtime@0.7.3/node_modules/@module-federation/webpack-bundler-runtime/dist/index.esm.mjs\n");

/***/ }),

/***/ "../node_modules/.pnpm/@module-federation+webpack-bundler-runtime@0.7.3/node_modules/@module-federation/webpack-bundler-runtime/dist/polyfills.esm.mjs":
/*!*************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@module-federation+webpack-bundler-runtime@0.7.3/node_modules/@module-federation/webpack-bundler-runtime/dist/polyfills.esm.mjs ***!
  \*************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _extends)\n/* harmony export */ });\nfunction _extends() {\n    _extends = Object.assign || function assign(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Btb2R1bGUtZmVkZXJhdGlvbit3ZWJwYWNrLWJ1bmRsZXItcnVudGltZUAwLjcuMy9ub2RlX21vZHVsZXMvQG1vZHVsZS1mZWRlcmF0aW9uL3dlYnBhY2stYnVuZGxlci1ydW50aW1lL2Rpc3QvcG9seWZpbGxzLmVzbS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Btb2R1bGUtZmVkZXJhdGlvbit3ZWJwYWNrLWJ1bmRsZXItcnVudGltZUAwLjcuMy9ub2RlX21vZHVsZXMvQG1vZHVsZS1mZWRlcmF0aW9uL3dlYnBhY2stYnVuZGxlci1ydW50aW1lL2Rpc3QvcG9seWZpbGxzLmVzbS5tanM/YmNhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgICAgICBmb3IodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IodmFyIGtleSBpbiBzb3VyY2UpaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICAgIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgeyBfZXh0ZW5kcyBhcyBfIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/.pnpm/@module-federation+webpack-bundler-runtime@0.7.3/node_modules/@module-federation/webpack-bundler-runtime/dist/polyfills.esm.mjs\n");

/***/ }),

/***/ "data:text/javascript;base64,CiAgICBpZih0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgewogICAgZ2xvYmFsVGhpcy5lbnRyeUNodW5rQ2FjaGUgPSBnbG9iYWxUaGlzLmVudHJ5Q2h1bmtDYWNoZSB8fCBuZXcgU2V0KCk7CiAgICBtb2R1bGUuZmlsZW5hbWUgJiYgZ2xvYmFsVGhpcy5lbnRyeUNodW5rQ2FjaGUuYWRkKG1vZHVsZS5maWxlbmFtZSk7CiAgICBpZihtb2R1bGUuY2hpbGRyZW4pIHsKICAgIG1vZHVsZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGMpIHsKICAgICAgYy5maWxlbmFtZSAmJiBnbG9iYWxUaGlzLmVudHJ5Q2h1bmtDYWNoZS5hZGQoYy5maWxlbmFtZSk7CiAgICB9KQp9CiAgfQogICAg":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** data:text/javascript;base64,CiAgICBpZih0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgewogICAgZ2xvYmFsVGhpcy5lbnRyeUNodW5rQ2FjaGUgPSBnbG9iYWxUaGlzLmVudHJ5Q2h1bmtDYWNoZSB8fCBuZXcgU2V0KCk7CiAgICBtb2R1bGUuZmlsZW5hbWUgJiYgZ2xvYmFsVGhpcy5lbnRyeUNodW5rQ2FjaGUuYWRkKG1vZHVsZS5maWxlbmFtZSk7CiAgICBpZihtb2R1bGUuY2hpbGRyZW4pIHsKICAgIG1vZHVsZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGMpIHsKICAgICAgYy5maWxlbmFtZSAmJiBnbG9iYWxUaGlzLmVudHJ5Q2h1bmtDYWNoZS5hZGQoYy5maWxlbmFtZSk7CiAgICB9KQp9CiAgfQogICAg ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n    if(typeof module !== 'undefined') {\n    globalThis.entryChunkCache = globalThis.entryChunkCache || new Set();\n    module.filename && globalThis.entryChunkCache.add(module.filename);\n    if(module.children) {\n    module.children.forEach(function(c) {\n      c.filename && globalThis.entryChunkCache.add(c.filename);\n    })\n}\n  }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YTp0ZXh0L2phdmFzY3JpcHQ7YmFzZTY0LENpQWdJQ0JwWmloMGVYQmxiMllnYlc5a2RXeGxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dld29nSUNBZ1oyeHZZbUZzVkdocGN5NWxiblJ5ZVVOb2RXNXJRMkZqYUdVZ1BTQm5iRzlpWVd4VWFHbHpMbVZ1ZEhKNVEyaDFibXREWVdOb1pTQjhmQ0J1WlhjZ1UyVjBLQ2s3Q2lBZ0lDQnRiMlIxYkdVdVptbHNaVzVoYldVZ0ppWWdaMnh2WW1Gc1ZHaHBjeTVsYm5SeWVVTm9kVzVyUTJGamFHVXVZV1JrS0cxdlpIVnNaUzVtYVd4bGJtRnRaU2s3Q2lBZ0lDQnBaaWh0YjJSMWJHVXVZMmhwYkdSeVpXNHBJSHNLSUNBZ0lHMXZaSFZzWlM1amFHbHNaSEpsYmk1bWIzSkZZV05vS0daMWJtTjBhVzl1S0dNcElIc0tJQ0FnSUNBZ1l5NW1hV3hsYm1GdFpTQW1KaUJuYkc5aVlXeFVhR2x6TG1WdWRISjVRMmgxYm10RFlXTm9aUzVoWkdRb1l5NW1hV3hsYm1GdFpTazdDaUFnSUNCOUtRcDlDaUFnZlFvZ0lDQWciLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9tZS9kYXRhOnRleHQvamF2YXNjcmlwdDtiYXNlNjQsQ2lBZ0lDQnBaaWgwZVhCbGIyWWdiVzlrZFd4bElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2V3b2dJQ0FnWjJ4dlltRnNWR2hwY3k1bGJuUnllVU5vZFc1clEyRmphR1VnUFNCbmJHOWlZV3hVYUdsekxtVnVkSEo1UTJoMWJtdERZV05vWlNCOGZDQnVaWGNnVTJWMEtDazdDaUFnSUNCdGIyUjFiR1V1Wm1sc1pXNWhiV1VnSmlZZ1oyeHZZbUZzVkdocGN5NWxiblJ5ZVVOb2RXNXJRMkZqYUdVdVlXUmtLRzF2WkhWc1pTNW1hV3hsYm1GdFpTazdDaUFnSUNCcFppaHRiMlIxYkdVdVkyaHBiR1J5Wlc0cElIc0tJQ0FnSUcxdlpIVnNaUzVqYUdsc1pISmxiaTVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR01wSUhzS0lDQWdJQ0FnWXk1bWFXeGxibUZ0WlNBbUppQm5iRzlpWVd4VWFHbHpMbVZ1ZEhKNVEyaDFibXREWVdOb1pTNWhaR1FvWXk1bWFXeGxibUZ0WlNrN0NpQWdJQ0I5S1FwOUNpQWdmUW9nSUNBZz9hNjUxIl0sInNvdXJjZXNDb250ZW50IjpbIlxuICAgIGlmKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZ2xvYmFsVGhpcy5lbnRyeUNodW5rQ2FjaGUgPSBnbG9iYWxUaGlzLmVudHJ5Q2h1bmtDYWNoZSB8fCBuZXcgU2V0KCk7XG4gICAgbW9kdWxlLmZpbGVuYW1lICYmIGdsb2JhbFRoaXMuZW50cnlDaHVua0NhY2hlLmFkZChtb2R1bGUuZmlsZW5hbWUpO1xuICAgIGlmKG1vZHVsZS5jaGlsZHJlbikge1xuICAgIG1vZHVsZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGMpIHtcbiAgICAgIGMuZmlsZW5hbWUgJiYgZ2xvYmFsVGhpcy5lbnRyeUNodW5rQ2FjaGUuYWRkKGMuZmlsZW5hbWUpO1xuICAgIH0pXG59XG4gIH1cbiAgICAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///data:text/javascript;base64,CiAgICBpZih0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgewogICAgZ2xvYmFsVGhpcy5lbnRyeUNodW5rQ2FjaGUgPSBnbG9iYWxUaGlzLmVudHJ5Q2h1bmtDYWNoZSB8fCBuZXcgU2V0KCk7CiAgICBtb2R1bGUuZmlsZW5hbWUgJiYgZ2xvYmFsVGhpcy5lbnRyeUNodW5rQ2FjaGUuYWRkKG1vZHVsZS5maWxlbmFtZSk7CiAgICBpZihtb2R1bGUuY2hpbGRyZW4pIHsKICAgIG1vZHVsZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGMpIHsKICAgICAgYy5maWxlbmFtZSAmJiBnbG9iYWxUaGlzLmVudHJ5Q2h1bmtDYWNoZS5hZGQoYy5maWxlbmFtZSk7CiAgICB9KQp9CiAgfQogICAg\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 			__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 			module = execOptions.module;
/******/ 			execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/federation runtime */
/******/ 	(() => {
/******/ 		if(!__webpack_require__.federation){
/******/ 			__webpack_require__.federation = {
/******/ 				initOptions: {"name":"home","remotes":[{"alias":"shop","name":"shop","entry":"http://localhost:3002/_next/static/ssr/remoteEntry.js","shareScope":"default"},{"alias":"checkout","name":"checkout","entry":"http://localhost:3000/_next/static/ssr/remoteEntry.js","shareScope":"default"}],"shareStrategy":"loaded-first"},
/******/ 				chunkMatcher: function(chunkId) {return !/^webpack_(container_remote_checkout_titl|sharing_consume_default_react_jsx\-runtime_react_jsx\-runtim)e$/.test(chunkId)},
/******/ 				rootOutputDir: "",
/******/ 				initialConsumes: undefined,
/******/ 				bundlerRuntimeOptions: {}
/******/ 			};
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames not based on template
/******/ 			if (chunkId === "vendor-chunks/@module-federation+nextjs-mf@8.7.8_next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0__r_pcycuvtzz5zlkowjzy2vwyrhb4") return "" + chunkId + ".js";
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "-" + {"vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0":"e6628f4e2be79f09","vendor-chunks/@swc+helpers@0.5.2":"1dd2cb6e81c0fe61","vendor-chunks/react@18.2.0":"bd3a26f74ea8f855","vendor-chunks/styled-jsx@5.1.1_react@18.2.0":"e4c0c27b3d0b05bd","__federation_expose_nav":"184cfe80f056d300","__federation_expose_home":"81811db653f57fff","__federation_expose_pages__checkout":"a81ebaaa8aea2402","__federation_expose_pages__shop":"0761509fb85ecc5d","__federation_expose_pages__p__[...slug]":"9340131970b824bb","components_helloWorld_js":"72764ee7111aa51d"}[chunkId] + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "home:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/remotes loading */
/******/ 	(() => {
/******/ 		var chunkMapping = {
/******/ 			"__federation_expose_pages__checkout": [
/******/ 				"webpack/container/remote/checkout/checkout"
/******/ 			],
/******/ 			"__federation_expose_pages__shop": [
/******/ 				"webpack/container/remote/shop/shop"
/******/ 			],
/******/ 			"__federation_expose_pages__p__[...slug]": [
/******/ 				"webpack/container/remote/shop/pdp"
/******/ 			],
/******/ 			"webpack_container_remote_checkout_title": [
/******/ 				"webpack/container/remote/checkout/title"
/******/ 			]
/******/ 		};
/******/ 		var idToExternalAndNameMapping = {
/******/ 			"webpack/container/remote/checkout/checkout": [
/******/ 				"default",
/******/ 				"./checkout",
/******/ 				"webpack/container/reference/checkout"
/******/ 			],
/******/ 			"webpack/container/remote/shop/shop": [
/******/ 				"default",
/******/ 				"./shop",
/******/ 				"webpack/container/reference/shop"
/******/ 			],
/******/ 			"webpack/container/remote/shop/pdp": [
/******/ 				"default",
/******/ 				"./pdp",
/******/ 				"webpack/container/reference/shop"
/******/ 			],
/******/ 			"webpack/container/remote/checkout/title": [
/******/ 				"default",
/******/ 				"./title",
/******/ 				"webpack/container/reference/checkout"
/******/ 			]
/******/ 		};
/******/ 		var idToRemoteMap = {
/******/ 			"webpack/container/remote/checkout/checkout": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "checkout",
/******/ 					"externalModuleId": "webpack/container/reference/checkout"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/shop/shop": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "shop",
/******/ 					"externalModuleId": "webpack/container/reference/shop"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/shop/pdp": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "shop",
/******/ 					"externalModuleId": "webpack/container/reference/shop"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/checkout/title": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "checkout",
/******/ 					"externalModuleId": "webpack/container/reference/checkout"
/******/ 				}
/******/ 			]
/******/ 		};
/******/ 		__webpack_require__.federation.bundlerRuntimeOptions.remotes = {idToRemoteMap,chunkMapping, idToExternalAndNameMapping, webpackRequire:__webpack_require__};
/******/ 		__webpack_require__.f.remotes = (chunkId, promises) => {
/******/ 			__webpack_require__.federation.bundlerRuntime.remotes({idToRemoteMap,chunkMapping, idToExternalAndNameMapping, chunkId, promises, webpackRequire:__webpack_require__});
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/runtimeId */
/******/ 	(() => {
/******/ 		__webpack_require__.j = "home";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/sharing */
/******/ 	(() => {
/******/ 		__webpack_require__.S = {};
/******/ 		var initPromises = {};
/******/ 		var initTokens = {};
/******/ 		__webpack_require__.I = (name, initScope) => {
/******/ 			if(!initScope) initScope = [];
/******/ 			// handling circular init calls
/******/ 			var initToken = initTokens[name];
/******/ 			if(!initToken) initToken = initTokens[name] = {};
/******/ 			if(initScope.indexOf(initToken) >= 0) return;
/******/ 			initScope.push(initToken);
/******/ 			// only runs once
/******/ 			if(initPromises[name]) return initPromises[name];
/******/ 			// creates a new share scope if needed
/******/ 			if(!__webpack_require__.o(__webpack_require__.S, name)) __webpack_require__.S[name] = {};
/******/ 			// runs all init snippets from all modules reachable
/******/ 			var scope = __webpack_require__.S[name];
/******/ 			var warn = (msg) => {
/******/ 				if (typeof console !== "undefined" && console.warn) console.warn(msg);
/******/ 			};
/******/ 			var uniqueName = "home";
/******/ 			var register = (name, version, factory, eager) => {
/******/ 				var versions = scope[name] = scope[name] || {};
/******/ 				var activeVersion = versions[version];
/******/ 				if(!activeVersion || (!activeVersion.loaded && (!eager != !activeVersion.eager ? eager : uniqueName > activeVersion.from))) versions[version] = { get: factory, from: uniqueName, eager: !!eager };
/******/ 			};
/******/ 			var initExternal = (id) => {
/******/ 				var handleError = (err) => (warn("Initialization of sharing external failed: " + err));
/******/ 				try {
/******/ 					var module = __webpack_require__(id);
/******/ 					if(!module) return;
/******/ 					var initFn = (module) => (module && module.init && module.init(__webpack_require__.S[name], initScope))
/******/ 					if(module.then) return promises.push(module.then(initFn, handleError));
/******/ 					var initResult = initFn(module);
/******/ 					if(initResult && initResult.then) return promises.push(initResult['catch'](handleError));
/******/ 				} catch(err) { handleError(err); }
/******/ 			}
/******/ 			var promises = [];
/******/ 			switch(name) {
/******/ 				case "default": {
/******/ 					register("next/dynamic", "14.1.4", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dynamic.js */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dynamic.js"))))));
/******/ 					register("next/head", "14.1.4", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/head.js */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/head.js"))))));
/******/ 					register("next/image", "14.1.4", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/image.js */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/image.js"))))));
/******/ 					register("next/link", "14.1.4", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/link.js */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/link.js"))))));
/******/ 					register("next/router", "14.1.4", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/router.js */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/router.js"))))));
/******/ 					register("next/script", "14.1.4", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/script.js */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/script.js"))))));
/******/ 					register("react/jsx-dev-runtime", "18.2.0", () => (__webpack_require__.e("vendor-chunks/react@18.2.0").then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-dev-runtime.js */ "../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-dev-runtime.js"))))));
/******/ 					register("react/jsx-runtime", "18.2.0", () => (__webpack_require__.e("vendor-chunks/react@18.2.0").then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js */ "../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js"))))));
/******/ 					register("styled-jsx", "5.1.1", () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/styled-jsx@5.1.1_react@18.2.0")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/styled-jsx@5.1.1_react@18.2.0/node_modules/styled-jsx/index.js */ "../node_modules/.pnpm/styled-jsx@5.1.1_react@18.2.0/node_modules/styled-jsx/index.js"))))));
/******/ 					initExternal("webpack/container/reference/checkout");
/******/ 					initExternal("webpack/container/reference/shop");
/******/ 				}
/******/ 				break;
/******/ 			}
/******/ 			if(!promises.length) return initPromises[name] = 1;
/******/ 			return initPromises[name] = Promise.all(promises).then(() => (initPromises[name] = 1));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/sharing */
/******/ 	(() => {
/******/ 		__webpack_require__.federation.initOptions.shared = {	"next/dynamic": [{	version: "14.1.4",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dynamic.js */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dynamic.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"next/head": [{	version: "14.1.4",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/head.js */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/head.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"next/image": [{	version: "14.1.4",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/image.js */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/image.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"next/link": [{	version: "14.1.4",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/link.js */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/link.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"next/router": [{	version: "14.1.4",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/router.js */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/router.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"next/script": [{	version: "14.1.4",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/script.js */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/script.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"react/jsx-dev-runtime": [{	version: "18.2.0",
/******/ 				get: () => (__webpack_require__.e("vendor-chunks/react@18.2.0").then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-dev-runtime.js */ "../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-dev-runtime.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"react/jsx-runtime": [{	version: "18.2.0",
/******/ 				get: () => (__webpack_require__.e("vendor-chunks/react@18.2.0").then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js */ "../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"strictVersion":false,"singleton":true}},],	"styled-jsx": [{	version: "5.1.1",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/styled-jsx@5.1.1_react@18.2.0")]).then(() => (() => (__webpack_require__(/*! ../node_modules/.pnpm/styled-jsx@5.1.1_react@18.2.0/node_modules/styled-jsx/index.js */ "../node_modules/.pnpm/styled-jsx@5.1.1_react@18.2.0/node_modules/styled-jsx/index.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":"^5.1.1","strictVersion":false,"singleton":true}},],}
/******/ 		__webpack_require__.S = {};
/******/ 		var initPromises = {};
/******/ 		var initTokens = {};
/******/ 		__webpack_require__.I = (name, initScope) => {
/******/ 			return __webpack_require__.federation.bundlerRuntime.I({	shareScopeName: name,
/******/ 				webpackRequire: __webpack_require__,
/******/ 				initPromises: initPromises,
/******/ 				initTokens: initTokens,
/******/ 				initScope: initScope,
/******/ 			})
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/consumes */
/******/ 	(() => {
/******/ 		var installedModules = {};
/******/ 		var moduleToHandlerMapping = {
/******/ 			"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/react@18.2.0").then(() => (() => (__webpack_require__(/*! react/jsx-runtime */ "../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": false,
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "react/jsx-runtime",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/react@18.2.0").then(() => (() => (__webpack_require__(/*! react/jsx-dev-runtime */ "../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-dev-runtime.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": false,
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "react/jsx-dev-runtime",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/next/link/next/link?d443": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! next/link */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/link.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^14.1.4",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "next/link",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/next/head/next/head?aa0b": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0"), __webpack_require__.e("vendor-chunks/@swc+helpers@0.5.2"), __webpack_require__.e("webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime")]).then(() => (() => (__webpack_require__(/*! next/head */ "../node_modules/.pnpm/next@14.1.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/head.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^14.1.4",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "next/head",
/******/ 			}
/******/ 		};
/******/ 		// no consumes in initial chunks
/******/ 		var chunkMapping = {
/******/ 			"webpack_sharing_consume_default_react_jsx-runtime_react_jsx-runtime": [
/******/ 				"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime"
/******/ 			],
/******/ 			"__federation_expose_nav": [
/******/ 				"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime",
/******/ 				"webpack/sharing/consume/default/next/link/next/link?d443"
/******/ 			],
/******/ 			"__federation_expose_home": [
/******/ 				"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime",
/******/ 				"webpack/sharing/consume/default/next/head/next/head?aa0b"
/******/ 			]
/******/ 		};
/******/ 		__webpack_require__.f.consumes = (chunkId, promises) => {
/******/ 			__webpack_require__.federation.bundlerRuntime.consumes({
/******/ 			chunkMapping: chunkMapping,
/******/ 			installedModules: installedModules,
/******/ 			chunkId: chunkId,
/******/ 			moduleToHandlerMapping: moduleToHandlerMapping,
/******/ 			promises: promises,
/******/ 			webpackRequire:__webpack_require__
/******/ 			});
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/embed/federation */
/******/ 	(() => {
/******/ 		__webpack_require__(/*! ./node_modules/.federation/entry.f9043f7020a16d33f7d0806c46b3d935.js */ "./node_modules/.federation/entry.f9043f7020a16d33f7d0806c46b3d935.js")
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/readFile chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "0" means "already loaded", Promise means loading
/******/ 		var installedChunks = {
/******/ 			"home": 0
/******/ 		};
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		var installChunk = (chunk) => {
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			for(var i = 0; i < chunkIds.length; i++) {
/******/ 				if(installedChunks[chunkIds[i]]) {
/******/ 					installedChunks[chunkIds[i]][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 		
/******/ 		};
/******/ 		
/******/ 		// ReadFile + VM.run chunk loading for javascript
/******/ 		__webpack_require__.f.readFileVm = function(chunkId, promises) {
/******/ 		
/******/ 			var installedChunkData = installedChunks[chunkId];
/******/ 			if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 				// array of [resolve, reject, promise] means "currently loading"
/******/ 				if(installedChunkData) {
/******/ 					promises.push(installedChunkData[2]);
/******/ 				} else {
/******/ 					if(!/^webpack_(container_remote_checkout_titl|sharing_consume_default_react_jsx\-runtime_react_jsx\-runtim)e$/.test(chunkId)) {
/******/ 						// load the chunk and return promise to it
/******/ 						var promise = new Promise(function(resolve, reject) {
/******/ 							installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 							var filename = require('path').join(__dirname, "" + __webpack_require__.u(chunkId));
/******/ 							require('fs').readFile(filename, 'utf-8', function(err, content) {
/******/ 								if(err) return reject(err);
/******/ 								var chunk = {};
/******/ 								require('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\n})', filename)(chunk, require, require('path').dirname(filename), filename);
/******/ 								installChunk(chunk);
/******/ 							});
/******/ 						});
/******/ 						promises.push(installedChunkData[2] = promise);
/******/ 					} else installedChunks[chunkId] = 0;
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no external install chunk
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	__webpack_require__("data:text/javascript;base64,CiAgICBpZih0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgewogICAgZ2xvYmFsVGhpcy5lbnRyeUNodW5rQ2FjaGUgPSBnbG9iYWxUaGlzLmVudHJ5Q2h1bmtDYWNoZSB8fCBuZXcgU2V0KCk7CiAgICBtb2R1bGUuZmlsZW5hbWUgJiYgZ2xvYmFsVGhpcy5lbnRyeUNodW5rQ2FjaGUuYWRkKG1vZHVsZS5maWxlbmFtZSk7CiAgICBpZihtb2R1bGUuY2hpbGRyZW4pIHsKICAgIG1vZHVsZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGMpIHsKICAgICAgYy5maWxlbmFtZSAmJiBnbG9iYWxUaGlzLmVudHJ5Q2h1bmtDYWNoZS5hZGQoYy5maWxlbmFtZSk7CiAgICB9KQp9CiAgfQogICAg");
/******/ 	var __webpack_exports__ = __webpack_require__("webpack/container/entry/home");
/******/ 	module.exports.home = __webpack_exports__;
/******/ 	
/******/ })()
;